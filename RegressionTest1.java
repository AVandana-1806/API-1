import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        gov.ca.cwds.data.persistence.ns.Person person14 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity15 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity16 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person14, ethnicity15);
        java.util.Date date17 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person18 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity19 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity20 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person18, ethnicity19);
        java.util.Date date21 = personEthnicity20.getLastUpdatedTime();
        boolean boolean22 = personEthnicity16.equals((java.lang.Object) personEthnicity20);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity16.setEthnicity(ethnicity26);
        java.util.Date date28 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship29 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date7, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date28);
        java.lang.String str30 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date7);
        java.lang.String str31 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date7);
        gov.ca.cwds.data.persistence.ns.Person person36 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity37 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity38 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person36, ethnicity37);
        java.util.Date date39 = personEthnicity38.getLastUpdatedTime();
        java.util.Date date40 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        java.lang.String str41 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date39);
        java.lang.String str42 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date39);
        java.util.Date date43 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship44 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("HH:mm:ss", (java.lang.Short) (short) 0, date7, "15:52:54", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "Non-mandated Reporter", "", date43);
        java.lang.String str45 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "2019-09-03" + "'", str9.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date17);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date21);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str30 + "' != '" + "2019-09-03T15:53:32.057Z" + "'", str30.equals("2019-09-03T15:53:32.057Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str31 + "' != '" + "15:53:32" + "'", str31.equals("15:53:32"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date40);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str41 + "' != '" + "2019-09-03-15.53.32.057" + "'", str41.equals("2019-09-03-15.53.32.057"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "2019-09-03" + "'", str42.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date43);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str45 + "' != '" + "2019-09-03T15:53:32.057Z" + "'", str45.equals("2019-09-03T15:53:32.057Z"));
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        java.lang.Boolean boolean11 = participantEntity0.getEstimatedDob();
        java.lang.String str12 = participantEntity0.getSsn();
        participantEntity0.setApproximateAge("2019-09-03-15.53.05.703");
        java.util.Date date15 = participantEntity0.getDateOfDeath();
        java.lang.String str16 = participantEntity0.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId9 = personEthnicity6.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity11 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity12 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity11);
        java.util.Date date13 = personEthnicity12.getLastUpdatedTime();
        java.util.Date date14 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date13);
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date13);
        java.lang.String str16 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date13);
        boolean boolean17 = personEthnicityId9.equals((java.lang.Object) date13);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor32 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address33 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor32);
        gov.ca.cwds.rest.api.domain.Address address34 = new gov.ca.cwds.rest.api.domain.Address("N", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "2019-09-03T15:52:58.300-0700", (java.lang.Integer) (-1), "00001", (java.lang.Integer) 100, legacyDescriptor32);
        java.lang.String str35 = address34.getLegacySourceTable();
        boolean boolean36 = personEthnicityId9.equals((java.lang.Object) address34);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity37 = personEthnicityId9.getEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03-15.53.32.130" + "'", str15.equals("2019-09-03-15.53.32.130"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "2019-09-03" + "'", str16.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "N" + "'", str35.equals("N"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ethnicity37);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity40 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType42 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role43 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity44 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean45 = participantEntity44.getProbationYouth();
        participantEntity44.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity44.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray50 = participantEntity44.getLanguages();
        java.lang.Object obj51 = stringArrayType42.assemble((java.io.Serializable) role43, (java.lang.Object) strArray50);
        java.lang.Class<java.lang.String[]> strArrayClass52 = stringArrayType42.returnedClass();
        java.sql.ResultSet resultSet53 = null;
        java.lang.String[] strArray59 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor60 = null;
        java.lang.Object obj62 = stringArrayType42.nullSafeGet(resultSet53, strArray59, sharedSessionContractImplementor60, (java.lang.Object) 1);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity63 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean64 = participantEntity63.getProbationYouth();
        participantEntity63.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity63.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray69 = participantEntity63.getLanguages();
        java.lang.String[] strArray70 = participantEntity63.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity82 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("hi!", date5, date12, "2019-09-03-15.53.07.205", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.05.703", "yyyy-MM-dd-HH.mm.ss.SSS", screeningEntity40, "yyyy-MM-dd HH:mm:ss.SSS", strArray59, strArray70, "", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:08.733-0700", "", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", (java.lang.Boolean) false, (java.lang.Boolean) false, (java.lang.Boolean) true, "2019-09-03T15:53:08.733-0700", "15:53:08", (java.lang.Boolean) true);
        participantEntity82.setId("2019-09-03T15:53:11.857Z");
        java.lang.String str85 = participantEntity82.getLegacyId();
        java.lang.String str86 = participantEntity82.getScreeningId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:32.162Z" + "'", str6.equals("2019-09-03T15:53:32.162Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "2019-09-03" + "'", str35.equals("2019-09-03"));
        org.junit.Assert.assertTrue("'" + role43 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role43.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj51.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str85.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity4);
        gov.ca.cwds.data.persistence.ns.Person person6 = null;
        personEthnicity5.setPerson(person6);
        java.util.Date date8 = personEthnicity5.getLastUpdatedTime();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date8);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Sep 03 15:53:32 PDT 2019");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        java.lang.Boolean boolean9 = participantEntity0.getEstimatedDob();
        java.lang.String str10 = participantEntity0.getRelatedScreeningId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str10.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getRaces();
        java.lang.Boolean boolean2 = participantEntity0.getSealed();
        participantEntity0.setLegacyId("2019-09-03T15:53:25.974Z");
        java.lang.Boolean boolean5 = participantEntity0.getSensitive();
        participantEntity0.setLegacySourceTable("2019-09-03T15:53:23.483Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean5);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet37 = person25.getPhoneNumber();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList38 = person25.getMessages();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor46 = null;
        gov.ca.cwds.rest.api.domain.Address address47 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor46);
        java.lang.String str48 = address47.getCity();
        java.lang.Integer int49 = address47.getType();
        java.lang.String str50 = address47.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter51 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        boolean boolean52 = address47.equals((java.lang.Object) hOIReporter51);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor53 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor53.setId("2019-09-03-15.52.55.282");
        hOIReporter51.setLegacyDescriptor(legacyDescriptor53);
        boolean boolean57 = person25.equals((java.lang.Object) hOIReporter51);
        java.lang.String str58 = person25.getFirstName();
        java.lang.String str59 = person25.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str48.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str50.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str58.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str59.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        csecEntity0.setParticipantId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity6 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList7 = ethnicity6.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity6, "Anonymous Reporter", "N");
        java.lang.String str11 = ethnicity10.getSubEthnicity();
        java.util.Date date12 = ethnicity10.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity10);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId14 = personEthnicity13.getPrimaryKey();
        boolean boolean15 = csecEntity0.equals((java.lang.Object) personEthnicityId14);
        java.lang.String str16 = csecEntity0.getParticipantId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str11.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds" + "'", str16.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds"));
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor3 = hOIReporter0.getLegacyDescriptor();
        java.lang.String str4 = hOIReporter0.getNameSuffix();
        java.lang.String str5 = hOIReporter0.getNameSuffix();
        java.lang.String str6 = hOIReporter0.toJson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str6.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str4 = ethnicity3.getEthnicityType();
        java.lang.String str5 = ethnicity3.getSubEthnicity();
        java.util.Date date6 = ethnicity3.getLastUpdatedTime();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        java.lang.Long long4 = race3.getPrimaryKey();
        java.lang.Long long5 = race3.getPrimaryKey();
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race3);
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList7 = race6.getMessages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList7);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        java.lang.String[] strArray7 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date14);
        java.lang.String str16 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date14);
        gov.ca.cwds.data.persistence.ns.Person person21 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity22 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity23 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person21, ethnicity22);
        java.util.Date date24 = personEthnicity23.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person25 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity27 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person25, ethnicity26);
        java.util.Date date28 = personEthnicity27.getLastUpdatedTime();
        boolean boolean29 = personEthnicity23.equals((java.lang.Object) personEthnicity27);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity33 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity23.setEthnicity(ethnicity33);
        java.util.Date date35 = personEthnicity23.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship36 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date14, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date35);
        java.lang.String str37 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date35);
        gov.ca.cwds.data.persistence.ns.Person person38 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity39 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity40 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person38, ethnicity39);
        java.util.Date date41 = personEthnicity40.getLastUpdatedTime();
        java.util.Date date42 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date41);
        java.lang.String str43 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date42);
        java.lang.String str44 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date42);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity49 = null;
        java.lang.String[] strArray54 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity55 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean56 = participantEntity55.getProbationYouth();
        participantEntity55.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity55.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray61 = participantEntity55.getLanguages();
        java.lang.String[] strArray62 = participantEntity55.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity74 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date35, date42, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity49, "2019-09-03-15.52.58.871", strArray54, strArray62, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        participantEntity0.setDateOfBirth(date35);
        java.lang.String str76 = participantEntity0.getMiddleName();
        java.lang.String str77 = participantEntity0.getLastName();
        java.lang.Boolean boolean78 = participantEntity0.getSealed();
        java.util.Date date79 = participantEntity0.getDateOfDeath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03" + "'", str15.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "2019-09-03" + "'", str16.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date24);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date35);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str37 + "' != '" + "2019-09-03T15:53:32.470-0700" + "'", str37.equals("2019-09-03T15:53:32.470-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date41);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date42);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str43 + "' != '" + "15:53:32" + "'", str43.equals("15:53:32"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str44 + "' != '" + "2019-09-03T15:53:32.470-0700" + "'", str44.equals("2019-09-03T15:53:32.470-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str77.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date79);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) (-1L), "15:53:06", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "yyyy-MM-dd");
        java.lang.Long long5 = phoneNumber4.getId();
        phoneNumber4.setId((java.lang.Long) 1L);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5.equals((-1L)));
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookLocalDateString("2019-09-03-15.53.05.294");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.time.format.DateTimeParseException: Text '2019-09-03-15.53.05.294' could not be parsed, unparsed text found at index 10");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getSsn();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        address8.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter13 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray21 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet22, addressArray21);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray24 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, phoneNumberArray24);
        gov.ca.cwds.rest.api.domain.Language[] languageArray27 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet28, languageArray27);
        gov.ca.cwds.rest.api.domain.Race[] raceArray30 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet31, raceArray30);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity35 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray36 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity35 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet37 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37, ethnicityArray36);
        gov.ca.cwds.rest.api.domain.Person person39 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37);
        boolean boolean40 = hOIReporter13.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter13.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor50 = null;
        gov.ca.cwds.rest.api.domain.Address address51 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor50);
        java.lang.String str52 = address51.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor53 = address51.getLegacyDescriptor();
        hOIReporter13.setLegacyDescriptor(legacyDescriptor53);
        org.joda.time.DateTime dateTime55 = null;
        legacyDescriptor53.setLastUpdated(dateTime55);
        address8.setLegacyDescriptor(legacyDescriptor53);
        java.lang.Integer int58 = address8.getState();
        address8.setLegacySourceTable("2019-09-03T15:53:21.072Z");
        gov.ca.cwds.data.persistence.ns.Person person61 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity62 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity63 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person61, ethnicity62);
        java.util.Date date64 = personEthnicity63.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person65 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity66 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity67 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person65, ethnicity66);
        java.util.Date date68 = personEthnicity67.getLastUpdatedTime();
        boolean boolean69 = personEthnicity63.equals((java.lang.Object) personEthnicity67);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity73 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity63.setEthnicity(ethnicity73);
        java.util.Date date75 = personEthnicity63.getLastUpdatedTime();
        boolean boolean76 = address8.equals((java.lang.Object) date75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str52.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58.equals(100));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date64);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date68);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date68.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date75);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date75.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookBooleanString("15:53:25");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unable to generate boolean");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 1L, "yyyy-MM-dd-HH.mm.ss.SSS", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity5 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean6 = participantEntity5.getProbationYouth();
        participantEntity5.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity5.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray11 = participantEntity5.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity12 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean13 = participantEntity12.getProbationYouth();
        participantEntity12.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date16 = null;
        participantEntity12.setDateOfBirth(date16);
        participantEntity12.setId("_n");
        boolean boolean20 = participantEntity5.equals((java.lang.Object) "_n");
        boolean boolean21 = phoneNumber4.equals((java.lang.Object) boolean20);
        phoneNumber4.setId((java.lang.Long) 0L);
        java.lang.Long long24 = phoneNumber4.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24.equals(0L));
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray47 = stringArrayType0.sqlTypes();
        int[] intArray48 = stringArrayType0.sqlTypes();
        java.sql.PreparedStatement preparedStatement49 = null;
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity50 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int51 = csecEntity50.getId();
        java.lang.String str52 = csecEntity50.getCsecCodeId();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringArrayType0.nullSafeSet(preparedStatement49, (java.lang.Object) str52, (int) (byte) -1, sharedSessionContractImplementor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity2.setEthnicity(ethnicity12);
        java.util.Date date14 = ethnicity12.getCreateDateTime();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date14);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 1L, "yyyy-MM-dd-HH.mm.ss.SSS", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity5 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean6 = participantEntity5.getProbationYouth();
        participantEntity5.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity5.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray11 = participantEntity5.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity12 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean13 = participantEntity12.getProbationYouth();
        participantEntity12.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date16 = null;
        participantEntity12.setDateOfBirth(date16);
        participantEntity12.setId("_n");
        boolean boolean20 = participantEntity5.equals((java.lang.Object) "_n");
        boolean boolean21 = phoneNumber4.equals((java.lang.Object) boolean20);
        phoneNumber4.setId((java.lang.Long) 0L);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity24 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean25 = participantEntity24.getProbationYouth();
        participantEntity24.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity24.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray30 = participantEntity24.getLanguages();
        participantEntity24.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        java.lang.String str33 = participantEntity24.getLegacySourceTable();
        boolean boolean34 = phoneNumber4.equals((java.lang.Object) str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        java.lang.String str4 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:32 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str4 + "' != '" + "2019-09-03-15.53.32.794" + "'", str4.equals("2019-09-03-15.53.32.794"));
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str3 = participantEntity0.getId();
        participantEntity0.setScreeningId("2019-09-03T15:53:17.143Z");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter0.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor37 = null;
        gov.ca.cwds.rest.api.domain.Address address38 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor37);
        java.lang.String str39 = address38.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor40 = address38.getLegacyDescriptor();
        hOIReporter0.setLegacyDescriptor(legacyDescriptor40);
        java.lang.String str42 = legacyDescriptor40.getTableDescription();
        org.joda.time.DateTime dateTime43 = legacyDescriptor40.getLastUpdated();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str39.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(dateTime43);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getId();
        participantEntity0.setProbationYouth((java.lang.Boolean) false);
        participantEntity0.setGender("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String str13 = participantEntity0.getMiddleName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimeString("2019-09-03-15.53.02.984");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03-15.53.02.984\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        java.lang.Object obj3 = stringJsonUserType0.deepCopy((java.lang.Object) "N");
        java.sql.PreparedStatement preparedStatement4 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor12 = null;
        gov.ca.cwds.rest.api.domain.Address address13 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor12);
        java.lang.String str14 = address13.getCity();
        java.lang.Integer int15 = address13.getType();
        address13.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter18 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray26 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet27 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet27, addressArray26);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray29 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet30 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet30, phoneNumberArray29);
        gov.ca.cwds.rest.api.domain.Language[] languageArray32 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet33 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet33, languageArray32);
        gov.ca.cwds.rest.api.domain.Race[] raceArray35 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet36 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet36, raceArray35);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity40 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray41 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity40 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet42 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet42, ethnicityArray41);
        gov.ca.cwds.rest.api.domain.Person person44 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet27, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet30, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet33, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet36, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet42);
        boolean boolean45 = hOIReporter18.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter18.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor55 = null;
        gov.ca.cwds.rest.api.domain.Address address56 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor55);
        java.lang.String str57 = address56.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor58 = address56.getLegacyDescriptor();
        hOIReporter18.setLegacyDescriptor(legacyDescriptor58);
        org.joda.time.DateTime dateTime60 = null;
        legacyDescriptor58.setLastUpdated(dateTime60);
        address13.setLegacyDescriptor(legacyDescriptor58);
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringJsonUserType0.nullSafeSet(preparedStatement4, (java.lang.Object) legacyDescriptor58, 100, sharedSessionContractImplementor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj3 + "' != '" + "N" + "'", obj3.equals("N"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str14.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str57.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor58);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        java.lang.String str2 = participantEntity0.getNameSuffix();
        java.lang.String str3 = participantEntity0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getMiddleName();
        person25.doSomething();
        java.util.Set<gov.ca.cwds.rest.api.domain.Address> addressSet31 = person25.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str29.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressSet31);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity0 = new gov.ca.cwds.data.persistence.ns.Ethnicity();
        java.lang.String str1 = ethnicity0.getSubEthnicity();
        java.lang.String str2 = ethnicity0.getSubEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        java.lang.String[] strArray7 = participantEntity0.getLanguages();
        java.lang.Boolean boolean8 = participantEntity0.getProbationYouth();
        java.lang.String str9 = participantEntity0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str9.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.Boolean boolean2 = participantEntity0.getProbationYouth();
        participantEntity0.setApproximateAge("2019-09-03-15.53.10.189");
        java.util.Date date5 = participantEntity0.getDateOfDeath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date5);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity5);
        java.lang.String str7 = ethnicity5.getEthnicityType();
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity8 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.lang.String str37 = person25.getSsn();
        java.lang.String str38 = person25.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.Address> addressSet39 = person25.getAddress();
        java.lang.String str40 = person25.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str37.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str38.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressSet39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str40.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        java.lang.String str12 = participantEntity0.getScreeningId();
        java.lang.Boolean boolean13 = participantEntity0.getProbationYouth();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        java.lang.String str12 = participantEntity0.getScreeningId();
        participantEntity0.setFirstName("15:53:10");
        java.lang.String str15 = participantEntity0.getRelatedScreeningId();
        participantEntity0.setNameSuffix("2019-09-03T15:53:29.725-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        participantEntity0.setGender("yyyy-MM-dd HH:mm:ss.SSS");
        participantEntity0.setLegacySourceTable("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity11 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity12 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity11);
        java.util.Date date13 = personEthnicity12.getLastUpdatedTime();
        java.util.Date date14 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date13);
        participantEntity0.setDateOfBirth(date13);
        java.lang.Boolean boolean16 = participantEntity0.getSealed();
        java.lang.String str17 = participantEntity0.getRelatedScreeningId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        address8.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter13 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray21 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet22, addressArray21);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray24 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, phoneNumberArray24);
        gov.ca.cwds.rest.api.domain.Language[] languageArray27 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet28, languageArray27);
        gov.ca.cwds.rest.api.domain.Race[] raceArray30 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet31, raceArray30);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity35 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray36 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity35 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet37 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37, ethnicityArray36);
        gov.ca.cwds.rest.api.domain.Person person39 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37);
        boolean boolean40 = hOIReporter13.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter13.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor50 = null;
        gov.ca.cwds.rest.api.domain.Address address51 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor50);
        java.lang.String str52 = address51.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor53 = address51.getLegacyDescriptor();
        hOIReporter13.setLegacyDescriptor(legacyDescriptor53);
        org.joda.time.DateTime dateTime55 = null;
        legacyDescriptor53.setLastUpdated(dateTime55);
        address8.setLegacyDescriptor(legacyDescriptor53);
        java.lang.Integer int58 = address8.getState();
        java.lang.String str59 = address8.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str52.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58.equals(100));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str59.equals("yyyy-MM-dd HH:mm:ss.SSS"));
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.util.Date date11 = gov.ca.cwds.rest.api.domain.DomainChef.uncookISO8601Timestamp("2019-09-03T15:53:05.518Z");
        participantEntity0.setDateOfDeath(date11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(date11.toString(), "Tue Sep 03 15:53:05 PDT 2019");
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter0.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor37 = null;
        gov.ca.cwds.rest.api.domain.Address address38 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor37);
        java.lang.String str39 = address38.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor40 = address38.getLegacyDescriptor();
        hOIReporter0.setLegacyDescriptor(legacyDescriptor40);
        org.joda.time.DateTime dateTime42 = null;
        legacyDescriptor40.setLastUpdated(dateTime42);
        gov.ca.cwds.data.persistence.ns.Race race44 = new gov.ca.cwds.data.persistence.ns.Race();
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonRace> personRaceSet45 = race44.getPersonRace();
        boolean boolean46 = legacyDescriptor40.equals((java.lang.Object) personRaceSet45);
        org.joda.time.DateTime dateTime47 = null;
        legacyDescriptor40.setLastUpdated(dateTime47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str39.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personRaceSet45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity4);
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet6 = ethnicity4.getPersonEthnicity();
        java.lang.String str7 = ethnicity4.getLastUpdatedId();
        java.lang.String str8 = ethnicity4.getEthnicityType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor6 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter7 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role1, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor6);
        java.lang.String str8 = hOIReporter7.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role9 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter15 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role9, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor14);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role16 = hOIReporter15.getRole();
        boolean boolean17 = hOIReporter7.equals((java.lang.Object) hOIReporter15);
        boolean boolean18 = csecEntity0.equals((java.lang.Object) hOIReporter15);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor19 = hOIReporter15.getLegacyDescriptor();
        java.lang.String str20 = hOIReporter15.toJson();
        hOIReporter15.setId("00001");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role23 = hOIReporter15.getRole();
        java.lang.String str24 = hOIReporter15.toJson();
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03-15.52.55.282" + "'", str8.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role16 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role16.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(legacyDescriptor19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}" + "'", str20.equals("{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}"));
        org.junit.Assert.assertTrue("'" + role23 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role23.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "{\"id\":\"00001\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}" + "'", str24.equals("{\"id\":\"00001\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}"));
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        gov.ca.cwds.data.persistence.ns.Person person14 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity15 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity16 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person14, ethnicity15);
        java.util.Date date17 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person18 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity19 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity20 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person18, ethnicity19);
        java.util.Date date21 = personEthnicity20.getLastUpdatedTime();
        boolean boolean22 = personEthnicity16.equals((java.lang.Object) personEthnicity20);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity16.setEthnicity(ethnicity26);
        java.util.Date date28 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship29 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date7, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date28);
        java.lang.String str30 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date7);
        java.lang.String str31 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date7);
        gov.ca.cwds.data.persistence.ns.Person person36 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity37 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity38 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person36, ethnicity37);
        java.util.Date date39 = personEthnicity38.getLastUpdatedTime();
        java.util.Date date40 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        java.lang.String str41 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date39);
        java.lang.String str42 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date39);
        java.util.Date date43 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship44 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("HH:mm:ss", (java.lang.Short) (short) 0, date7, "15:52:54", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "Non-mandated Reporter", "", date43);
        java.lang.String str45 = clientRelationship44.getSecondaryClientId();
        java.lang.String str46 = clientRelationship44.toJson();
        java.lang.String str47 = clientRelationship44.getLastUpdatedId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "2019-09-03" + "'", str9.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date17);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date21);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str30 + "' != '" + "2019-09-03T15:53:33.822Z" + "'", str30.equals("2019-09-03T15:53:33.822Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str31 + "' != '" + "15:53:33" + "'", str31.equals("15:53:33"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date40);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str41 + "' != '" + "2019-09-03-15.53.33.822" + "'", str41.equals("2019-09-03-15.53.33.822"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "2019-09-03" + "'", str42.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date43);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "15:52:54" + "'", str45.equals("15:52:54"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str46 + "' != '" + "{\"absentParentCode\":\"HH:mm:ss\",\"clientRelationshipType\":0,\"endDate\":1567551213822,\"id\":\"Non-mandated Reporter\",\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":\"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId\",\"primaryKey\":\"Non-mandated Reporter\",\"sameHomeCode\":\"\",\"secondaryClientId\":\"15:52:54\",\"startDate\":1567551213822}" + "'", str46.equals("{\"absentParentCode\":\"HH:mm:ss\",\"clientRelationshipType\":0,\"endDate\":1567551213822,\"id\":\"Non-mandated Reporter\",\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":\"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId\",\"primaryKey\":\"Non-mandated Reporter\",\"sameHomeCode\":\"\",\"secondaryClientId\":\"15:52:54\",\"startDate\":1567551213822}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String str6 = participantEntity0.getEthnicity();
        java.lang.String str7 = participantEntity0.getLegacySourceTable();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity10 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean11 = participantEntity10.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray12 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList13 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList13, csecEntityArray12);
        participantEntity10.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList13);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity16 = participantEntity10.getScreening();
        java.lang.String str17 = participantEntity10.getScreeningId();
        java.lang.String str18 = participantEntity10.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity19 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person20 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity21 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity22 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person20, ethnicity21);
        java.util.Date date23 = personEthnicity22.getLastUpdatedTime();
        java.util.Date date24 = personEthnicity22.getCreateDateTime();
        java.lang.String str25 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date24);
        participantEntity19.setDateOfBirth(date24);
        participantEntity10.setDateOfDeath(date24);
        gov.ca.cwds.data.persistence.ns.Person person32 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity33 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity34 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person32, ethnicity33);
        java.util.Date date35 = personEthnicity34.getLastUpdatedTime();
        java.util.Date date36 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date35);
        java.lang.String str37 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date36);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship38 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (java.lang.Short) (short) -1, date24, "15:53:04", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "15:53:07", date36);
        participantEntity0.setDateOfDeath(date36);
        java.lang.String str40 = participantEntity0.toString();
        java.lang.String str41 = participantEntity0.getScreeningId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date23);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date24);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str25 + "' != '" + "2019-09-03T15:53:33.863Z" + "'", str25.equals("2019-09-03T15:53:33.863Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date35);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Sep 03 15:53:33 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str37 + "' != '" + "15:53:33" + "'", str37.equals("15:53:33"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str3 = participantEntity0.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity4 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role5 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor10 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter11 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role5, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor10);
        java.lang.String str12 = hOIReporter11.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role13 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor18 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter19 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role13, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor18);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role20 = hOIReporter19.getRole();
        boolean boolean21 = hOIReporter11.equals((java.lang.Object) hOIReporter19);
        boolean boolean22 = csecEntity4.equals((java.lang.Object) hOIReporter19);
        boolean boolean23 = participantEntity0.equals((java.lang.Object) csecEntity4);
        java.lang.String str24 = participantEntity0.getGender();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + role5 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role5.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "2019-09-03-15.52.55.282" + "'", str12.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role13 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role13.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role20 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role20.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds" + "'", str24.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds"));
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        java.lang.Object obj9 = stringArrayType0.assemble((java.io.Serializable) role1, (java.lang.Object) strArray8);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor17 = null;
        gov.ca.cwds.rest.api.domain.Address address18 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor17);
        java.lang.String str19 = address18.getCity();
        java.lang.Integer int20 = address18.getType();
        address18.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.Object obj23 = null;
        boolean boolean24 = stringArrayType0.equals((java.lang.Object) address18, obj23);
        java.lang.String str25 = address18.getCity();
        java.lang.String str26 = address18.getLegacySourceTable();
        address18.setLegacySourceTable("2019-09-03-15.52.59.761");
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str19.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str25.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getEndDate();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity4 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList5 = ethnicity4.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity4, "Anonymous Reporter", "N");
        java.lang.Long long9 = ethnicity8.getId();
        boolean boolean10 = clientRelationship0.equals((java.lang.Object) long9);
        java.util.Date date11 = clientRelationship0.getStartDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date11);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookDateString("2019-09-03T15:53:08.467-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(date1.toString(), "Tue Sep 03 00:00:00 PDT 2019");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        race6.setSubRaceType("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        boolean boolean39 = race6.equals((java.lang.Object) "N");
        java.lang.String str40 = race6.getSubRaceType();
        java.lang.String str41 = race6.getSubRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds" + "'", str40.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds" + "'", str41.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds"));
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getRaces();
        java.lang.String str2 = participantEntity0.getApproximateAge();
        participantEntity0.setProbationYouth((java.lang.Boolean) true);
        participantEntity0.setLegacyId("2019-09-03-15.53.18.945");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity7 = null;
        participantEntity0.setScreeningEntity(screeningEntity7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        java.lang.String str3 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor4 = hOIReporter0.getLegacyDescriptor();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = hOIReporter0.getLegacyDescriptor();
        hOIReporter0.setLastName("2019-09-03T15:53:15.986Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str3.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor5);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        participantEntity0.setDateOfBirth(date5);
        java.lang.String str8 = participantEntity0.toString();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity9 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean10 = participantEntity9.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray11 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList12 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList12, csecEntityArray11);
        participantEntity9.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList12);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity15 = participantEntity9.getScreening();
        java.lang.String str16 = participantEntity9.getScreeningId();
        java.lang.String str17 = participantEntity9.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity18 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        java.util.Date date23 = personEthnicity21.getCreateDateTime();
        java.lang.String str24 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date23);
        participantEntity18.setDateOfBirth(date23);
        participantEntity9.setDateOfDeath(date23);
        participantEntity9.setLegacyId("00001");
        java.lang.String[] strArray29 = participantEntity9.getRoles();
        participantEntity0.setLanguages(strArray29);
        java.lang.String str31 = participantEntity0.getNameSuffix();
        java.lang.String str32 = participantEntity0.getEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:34.144Z" + "'", str6.equals("2019-09-03T15:53:34.144Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date23);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str24 + "' != '" + "2019-09-03T15:53:34.144Z" + "'", str24.equals("2019-09-03T15:53:34.144Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor5);
        java.lang.String str7 = hOIReporter6.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        boolean boolean16 = hOIReporter6.equals((java.lang.Object) hOIReporter14);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role17 = hOIReporter6.getRole();
        org.joda.time.DateTime dateTime24 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor27 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor("2019-09-03T15:53:13.177Z", "2019-09-03T15:53:03.344Z", dateTime24, "2019-09-03T15:53:10.189Z", "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        java.lang.String str28 = legacyDescriptor27.getId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter29 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role17, "15:53:11", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s_z", "{\"id\":\"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\",\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "2019-09-03T15:53:13.317Z", legacyDescriptor27);
        java.lang.String str30 = legacyDescriptor27.getId();
        legacyDescriptor27.setTableName("2019-09-03T15:53:29.467Z");
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03-15.52.55.282" + "'", str7.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + role17 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role17.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "2019-09-03T15:53:13.177Z" + "'", str28.equals("2019-09-03T15:53:13.177Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "2019-09-03T15:53:13.177Z" + "'", str30.equals("2019-09-03T15:53:13.177Z"));
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getApproximateAgeUnits();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        participantEntity0.setScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
        participantEntity0.setSensitive((java.lang.Boolean) false);
        boolean boolean9 = participantEntity0.equals((java.lang.Object) "2019-09-03T15:53:25.974Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "2019-09-03T15:53:21.072Z", "2019-09-03_t15:53:04.984-0700", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s_z", legacyDescriptor5);
        java.lang.String str7 = hOIReporter6.toString();
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        java.lang.String str27 = person25.getLastName();
        java.util.Set<gov.ca.cwds.rest.api.domain.Race> raceSet28 = person25.getRace();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str27.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceSet28);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        java.lang.Boolean boolean9 = participantEntity0.getEstimatedDob();
        java.lang.String str10 = participantEntity0.getLastName();
        participantEntity0.setApproximateAge("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str10.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity9 = participantEntity0.getScreeningEntity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity9);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getParticipantId();
        java.lang.Integer int3 = csecEntity0.getId();
        java.io.Serializable serializable4 = csecEntity0.getPrimaryKey();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor12 = null;
        gov.ca.cwds.rest.api.domain.Address address13 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor12);
        java.lang.String str14 = address13.getCity();
        java.lang.String str15 = address13.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor16 = address13.getLegacyDescriptor();
        boolean boolean17 = csecEntity0.equals((java.lang.Object) legacyDescriptor16);
        java.time.LocalDate localDate18 = csecEntity0.getStartDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str14.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str15.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str3 = participantEntity0.getPrimaryKey();
        java.lang.String[] strArray4 = participantEntity0.getRoles();
        participantEntity0.setScreeningId("2019-09-03T15:53:21.042Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 100L, "Y", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "2019-09-03-15.53.19.827");
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter30 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray38 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet39 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet39, addressArray38);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray41 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet42 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, phoneNumberArray41);
        gov.ca.cwds.rest.api.domain.Language[] languageArray44 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet45 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet45, languageArray44);
        gov.ca.cwds.rest.api.domain.Race[] raceArray47 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet48 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet48, raceArray47);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity52 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray53 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity52 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet54 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54, ethnicityArray53);
        gov.ca.cwds.rest.api.domain.Person person56 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet39, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet45, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet48, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54);
        boolean boolean57 = hOIReporter30.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str58 = hOIReporter30.getLastName();
        java.lang.String str59 = hOIReporter30.getFirstName();
        hOIReporter30.setId("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType62 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship63 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship63.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role66 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean67 = stringJsonUserType62.equals((java.lang.Object) "", (java.lang.Object) role66);
        hOIReporter30.setRole(role66);
        hOIReporter0.setRole(role66);
        java.lang.String str70 = hOIReporter0.toJson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str29.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + role66 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role66.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":\"MANDATED_REPORTER\",\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str70.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":\"MANDATED_REPORTER\",\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        gov.ca.cwds.data.persistence.ns.Race race38 = new gov.ca.cwds.data.persistence.ns.Race(race6, "15:52:59", "2019-09-03T15:52:58.300-0700");
        java.lang.Long long39 = race38.getId();
        gov.ca.cwds.rest.api.domain.Race race40 = new gov.ca.cwds.rest.api.domain.Race(race38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long39);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId9 = personEthnicity6.getPrimaryKey();
        java.io.Serializable serializable10 = personEthnicityId9.getPrimaryKey();
        java.io.Serializable serializable11 = personEthnicityId9.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = personEthnicityId9.getEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ethnicity12);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId11 = personEthnicity2.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person12 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity16 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity17 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person12, ethnicity16);
        personEthnicityId11.setEthnicity(ethnicity16);
        boolean boolean20 = personEthnicityId11.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity21 = personEthnicityId11.getEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicity21);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        participantEntity0.setDateOfBirth(date5);
        java.lang.String str8 = participantEntity0.toString();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity9 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean10 = participantEntity9.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray11 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList12 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList12, csecEntityArray11);
        participantEntity9.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList12);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity15 = participantEntity9.getScreening();
        java.lang.String str16 = participantEntity9.getScreeningId();
        java.lang.String str17 = participantEntity9.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity18 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        java.util.Date date23 = personEthnicity21.getCreateDateTime();
        java.lang.String str24 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date23);
        participantEntity18.setDateOfBirth(date23);
        participantEntity9.setDateOfDeath(date23);
        participantEntity9.setLegacyId("00001");
        java.lang.String[] strArray29 = participantEntity9.getRoles();
        participantEntity0.setLanguages(strArray29);
        java.lang.String str31 = participantEntity0.getNameSuffix();
        java.lang.String str32 = participantEntity0.getLegacySourceTable();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:34.684Z" + "'", str6.equals("2019-09-03T15:53:34.684Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date23);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str24 + "' != '" + "2019-09-03T15:53:34.684Z" + "'", str24.equals("2019-09-03T15:53:34.684Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role28 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        hOIReporter0.setRole(role28);
        hOIReporter0.setFirstName("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str32 = hOIReporter0.toString();
        hOIReporter0.setId("15:53:10");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + role28 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role28.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        address8.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter13 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray21 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet22, addressArray21);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray24 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, phoneNumberArray24);
        gov.ca.cwds.rest.api.domain.Language[] languageArray27 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet28, languageArray27);
        gov.ca.cwds.rest.api.domain.Race[] raceArray30 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet31, raceArray30);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity35 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray36 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity35 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet37 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37, ethnicityArray36);
        gov.ca.cwds.rest.api.domain.Person person39 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37);
        boolean boolean40 = hOIReporter13.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter13.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor50 = null;
        gov.ca.cwds.rest.api.domain.Address address51 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor50);
        java.lang.String str52 = address51.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor53 = address51.getLegacyDescriptor();
        hOIReporter13.setLegacyDescriptor(legacyDescriptor53);
        org.joda.time.DateTime dateTime55 = null;
        legacyDescriptor53.setLastUpdated(dateTime55);
        address8.setLegacyDescriptor(legacyDescriptor53);
        java.lang.Integer int58 = address8.getState();
        address8.setLegacySourceTable("2019-09-03T15:53:21.072Z");
        java.lang.Integer int61 = address8.getState();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str52.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58.equals(100));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61.equals(100));
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        csecEntity0.setParticipantId("Y");
        java.time.LocalDate localDate3 = csecEntity0.getStartDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        java.lang.Boolean boolean11 = participantEntity0.getEstimatedDob();
        java.lang.String str12 = participantEntity0.getSsn();
        participantEntity0.setApproximateAge("2019-09-03-15.53.05.703");
        java.util.Date date15 = participantEntity0.getDateOfDeath();
        gov.ca.cwds.data.persistence.ns.Person person16 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity19 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList20 = ethnicity19.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity23 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity19, "Anonymous Reporter", "N");
        java.lang.String str24 = ethnicity23.getSubEthnicity();
        java.util.Date date25 = ethnicity23.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity26 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person16, ethnicity23);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity27 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity23);
        java.util.Date date28 = ethnicity23.getCreateDateTime();
        participantEntity0.setDateOfDeath(date28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str24.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date25);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:34 PDT 2019");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity40 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType42 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role43 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity44 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean45 = participantEntity44.getProbationYouth();
        participantEntity44.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity44.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray50 = participantEntity44.getLanguages();
        java.lang.Object obj51 = stringArrayType42.assemble((java.io.Serializable) role43, (java.lang.Object) strArray50);
        java.lang.Class<java.lang.String[]> strArrayClass52 = stringArrayType42.returnedClass();
        java.sql.ResultSet resultSet53 = null;
        java.lang.String[] strArray59 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor60 = null;
        java.lang.Object obj62 = stringArrayType42.nullSafeGet(resultSet53, strArray59, sharedSessionContractImplementor60, (java.lang.Object) 1);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity63 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean64 = participantEntity63.getProbationYouth();
        participantEntity63.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity63.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray69 = participantEntity63.getLanguages();
        java.lang.String[] strArray70 = participantEntity63.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity82 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("hi!", date5, date12, "2019-09-03-15.53.07.205", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.05.703", "yyyy-MM-dd-HH.mm.ss.SSS", screeningEntity40, "yyyy-MM-dd HH:mm:ss.SSS", strArray59, strArray70, "", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:08.733-0700", "", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", (java.lang.Boolean) false, (java.lang.Boolean) false, (java.lang.Boolean) true, "2019-09-03T15:53:08.733-0700", "15:53:08", (java.lang.Boolean) true);
        gov.ca.cwds.data.persistence.ns.Person person83 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity84 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity85 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person83, ethnicity84);
        java.util.Date date86 = personEthnicity85.getLastUpdatedTime();
        java.util.Date date87 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date86);
        java.lang.String str88 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date86);
        java.lang.String str89 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date86);
        java.util.Date date90 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date86);
        java.util.Date date91 = gov.ca.cwds.rest.api.domain.DomainChef.concatenateDateAndTime(date12, date90);
        gov.ca.cwds.data.persistence.ns.Person person92 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity93 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity94 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person92, ethnicity93);
        java.util.Date date95 = personEthnicity94.getLastUpdatedTime();
        java.util.Date date96 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date95);
        java.lang.String str97 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date95);
        java.lang.String str98 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date95);
        java.util.Date date99 = gov.ca.cwds.rest.api.domain.DomainChef.concatenateDateAndTime(date12, date95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:34.847Z" + "'", str6.equals("2019-09-03T15:53:34.847Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "2019-09-03" + "'", str35.equals("2019-09-03"));
        org.junit.Assert.assertTrue("'" + role43 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role43.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj51.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date86);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date86.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date87);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date87.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str88 + "' != '" + "2019-09-03-15.53.34.849" + "'", str88.equals("2019-09-03-15.53.34.849"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "2019-09-03" + "'", str89.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date90);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date90.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date91);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date91.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date95);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date95.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date96);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date96.toString(), "Tue Sep 03 15:53:34 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str97 + "' != '" + "2019-09-03-15.53.34.850" + "'", str97.equals("2019-09-03-15.53.34.850"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str98 + "' != '" + "2019-09-03" + "'", str98.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date99);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date99.toString(), "Tue Sep 03 15:53:34 PDT 2019");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getCsecCodeId();
        csecEntity0.setCsecCodeId("2019-09-03-15.52.59.761");
        java.time.LocalDate localDate5 = null;
        csecEntity0.setStartDate(localDate5);
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType7 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean8 = stringJsonUserType7.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race12 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race13 = new gov.ca.cwds.rest.api.domain.Race(race12);
        java.lang.String str14 = race13.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray22 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet23, addressArray22);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray25 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet26 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet26, phoneNumberArray25);
        gov.ca.cwds.rest.api.domain.Language[] languageArray28 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet29 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet29, languageArray28);
        gov.ca.cwds.rest.api.domain.Race[] raceArray31 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet32 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet32, raceArray31);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity36 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray37 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity36 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet38 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet38, ethnicityArray37);
        gov.ca.cwds.rest.api.domain.Person person40 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet23, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet26, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet29, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet32, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet38);
        java.lang.String str41 = person40.getSsn();
        boolean boolean42 = stringJsonUserType7.equals((java.lang.Object) race13, (java.lang.Object) str41);
        gov.ca.cwds.data.persistence.ns.Race race45 = new gov.ca.cwds.data.persistence.ns.Race(race13, "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "2019-09-03T15:53:03.344Z");
        boolean boolean46 = csecEntity0.equals((java.lang.Object) "2019-09-03T15:53:03.344Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str14.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str41.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.util.Date date0 = null;
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray47 = stringArrayType0.sqlTypes();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role48 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        java.io.Serializable serializable49 = stringArrayType0.disassemble((java.lang.Object) role48);
        java.lang.String str50 = role48.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + role48 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role48.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        org.junit.Assert.assertTrue("'" + serializable49 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", serializable49.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Mandated Reporter" + "'", str50.equals("Mandated Reporter"));
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        participantEntity0.setSealed((java.lang.Boolean) false);
        participantEntity0.setNameSuffix("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity15 = participantEntity0.getScreening();
        java.lang.Boolean boolean16 = participantEntity0.getSensitive();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity17 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean18 = participantEntity17.getProbationYouth();
        participantEntity17.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity17.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray23 = participantEntity17.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity24 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean25 = participantEntity24.getProbationYouth();
        participantEntity24.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date28 = null;
        participantEntity24.setDateOfBirth(date28);
        participantEntity24.setId("_n");
        boolean boolean32 = participantEntity17.equals((java.lang.Object) "_n");
        java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList33 = participantEntity17.getCsecs();
        participantEntity0.setCsecs(csecEntityList33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityList33);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        java.lang.String str1 = safelySurrenderedBabiesEntity0.getComments();
        gov.ca.cwds.data.persistence.ns.Person person6 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity7 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity8 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person6, ethnicity7);
        java.util.Date date9 = personEthnicity8.getLastUpdatedTime();
        java.util.Date date10 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date9);
        gov.ca.cwds.data.persistence.ns.Person person15 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity16 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity17 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person15, ethnicity16);
        java.util.Date date18 = personEthnicity17.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        boolean boolean23 = personEthnicity17.equals((java.lang.Object) personEthnicity21);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity27 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity17.setEthnicity(ethnicity27);
        java.util.Date date29 = personEthnicity17.getLastUpdatedTime();
        java.lang.String str30 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date29);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship31 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("2019-09-03T15:53:11.912-0700", (java.lang.Short) (short) 0, date9, "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "2019-09-03T15:53:23.564Z", "2019-09-03T15:53:11.111-0700", "2019-09-03T15:53:00.960Z", date29);
        java.util.Date date37 = gov.ca.cwds.rest.api.domain.DomainChef.uncookISO8601Timestamp("2019-09-03T15:53:16.789Z");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship38 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("", (java.lang.Short) (short) 1, date29, "2019-09-03T15:53:22.232Z", "2019-09-03T15:53:05.703Z", "2019-09-03-15.53.26.640", "2019-09-03T15:53:14.800Z", date37);
        safelySurrenderedBabiesEntity0.setMedQuestionaireReturnDate(date29);
        java.lang.String str40 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date9);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date18);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date29);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str30 + "' != '" + "2019-09-03-15.53.35.135" + "'", str30.equals("2019-09-03-15.53.35.135"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(date37.toString(), "Tue Sep 03 15:53:16 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str40 + "' != '" + "2019-09-03T15:53:35.135Z" + "'", str40.equals("2019-09-03T15:53:35.135Z"));
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str3 = participantEntity0.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity4 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role5 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor10 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter11 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role5, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor10);
        java.lang.String str12 = hOIReporter11.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role13 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor18 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter19 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role13, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor18);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role20 = hOIReporter19.getRole();
        boolean boolean21 = hOIReporter11.equals((java.lang.Object) hOIReporter19);
        boolean boolean22 = csecEntity4.equals((java.lang.Object) hOIReporter19);
        boolean boolean23 = participantEntity0.equals((java.lang.Object) csecEntity4);
        java.time.LocalDate localDate24 = null;
        csecEntity4.setStartDate(localDate24);
        csecEntity4.setParticipantId("2019-09-03T15:53:05.703Z");
        csecEntity4.setCsecCodeId("2019-09-03T15:53:05.703Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + role5 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role5.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "2019-09-03-15.52.55.282" + "'", str12.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role13 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role13.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role20 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role20.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str5 = ethnicity4.getEthnicityType();
        java.lang.Long long6 = ethnicity4.getId();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        boolean boolean15 = personEthnicity9.equals((java.lang.Object) personEthnicity13);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId16 = personEthnicity13.getPrimaryKey();
        java.io.Serializable serializable17 = personEthnicityId16.getPrimaryKey();
        boolean boolean18 = stringArrayType0.equals((java.lang.Object) long6, (java.lang.Object) personEthnicityId16);
        java.io.Serializable serializable19 = personEthnicityId16.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable19);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.getFirstName();
        java.lang.String str30 = hOIReporter0.toString();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role31 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor36 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter37 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role31, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor36);
        java.lang.String str38 = hOIReporter37.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role39 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor44 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter45 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role39, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor44);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role46 = hOIReporter45.getRole();
        boolean boolean47 = hOIReporter37.equals((java.lang.Object) hOIReporter45);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role48 = hOIReporter37.getRole();
        hOIReporter0.setRole(role48);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor54 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor54.setId("2019-09-03-15.52.55.282");
        java.lang.String str57 = legacyDescriptor54.getUiId();
        java.lang.String str58 = legacyDescriptor54.getUiId();
        java.lang.String str59 = legacyDescriptor54.getUiId();
        legacyDescriptor54.setUiId("yyyy-MM-dd-HH.mm.ss.SSS");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter62 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role48, "2019-09-03T15:53:23.704Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "15:53:29", "15:53:10", legacyDescriptor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + role31 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role31.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "2019-09-03-15.52.55.282" + "'", str38.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role39 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role39.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role46 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role46.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + role48 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role48.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet37 = person25.getPhoneNumber();
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType38 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet39 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity40 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean41 = participantEntity40.getProbationYouth();
        participantEntity40.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity40.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray46 = participantEntity40.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor47 = null;
        gov.ca.cwds.data.persistence.ns.Person person48 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity52 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity53 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person48, ethnicity52);
        java.lang.Object obj54 = stringArrayType38.nullSafeGet(resultSet39, strArray46, sharedSessionContractImplementor47, (java.lang.Object) personEthnicity53);
        gov.ca.cwds.rest.api.domain.Address[] addressArray62 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet63 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet63, addressArray62);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray65 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet66 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet66, phoneNumberArray65);
        gov.ca.cwds.rest.api.domain.Language[] languageArray68 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet69 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet69, languageArray68);
        gov.ca.cwds.rest.api.domain.Race[] raceArray71 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet72 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet72, raceArray71);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity76 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray77 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity76 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet78 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet78, ethnicityArray77);
        gov.ca.cwds.rest.api.domain.Person person80 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet63, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet66, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet69, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet72, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet78);
        java.lang.String str81 = person80.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet82 = person80.getPhoneNumber();
        java.lang.Object obj84 = stringArrayType38.assemble((java.io.Serializable) person80, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray85 = stringArrayType38.sqlTypes();
        boolean boolean86 = stringArrayType38.isMutable();
        boolean boolean87 = person25.equals((java.lang.Object) boolean86);
        java.util.Set<gov.ca.cwds.rest.api.domain.Address> addressSet88 = person25.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str81 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str81.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressSet88);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        java.lang.Long long4 = race3.getPrimaryKey();
        java.lang.Long long5 = race3.getPrimaryKey();
        java.util.Date date6 = race3.getLastUpdatedTime();
        java.lang.String str7 = race3.getRaceType();
        gov.ca.cwds.rest.api.domain.Race race8 = new gov.ca.cwds.rest.api.domain.Race(race3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        java.lang.Boolean boolean3 = participantEntity0.getProbationYouth();
        participantEntity0.setLegacySourceTable("2019-09-03T15:53:08.467-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        int[] intArray39 = stringJsonUserType0.sqlTypes();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity40 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean41 = participantEntity40.getProbationYouth();
        participantEntity40.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity40.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray46 = participantEntity40.getLanguages();
        participantEntity40.setFirstName("2019-09-03-15.52.55.282");
        java.lang.Boolean boolean49 = participantEntity40.getSensitive();
        java.lang.String str50 = participantEntity40.getApproximateAgeUnits();
        java.io.Serializable serializable51 = stringJsonUserType0.disassemble((java.lang.Object) str50);
        java.lang.Class class52 = stringJsonUserType0.returnedClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str50.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + serializable51 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", serializable51.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class52);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.camelCaseToLowerUnderscore("2019-09-03T15:53:32.162Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "2019-09-03_t15:53:32.162_z" + "'", str1.equals("2019-09-03_t15:53:32.162_z"));
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        java.lang.Object obj9 = stringArrayType0.assemble((java.io.Serializable) role1, (java.lang.Object) strArray8);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor17 = null;
        gov.ca.cwds.rest.api.domain.Address address18 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor17);
        java.lang.String str19 = address18.getCity();
        java.lang.Integer int20 = address18.getType();
        address18.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.Object obj23 = null;
        boolean boolean24 = stringArrayType0.equals((java.lang.Object) address18, obj23);
        java.lang.String str25 = address18.getCity();
        java.lang.String str26 = address18.getZip();
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str19.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str25.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "HH:mm:ss" + "'", str26.equals("HH:mm:ss"));
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.lang.String str12 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str13 = safelySurrenderedBabiesEntity0.getParentGuardGivenBraceletId();
        java.io.Serializable serializable14 = safelySurrenderedBabiesEntity0.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable14);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("2019-09-03T15:53:27.159-0700", "2019-09-03T15:52:59.197-0700");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        int[] intArray2 = stringJsonUserType0.sqlTypes();
        java.sql.ResultSet resultSet3 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity4 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean5 = participantEntity4.getProbationYouth();
        participantEntity4.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity4.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray10 = participantEntity4.getLanguages();
        java.lang.String[] strArray11 = participantEntity4.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor12 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity13 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean14 = participantEntity13.getProbationYouth();
        participantEntity13.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity13.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray19 = participantEntity13.getLanguages();
        java.lang.String[] strArray20 = participantEntity13.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person24 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity26 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person24, ethnicity25);
        java.util.Date date27 = personEthnicity26.getLastUpdatedTime();
        java.lang.String str28 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date27);
        gov.ca.cwds.data.persistence.ns.Person person34 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity35 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity36 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person34, ethnicity35);
        java.util.Date date37 = personEthnicity36.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person38 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity39 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity40 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person38, ethnicity39);
        java.util.Date date41 = personEthnicity40.getLastUpdatedTime();
        boolean boolean42 = personEthnicity36.equals((java.lang.Object) personEthnicity40);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity46 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity36.setEthnicity(ethnicity46);
        java.util.Date date48 = personEthnicity36.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship49 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date27, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date48);
        java.lang.String str50 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date48);
        gov.ca.cwds.data.persistence.ns.Person person51 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity52 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity53 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person51, ethnicity52);
        java.util.Date date54 = personEthnicity53.getLastUpdatedTime();
        java.util.Date date55 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date54);
        java.lang.String str56 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date55);
        java.lang.String str57 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date55);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity62 = null;
        java.lang.String[] strArray67 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity68 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean69 = participantEntity68.getProbationYouth();
        participantEntity68.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity68.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray74 = participantEntity68.getLanguages();
        java.lang.String[] strArray75 = participantEntity68.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity87 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date48, date55, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity62, "2019-09-03-15.52.58.871", strArray67, strArray75, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        participantEntity13.setDateOfBirth(date48);
        java.lang.String str89 = participantEntity13.getMiddleName();
        java.lang.String str90 = participantEntity13.getLastName();
        java.lang.Boolean boolean91 = participantEntity13.getSealed();
        java.lang.String str92 = participantEntity13.getLastName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj93 = stringJsonUserType0.nullSafeGet(resultSet3, strArray11, sharedSessionContractImplementor12, (java.lang.Object) str92);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "2019-09-03" + "'", str28.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "2019-09-03" + "'", str29.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date41);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date48);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str50 + "' != '" + "2019-09-03T15:53:35.763-0700" + "'", str50.equals("2019-09-03T15:53:35.763-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date54);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date55);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str56 + "' != '" + "15:53:35" + "'", str56.equals("15:53:35"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str57 + "' != '" + "2019-09-03T15:53:35.763-0700" + "'", str57.equals("2019-09-03T15:53:35.763-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str90 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str90.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str92 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str92.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor0.setId("2019-09-03-15.52.55.282");
        java.lang.String str3 = legacyDescriptor0.getUiId();
        legacyDescriptor0.setTableName("2019-09-03T15:53:34.399Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        java.lang.String str4 = race3.getRaceType();
        gov.ca.cwds.rest.api.domain.Race race5 = new gov.ca.cwds.rest.api.domain.Race(race3);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity6 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str7 = participantEntity6.getScreeningId();
        java.lang.Boolean boolean8 = participantEntity6.getProbationYouth();
        participantEntity6.setApproximateAge("2019-09-03-15.53.10.189");
        boolean boolean11 = race5.equals((java.lang.Object) "2019-09-03-15.53.10.189");
        java.lang.String str12 = race5.getSubRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str4.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str12.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor7.setId("2019-09-03-15.52.55.282");
        java.lang.String str10 = legacyDescriptor7.getUiId();
        java.lang.String str11 = legacyDescriptor7.getUiId();
        java.lang.String str12 = legacyDescriptor7.getUiId();
        org.joda.time.DateTime dateTime13 = legacyDescriptor7.getLastUpdated();
        gov.ca.cwds.rest.api.domain.Address address14 = new gov.ca.cwds.rest.api.domain.Address("15:53:08", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "2019-09-03T15:53:19.034Z", "2019-09-03T15:53:14.005-0700", (java.lang.Integer) 10, "2019-09-03", (java.lang.Integer) 100, legacyDescriptor7);
        java.lang.String str15 = address14.getStreetAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(dateTime13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03T15:53:19.034Z" + "'", str15.equals("2019-09-03T15:53:19.034Z"));
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity3 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList4 = ethnicity3.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity7 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity3, "Anonymous Reporter", "N");
        java.lang.String str8 = ethnicity7.getSubEthnicity();
        java.util.Date date9 = ethnicity7.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity10 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity7);
        java.lang.String str11 = ethnicity7.getSubEthnicity();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity12 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity7);
        java.lang.String str13 = ethnicity12.getSubEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str8.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date9);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str11.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str13.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        java.lang.Boolean boolean11 = participantEntity0.getEstimatedDob();
        java.lang.String str12 = participantEntity0.getSsn();
        participantEntity0.setApproximateAge("2019-09-03-15.53.05.703");
        java.util.Date date15 = participantEntity0.getDateOfDeath();
        gov.ca.cwds.data.persistence.ns.Person person20 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity21 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity22 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person20, ethnicity21);
        java.util.Date date23 = personEthnicity22.getLastUpdatedTime();
        java.lang.String str24 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date23);
        java.lang.String str25 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date23);
        gov.ca.cwds.data.persistence.ns.Person person30 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity32 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person30, ethnicity31);
        java.util.Date date33 = personEthnicity32.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person34 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity35 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity36 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person34, ethnicity35);
        java.util.Date date37 = personEthnicity36.getLastUpdatedTime();
        boolean boolean38 = personEthnicity32.equals((java.lang.Object) personEthnicity36);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity42 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity32.setEthnicity(ethnicity42);
        java.util.Date date44 = personEthnicity32.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship45 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date23, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date44);
        java.lang.String str46 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date23);
        java.lang.String str47 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date23);
        gov.ca.cwds.data.persistence.ns.Person person52 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity53 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity54 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person52, ethnicity53);
        java.util.Date date55 = personEthnicity54.getLastUpdatedTime();
        java.util.Date date56 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date55);
        java.lang.String str57 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date55);
        java.lang.String str58 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date55);
        java.util.Date date59 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date55);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship60 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("HH:mm:ss", (java.lang.Short) (short) 0, date23, "15:52:54", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "Non-mandated Reporter", "", date59);
        participantEntity0.setDateOfBirth(date23);
        java.lang.String str62 = participantEntity0.getGender();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date23);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "2019-09-03" + "'", str24.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "2019-09-03" + "'", str25.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date44);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str46 + "' != '" + "2019-09-03T15:53:35.927Z" + "'", str46.equals("2019-09-03T15:53:35.927Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str47 + "' != '" + "15:53:35" + "'", str47.equals("15:53:35"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date55);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date56);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str57 + "' != '" + "2019-09-03-15.53.35.927" + "'", str57.equals("2019-09-03-15.53.35.927"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "2019-09-03" + "'", str58.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date59);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date59.toString(), "Tue Sep 03 15:53:35 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber("15:52:54", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId");
        boolean boolean5 = phoneNumber3.equals((java.lang.Object) (-1L));
        java.lang.String str6 = phoneNumber3.getExtension();
        java.lang.String str7 = phoneNumber3.getNumber();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId" + "'", str6.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "15:52:54" + "'", str7.equals("15:52:54"));
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role30 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor35 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter36 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role30, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor35);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role37 = hOIReporter36.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor42 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor42.setId("2019-09-03-15.52.55.282");
        java.lang.String str45 = legacyDescriptor42.getUiId();
        java.lang.String str46 = legacyDescriptor42.getUiId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter47 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role37, "HH:mm:ss", "Y", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.02.984", legacyDescriptor42);
        hOIReporter0.setLegacyDescriptor(legacyDescriptor42);
        hOIReporter0.setFirstName("HH:mm:ss");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + role30 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role30.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role37 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role37.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str4 = ethnicity3.getEthnicityType();
        java.lang.Long long5 = ethnicity3.getId();
        java.util.Date date6 = ethnicity3.getLastUpdatedTime();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity7 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity3);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity7, "Y", "2019-09-03T15:53:18.945-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter0.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor37 = null;
        gov.ca.cwds.rest.api.domain.Address address38 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor37);
        java.lang.String str39 = address38.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor40 = address38.getLegacyDescriptor();
        hOIReporter0.setLegacyDescriptor(legacyDescriptor40);
        org.joda.time.DateTime dateTime42 = null;
        legacyDescriptor40.setLastUpdated(dateTime42);
        java.lang.String str44 = legacyDescriptor40.getTableDescription();
        java.lang.String str45 = legacyDescriptor40.getTableDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str39.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship3 = null;
        boolean boolean4 = clientRelationship0.relatedTo(clientRelationship3);
        java.util.Date date5 = clientRelationship0.getStartDate();
        java.lang.String str6 = clientRelationship0.getPrimaryClientId();
        java.util.Date date7 = clientRelationship0.getEndDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date7);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookStrictTimestampString("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity0 = new gov.ca.cwds.data.persistence.ns.Ethnicity();
        java.lang.String str1 = ethnicity0.getLastUpdatedId();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        java.util.Date date11 = participantEntity0.getDateOfBirth();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date11);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        int[] intArray39 = stringJsonUserType0.sqlTypes();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity40 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean41 = participantEntity40.getProbationYouth();
        participantEntity40.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity40.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray46 = participantEntity40.getLanguages();
        participantEntity40.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        java.lang.String str49 = participantEntity40.getLegacySourceTable();
        participantEntity40.setEstimatedDob((java.lang.Boolean) false);
        java.lang.String str52 = participantEntity40.getGender();
        java.lang.String[] strArray53 = participantEntity40.getRoles();
        java.lang.Object obj54 = stringJsonUserType0.deepCopy((java.lang.Object) strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj54);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 1L, "2019-09-03", "Y", "15:53:04");
        java.lang.Long long5 = phoneNumber4.getId();
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage6 = null;
        phoneNumber4.addMessage(errorMessage6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5.equals(1L));
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        java.lang.Boolean boolean3 = participantEntity0.getProbationYouth();
        participantEntity0.setProbationYouth((java.lang.Boolean) true);
        java.lang.Boolean boolean6 = participantEntity0.getProbationYouth();
        java.lang.String str7 = participantEntity0.getSsn();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6.equals(true));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity9 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity11 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity12 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity11);
        java.util.Date date13 = personEthnicity12.getLastUpdatedTime();
        java.util.Date date14 = personEthnicity12.getCreateDateTime();
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date14);
        participantEntity9.setDateOfBirth(date14);
        participantEntity0.setDateOfDeath(date14);
        java.lang.String str18 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03T15:53:36.251Z" + "'", str15.equals("2019-09-03T15:53:36.251Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "2019-09-03" + "'", str18.equals("2019-09-03"));
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getNameSuffix();
        java.lang.String str29 = person25.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "" + "'", str28.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId" + "'", str29.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId"));
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        gov.ca.cwds.data.persistence.ns.Person person14 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity15 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity16 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person14, ethnicity15);
        java.util.Date date17 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person18 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity19 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity20 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person18, ethnicity19);
        java.util.Date date21 = personEthnicity20.getLastUpdatedTime();
        boolean boolean22 = personEthnicity16.equals((java.lang.Object) personEthnicity20);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity16.setEthnicity(ethnicity26);
        java.util.Date date28 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship29 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date7, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date28);
        java.lang.String str30 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship35 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date36 = clientRelationship35.getLastUpdatedTime();
        java.lang.String str37 = clientRelationship35.getSecondaryClientId();
        gov.ca.cwds.data.persistence.ns.Person person38 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity39 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity40 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person38, ethnicity39);
        java.util.Date date41 = personEthnicity40.getLastUpdatedTime();
        java.lang.String str42 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date41);
        java.lang.String str43 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date41);
        clientRelationship35.setLastUpdatedTime(date41);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship45 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("2019-09-03-15.53.08.733", (java.lang.Short) (short) 0, date7, "2019-09-03-15.53.10.189", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "2019-09-03T15:53:11.111-0700", "2019-09-03T15:53:19.827Z", date41);
        java.util.Date date47 = gov.ca.cwds.rest.api.domain.DomainChef.uncookISO8601Timestamp("2019-09-03T15:53:05.518Z");
        clientRelationship45.setLastUpdatedTime(date47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "2019-09-03" + "'", str9.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date17);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date21);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "2019-09-03" + "'", str30.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date41);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "2019-09-03" + "'", str42.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "2019-09-03" + "'", str43.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(date47.toString(), "Tue Sep 03 15:53:05 PDT 2019");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getId();
        participantEntity0.setProbationYouth((java.lang.Boolean) false);
        participantEntity0.setGender("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity13 = null;
        participantEntity0.setScreeningEntity(screeningEntity13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity2.setEthnicity(ethnicity12);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity14 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity12);
        java.lang.Long long15 = ethnicity12.getPrimaryKey();
        java.util.Date date16 = ethnicity12.getLastUpdatedTime();
        java.lang.Long long17 = ethnicity12.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17.equals(1L));
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        int[] intArray2 = stringJsonUserType0.sqlTypes();
        boolean boolean3 = stringJsonUserType0.isMutable();
        int[] intArray4 = stringJsonUserType0.sqlTypes();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray4);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity36 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean37 = participantEntity36.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray38 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList39 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList39, csecEntityArray38);
        participantEntity36.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList39);
        participantEntity36.setGender("yyyy-MM-dd HH:mm:ss.SSS");
        participantEntity36.setLegacySourceTable("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        participantEntity36.setNameSuffix("2019-09-03-15.53.15.533");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship48 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship48.setLastUpdatedId("");
        java.lang.String str51 = clientRelationship48.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship52 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date53 = clientRelationship52.getLastUpdatedTime();
        boolean boolean54 = clientRelationship48.equals((java.lang.Object) date53);
        java.util.Date date55 = clientRelationship48.getLastUpdatedTime();
        java.lang.Object obj56 = stringJsonUserType0.assemble((java.io.Serializable) "2019-09-03-15.53.15.533", (java.lang.Object) clientRelationship48);
        java.lang.String str57 = clientRelationship48.getLastUpdatedId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj56 + "' != '" + "2019-09-03-15.53.15.533" + "'", obj56.equals("2019-09-03-15.53.15.533"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "" + "'", str57.equals(""));
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) (-1L), "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS");
        gov.ca.cwds.rest.api.domain.Race race4 = new gov.ca.cwds.rest.api.domain.Race(race3);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        participantEntity0.setDateOfBirth(date33);
        java.lang.Class<?> wildcardClass36 = participantEntity0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity7 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean8 = participantEntity7.getProbationYouth();
        participantEntity7.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date11 = null;
        participantEntity7.setDateOfBirth(date11);
        participantEntity7.setId("_n");
        boolean boolean15 = participantEntity0.equals((java.lang.Object) "_n");
        java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList16 = participantEntity0.getCsecs();
        java.lang.String str17 = participantEntity0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        java.lang.String str3 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date5 = clientRelationship4.getLastUpdatedTime();
        boolean boolean6 = clientRelationship0.equals((java.lang.Object) date5);
        java.util.Date date7 = clientRelationship0.getLastUpdatedTime();
        java.lang.Short short8 = clientRelationship0.getClientRelationshipType();
        java.lang.String str9 = clientRelationship0.getSecondaryClientId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(short8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        gov.ca.cwds.rest.api.domain.cms.ClientRelationship clientRelationship1 = null;
        java.util.Date date4 = gov.ca.cwds.rest.api.domain.DomainChef.uncookDateString("2019-09-03T15:53:32.470-0700");
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("2019-09-03T15:53:35.135Z", clientRelationship1, "2019-09-03-15.52.59.761", date4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 00:00:00 PDT 2019");
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race4 = new gov.ca.cwds.rest.api.domain.Race(race3);
        java.lang.String str5 = race4.getSubRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str5.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber("2019-09-03T15:53:18.945Z", "2019-09-03T15:53:17.143Z", "2019-09-03-15.53.19.417");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getRelatedScreeningId();
        java.lang.String str8 = participantEntity0.getNameSuffix();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        java.lang.String str1 = safelySurrenderedBabiesEntity0.getComments();
        safelySurrenderedBabiesEntity0.setBraceletId("2019-09-03-15.53.08.988");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity4 = safelySurrenderedBabiesEntity0.getParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        java.lang.String str11 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date10);
        java.lang.String str12 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date10);
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person21 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity22 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity23 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person21, ethnicity22);
        java.util.Date date24 = personEthnicity23.getLastUpdatedTime();
        boolean boolean25 = personEthnicity19.equals((java.lang.Object) personEthnicity23);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity29 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity19.setEthnicity(ethnicity29);
        java.util.Date date31 = personEthnicity19.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship32 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date10, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date31);
        java.lang.String str33 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date10);
        java.util.Date date34 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date10);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date10);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date10);
        safelySurrenderedBabiesEntity0.setMedQuestionaireReturnDate(date10);
        safelySurrenderedBabiesEntity0.setBraceletId("2019-09-03T15:53:18.233Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(participantEntity4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "2019-09-03" + "'", str11.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "2019-09-03" + "'", str12.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date24);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date31);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str33 + "' != '" + "2019-09-03T15:53:36.831Z" + "'", str33.equals("2019-09-03T15:53:36.831Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str35 + "' != '" + "15:53:36" + "'", str35.equals("15:53:36"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "2019-09-03T15:53:36.831-0700" + "'", str36.equals("2019-09-03T15:53:36.831-0700"));
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor7);
        java.lang.String str9 = address8.getStreetAddress();
        java.lang.Integer int10 = address8.getType();
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        java.util.Date date15 = personEthnicity13.getCreateDateTime();
        gov.ca.cwds.data.persistence.ns.Person person16 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity17 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity18 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person16, ethnicity17);
        java.util.Date date19 = personEthnicity18.getLastUpdatedTime();
        java.util.Date date20 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date19);
        java.lang.String str21 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date19);
        java.lang.String str22 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date19);
        java.util.Date date23 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date19);
        boolean boolean24 = personEthnicity13.equals((java.lang.Object) date19);
        gov.ca.cwds.data.persistence.ns.Person person25 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity27 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person25, ethnicity26);
        java.util.Date date28 = personEthnicity27.getLastUpdatedTime();
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date28);
        java.util.Date date30 = gov.ca.cwds.rest.api.domain.DomainChef.concatenateDateAndTime(date19, date28);
        boolean boolean31 = address8.equals((java.lang.Object) date30);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor32 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor32.setId("2019-09-03-15.52.55.282");
        java.lang.String str35 = legacyDescriptor32.getUiId();
        java.lang.String str36 = legacyDescriptor32.getUiId();
        org.joda.time.DateTime dateTime37 = null;
        legacyDescriptor32.setLastUpdated(dateTime37);
        legacyDescriptor32.setTableName("2019-09-03T15:53:05.518Z");
        address8.setLegacyDescriptor(legacyDescriptor32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str9.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10.equals(10));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date15);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date19);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str21 + "' != '" + "2019-09-03-15.53.36.870" + "'", str21.equals("2019-09-03-15.53.36.870"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "2019-09-03" + "'", str22.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date23);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "2019-09-03" + "'", str29.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:36 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getApproximateAgeUnits();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        participantEntity0.setSealed((java.lang.Boolean) true);
        participantEntity0.setFirstName("2019-09-03T15:53:21.636Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "");
        java.lang.String str7 = ethnicity2.getEthnicityType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str7.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        java.lang.Long long4 = race3.getPrimaryKey();
        java.lang.Long long5 = race3.getPrimaryKey();
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race3);
        java.util.Date date7 = race3.getCreateDateTime();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date7);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getParticipantId();
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        boolean boolean11 = personEthnicity5.equals((java.lang.Object) personEthnicity9);
        boolean boolean13 = personEthnicity5.equals((java.lang.Object) (-1.0f));
        boolean boolean14 = csecEntity0.equals((java.lang.Object) boolean13);
        java.time.LocalDate localDate15 = csecEntity0.getStartDate();
        java.lang.String str16 = csecEntity0.getParticipantId();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity17 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean18 = participantEntity17.getProbationYouth();
        participantEntity17.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity17.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray23 = participantEntity17.getLanguages();
        java.lang.String[] strArray24 = participantEntity17.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person28 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity29 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity30 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person28, ethnicity29);
        java.util.Date date31 = personEthnicity30.getLastUpdatedTime();
        java.lang.String str32 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date31);
        java.lang.String str33 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date31);
        gov.ca.cwds.data.persistence.ns.Person person38 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity39 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity40 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person38, ethnicity39);
        java.util.Date date41 = personEthnicity40.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person42 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity43 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity44 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person42, ethnicity43);
        java.util.Date date45 = personEthnicity44.getLastUpdatedTime();
        boolean boolean46 = personEthnicity40.equals((java.lang.Object) personEthnicity44);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity50 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity40.setEthnicity(ethnicity50);
        java.util.Date date52 = personEthnicity40.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship53 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date31, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date52);
        java.lang.String str54 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date52);
        gov.ca.cwds.data.persistence.ns.Person person55 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity56 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity57 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person55, ethnicity56);
        java.util.Date date58 = personEthnicity57.getLastUpdatedTime();
        java.util.Date date59 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date58);
        java.lang.String str60 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date59);
        java.lang.String str61 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date59);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity66 = null;
        java.lang.String[] strArray71 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity72 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean73 = participantEntity72.getProbationYouth();
        participantEntity72.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity72.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray78 = participantEntity72.getLanguages();
        java.lang.String[] strArray79 = participantEntity72.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity91 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date52, date59, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity66, "2019-09-03-15.52.58.871", strArray71, strArray79, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        participantEntity17.setDateOfBirth(date52);
        java.lang.String str93 = participantEntity17.getMiddleName();
        boolean boolean94 = csecEntity0.equals((java.lang.Object) participantEntity17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date31);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "2019-09-03" + "'", str32.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "2019-09-03" + "'", str33.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date41);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date45);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date52);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str54 + "' != '" + "2019-09-03T15:53:37.021-0700" + "'", str54.equals("2019-09-03T15:53:37.021-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date58);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date59);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date59.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str60 + "' != '" + "15:53:37" + "'", str60.equals("15:53:37"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str61 + "' != '" + "2019-09-03T15:53:37.021-0700" + "'", str61.equals("2019-09-03T15:53:37.021-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.getFirstName();
        hOIReporter0.setId("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        hOIReporter0.setLastName("2019-09-03T15:53:27.051-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.fromString("2019-09-03-15.53.32.794");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        participantEntity0.setDateOfBirth(date5);
        java.lang.String str8 = participantEntity0.getNameSuffix();
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity9 = participantEntity0.getScreening();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:37.209Z" + "'", str6.equals("2019-09-03T15:53:37.209Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity9);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        gov.ca.cwds.data.persistence.ns.Race race38 = new gov.ca.cwds.data.persistence.ns.Race(race6, "15:52:59", "2019-09-03T15:52:58.300-0700");
        gov.ca.cwds.data.persistence.ns.Race race41 = new gov.ca.cwds.data.persistence.ns.Race(race6, "2019-09-03-15.53.08.733", "yyyy-MM-dd HH:mm:ss.SSS");
        java.lang.Long long42 = race41.getId();
        java.lang.Long long43 = race41.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long43);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getCsecCodeId();
        csecEntity0.setCsecCodeId("2019-09-03-15.52.59.761");
        java.time.LocalDate localDate5 = null;
        csecEntity0.setStartDate(localDate5);
        csecEntity0.setParticipantId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        java.time.LocalDate localDate9 = csecEntity0.getStartDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd-HH.mm.ss.SSS");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray14 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet15, addressArray14);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray17 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet18, phoneNumberArray17);
        gov.ca.cwds.rest.api.domain.Language[] languageArray20 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet21 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet21, languageArray20);
        gov.ca.cwds.rest.api.domain.Race[] raceArray23 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet24, raceArray23);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity28 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray29 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity28 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet30 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet30, ethnicityArray29);
        gov.ca.cwds.rest.api.domain.Person person32 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet21, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet24, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet30);
        boolean boolean33 = hOIReporter6.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str34 = hOIReporter6.getLastName();
        java.lang.String str35 = hOIReporter6.toJson();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter36 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray44 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet45 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet45, addressArray44);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray47 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet48 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet48, phoneNumberArray47);
        gov.ca.cwds.rest.api.domain.Language[] languageArray50 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet51 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet51, languageArray50);
        gov.ca.cwds.rest.api.domain.Race[] raceArray53 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet54 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet54, raceArray53);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity58 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray59 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity58 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet60 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet60, ethnicityArray59);
        gov.ca.cwds.rest.api.domain.Person person62 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet45, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet48, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet51, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet54, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet60);
        boolean boolean63 = hOIReporter36.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str64 = hOIReporter36.getLastName();
        java.lang.String str65 = hOIReporter36.getFirstName();
        hOIReporter36.setId("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType68 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship69 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship69.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role72 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean73 = stringJsonUserType68.equals((java.lang.Object) "", (java.lang.Object) role72);
        hOIReporter36.setRole(role72);
        hOIReporter6.setRole(role72);
        boolean boolean76 = ethnicity2.equals((java.lang.Object) role72);
        java.lang.String str77 = role72.getDescription();
        java.lang.String str78 = role72.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str35.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + role72 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role72.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Mandated Reporter" + "'", str77.equals("Mandated Reporter"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Mandated Reporter" + "'", str78.equals("Mandated Reporter"));
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList8 = participantEntity0.getCsecs();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityList8);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.camelCaseToLowerUnderscore("2019-09-03-15.53.05.294");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "2019-09-03-15.53.05.294" + "'", str1.equals("2019-09-03-15.53.05.294"));
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor7);
        java.lang.String str9 = address8.getStreetAddress();
        address8.setLegacyId("{\"absentParentCode\":\"HH:mm:ss\",\"clientRelationshipType\":0,\"endDate\":1567551215570,\"id\":\"Non-mandated Reporter\",\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":\"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId\",\"primaryKey\":\"Non-mandated Reporter\",\"sameHomeCode\":\"\",\"secondaryClientId\":\"15:52:54\",\"startDate\":1567551215570}");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str9.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity12 = null;
        participantEntity0.setSafelySurrenderedBabies(safelySurrenderedBabiesEntity12);
        java.lang.Boolean boolean14 = participantEntity0.getSensitive();
        participantEntity0.setGender("2019-09-03-15.53.28.754");
        java.lang.String str17 = participantEntity0.getLegacySourceTable();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role28 = hOIReporter0.getRole();
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber32 = new gov.ca.cwds.rest.api.domain.PhoneNumber("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "2019-09-03T15:52:58.300-0700", "yyyy-_m_m-dd _h_h:mm:ss._s_s_s");
        java.lang.Long long33 = phoneNumber32.getId();
        boolean boolean34 = hOIReporter0.equals((java.lang.Object) long33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity2.setEthnicity(ethnicity12);
        java.util.Date date14 = personEthnicity2.getLastUpdatedTime();
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date14);
        java.lang.Class<?> wildcardClass16 = date14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03-15.53.37.532" + "'", str15.equals("2019-09-03-15.53.37.532"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity9 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity11 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity12 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity11);
        java.util.Date date13 = personEthnicity12.getLastUpdatedTime();
        java.util.Date date14 = personEthnicity12.getCreateDateTime();
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date14);
        participantEntity9.setDateOfBirth(date14);
        participantEntity0.setDateOfDeath(date14);
        participantEntity0.setLegacyId("00001");
        java.lang.String[] strArray20 = participantEntity0.getRoles();
        java.lang.String str21 = participantEntity0.getLegacySourceTable();
        java.lang.Boolean boolean22 = participantEntity0.getEstimatedDob();
        java.lang.String str23 = participantEntity0.getRaces();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03T15:53:37.561Z" + "'", str15.equals("2019-09-03T15:53:37.561Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = null;
        gov.ca.cwds.rest.api.domain.Address address15 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor14);
        java.lang.String str16 = address15.getCity();
        java.lang.Integer int17 = address15.getType();
        java.lang.String str18 = address15.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter19 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        boolean boolean20 = address15.equals((java.lang.Object) hOIReporter19);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor21 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor21.setId("2019-09-03-15.52.55.282");
        hOIReporter19.setLegacyDescriptor(legacyDescriptor21);
        gov.ca.cwds.rest.api.domain.Address address25 = new gov.ca.cwds.rest.api.domain.Address("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s_z", "2019-09-03T15:53:10.356Z", "2019-09-03T15:53:10.585-0700", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) (-1), "2019-09-03T15:53:14.005-0700", (java.lang.Integer) 100, legacyDescriptor21);
        org.joda.time.DateTime dateTime26 = null;
        legacyDescriptor21.setLastUpdated(dateTime26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str16.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str18.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        participantEntity0.setRaces("2019-09-03-15.53.10.189");
        java.lang.String str5 = participantEntity0.toString();
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        int[] intArray39 = stringJsonUserType0.sqlTypes();
        boolean boolean40 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity41 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean42 = participantEntity41.getProbationYouth();
        participantEntity41.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity41.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String str47 = participantEntity41.getEthnicity();
        java.lang.String str48 = participantEntity41.getLegacySourceTable();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity51 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean52 = participantEntity51.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray53 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList54 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList54, csecEntityArray53);
        participantEntity51.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList54);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity57 = participantEntity51.getScreening();
        java.lang.String str58 = participantEntity51.getScreeningId();
        java.lang.String str59 = participantEntity51.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity60 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person61 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity62 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity63 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person61, ethnicity62);
        java.util.Date date64 = personEthnicity63.getLastUpdatedTime();
        java.util.Date date65 = personEthnicity63.getCreateDateTime();
        java.lang.String str66 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date65);
        participantEntity60.setDateOfBirth(date65);
        participantEntity51.setDateOfDeath(date65);
        gov.ca.cwds.data.persistence.ns.Person person73 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity74 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity75 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person73, ethnicity74);
        java.util.Date date76 = personEthnicity75.getLastUpdatedTime();
        java.util.Date date77 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date76);
        java.lang.String str78 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date77);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship79 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (java.lang.Short) (short) -1, date65, "15:53:04", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "15:53:07", date77);
        participantEntity41.setDateOfDeath(date77);
        java.lang.Object obj82 = stringJsonUserType0.assemble((java.io.Serializable) participantEntity41, (java.lang.Object) "15:53:16");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date64);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date65);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date65.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str66 + "' != '" + "2019-09-03T15:53:37.753Z" + "'", str66.equals("2019-09-03T15:53:37.753Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date76);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date76.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date77);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date77.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str78 + "' != '" + "15:53:37" + "'", str78.equals("15:53:37"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj82);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        java.util.Date date4 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date3);
        java.lang.String str5 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date3);
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date3);
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date3);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date3);
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str5 + "' != '" + "2019-09-03-15.53.37.811" + "'", str5.equals("2019-09-03-15.53.37.811"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03" + "'", str6.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03T15:53:37.811Z" + "'", str7.equals("2019-09-03T15:53:37.811Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03T15:53:37.811-0700" + "'", str8.equals("2019-09-03T15:53:37.811-0700"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str9 + "' != '" + "2019-09-03T15:53:37.811-0700" + "'", str9.equals("2019-09-03T15:53:37.811-0700"));
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        address8.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter13 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray21 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet22, addressArray21);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray24 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, phoneNumberArray24);
        gov.ca.cwds.rest.api.domain.Language[] languageArray27 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet28, languageArray27);
        gov.ca.cwds.rest.api.domain.Race[] raceArray30 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet31, raceArray30);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity35 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray36 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity35 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet37 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37, ethnicityArray36);
        gov.ca.cwds.rest.api.domain.Person person39 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37);
        boolean boolean40 = hOIReporter13.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter13.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor50 = null;
        gov.ca.cwds.rest.api.domain.Address address51 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor50);
        java.lang.String str52 = address51.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor53 = address51.getLegacyDescriptor();
        hOIReporter13.setLegacyDescriptor(legacyDescriptor53);
        org.joda.time.DateTime dateTime55 = null;
        legacyDescriptor53.setLastUpdated(dateTime55);
        address8.setLegacyDescriptor(legacyDescriptor53);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor58 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor58.setId("2019-09-03-15.52.55.282");
        java.lang.String str61 = legacyDescriptor58.getUiId();
        address8.setLegacyDescriptor(legacyDescriptor58);
        java.lang.String str63 = address8.getStreetAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str52.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str63.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date4);
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date5);
        java.util.Date date7 = null;
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity12 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity14 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean15 = participantEntity14.getProbationYouth();
        participantEntity14.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date18 = null;
        participantEntity14.setDateOfBirth(date18);
        participantEntity14.setId("_n");
        participantEntity14.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity14.setId("_n");
        participantEntity14.setRelatedScreeningId("15:52:59");
        participantEntity14.setLegacyId("2019-09-03-15.53.05.294");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType30 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role31 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity32 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean33 = participantEntity32.getProbationYouth();
        participantEntity32.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity32.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray38 = participantEntity32.getLanguages();
        java.lang.Object obj39 = stringArrayType30.assemble((java.io.Serializable) role31, (java.lang.Object) strArray38);
        participantEntity14.setLanguages(strArray38);
        java.lang.String[] strArray41 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity53 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("2019-09-03-15.53.08.704", date5, date7, "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "2019-09-03T15:53:05.518-0700", "2019-09-03T15:53:08.732Z", "", screeningEntity12, "2019-09-03-15.53.19.417", strArray38, strArray41, "2019-09-03T15:53:08.732-0700", "15:53:18", "2019-09-03T15:53:17.177-0700", "_n", "2019-09-03-15.53.08.285", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) false, "2019-09-03T15:53:22.420Z", "Non-mandated Reporter", (java.lang.Boolean) false);
        java.lang.String str54 = participantEntity53.toString();
        java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList55 = participantEntity53.getCsecs();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "15:53:37" + "'", str6.equals("15:53:37"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertTrue("'" + role31 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role31.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj39.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityList55);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        java.lang.String str11 = personEthnicity2.getCreateUserId();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = personEthnicity2.getEthnicity();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = personEthnicity2.getEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:37 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ethnicity12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ethnicity13);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity4 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean5 = participantEntity4.getProbationYouth();
        participantEntity4.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date8 = null;
        participantEntity4.setDateOfBirth(date8);
        participantEntity4.setId("_n");
        participantEntity4.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity4.setId("_n");
        java.lang.String str16 = participantEntity4.getScreeningId();
        boolean boolean17 = ethnicity2.equals((java.lang.Object) participantEntity4);
        java.lang.String str18 = participantEntity4.toString();
        java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList19 = participantEntity4.getCsecs();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityList19);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setFirstName("2019-09-03-15.52.55.282");
        java.lang.Boolean boolean9 = participantEntity0.getSensitive();
        participantEntity0.setProbationYouth((java.lang.Boolean) true);
        java.lang.String str12 = participantEntity0.getRaces();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.lang.String str12 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str13 = safelySurrenderedBabiesEntity0.getParentGuardGivenBraceletId();
        java.lang.String str14 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str15 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str16 = safelySurrenderedBabiesEntity0.getParentGuardProvMedQuestion();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber2 = new gov.ca.cwds.rest.api.domain.PhoneNumber("hi!", "2019-09-03T15:53:05.703Z");
        java.lang.Long long3 = phoneNumber2.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long3);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        address8.setLegacyId("");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage12 = null;
        address8.addMessage(errorMessage12);
        java.lang.String str14 = address8.getLegacyId();
        address8.setLegacyId("2019-09-03T15:52:58.300-0700");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor24 = null;
        gov.ca.cwds.rest.api.domain.Address address25 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor24);
        java.lang.String str26 = address25.getCity();
        java.lang.Integer int27 = address25.getType();
        address25.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter30 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray38 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet39 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet39, addressArray38);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray41 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet42 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, phoneNumberArray41);
        gov.ca.cwds.rest.api.domain.Language[] languageArray44 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet45 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet45, languageArray44);
        gov.ca.cwds.rest.api.domain.Race[] raceArray47 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet48 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet48, raceArray47);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity52 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray53 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity52 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet54 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54, ethnicityArray53);
        gov.ca.cwds.rest.api.domain.Person person56 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet39, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet45, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet48, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54);
        boolean boolean57 = hOIReporter30.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter30.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor67 = null;
        gov.ca.cwds.rest.api.domain.Address address68 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor67);
        java.lang.String str69 = address68.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor70 = address68.getLegacyDescriptor();
        hOIReporter30.setLegacyDescriptor(legacyDescriptor70);
        org.joda.time.DateTime dateTime72 = null;
        legacyDescriptor70.setLastUpdated(dateTime72);
        address25.setLegacyDescriptor(legacyDescriptor70);
        java.lang.Integer int75 = address25.getState();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter76 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role77 = hOIReporter76.getRole();
        java.lang.String str78 = hOIReporter76.getId();
        java.lang.String str79 = hOIReporter76.toJson();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor80 = hOIReporter76.getLegacyDescriptor();
        address25.setLegacyDescriptor(legacyDescriptor80);
        org.joda.time.DateTime dateTime82 = null;
        legacyDescriptor80.setLastUpdated(dateTime82);
        legacyDescriptor80.setTableDescription("2019-09-03T15:53:23.704Z");
        boolean boolean86 = address8.equals((java.lang.Object) "2019-09-03T15:53:23.704Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str26.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str69.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75.equals(100));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str79 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str79.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        java.lang.Object obj3 = stringJsonUserType0.deepCopy((java.lang.Object) "N");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter4 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role5 = hOIReporter4.getRole();
        java.lang.String str6 = hOIReporter4.getId();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = hOIReporter4.getLegacyDescriptor();
        java.lang.String str8 = hOIReporter4.getNameSuffix();
        hOIReporter4.setId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        java.lang.String str11 = hOIReporter4.toJson();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity12 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str13 = participantEntity12.getScreeningId();
        java.lang.Boolean boolean14 = participantEntity12.getProbationYouth();
        participantEntity12.setEstimatedDob((java.lang.Boolean) true);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getLastName();
        java.lang.String str44 = person42.getNameSuffix();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity48 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet49 = ethnicity48.getPersonEthnicity();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity50 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity48);
        boolean boolean51 = person42.equals((java.lang.Object) ethnicity50);
        java.lang.Object obj52 = stringJsonUserType0.replace((java.lang.Object) hOIReporter4, (java.lang.Object) participantEntity12, (java.lang.Object) ethnicity50);
        participantEntity12.setNameSuffix("2019-09-03T15:53:17.143Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj3 + "' != '" + "N" + "'", obj3.equals("N"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "{\"id\":\"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\",\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str11.equals("{\"id\":\"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\",\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str43.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj52);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 10L, "2019-09-03T15:53:22.421Z", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.joda.time.DateTime dateTime2 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor("2019-09-03T15:53:17.143Z", "2019-09-03-15.53.15.533", dateTime2, "2019-09-03T15:53:08.467-0700", "2019-09-03-15.53.34.850");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.toString();
        java.util.Date date3 = clientRelationship0.getEndDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date3);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        java.lang.String str9 = participantEntity0.getLegacySourceTable();
        java.lang.String str10 = participantEntity0.getEthnicity();
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType11 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role12 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity13 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean14 = participantEntity13.getProbationYouth();
        participantEntity13.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity13.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray19 = participantEntity13.getLanguages();
        java.lang.Object obj20 = stringArrayType11.assemble((java.io.Serializable) role12, (java.lang.Object) strArray19);
        java.lang.Class<java.lang.String[]> strArrayClass21 = stringArrayType11.returnedClass();
        java.sql.ResultSet resultSet22 = null;
        java.lang.String[] strArray28 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor29 = null;
        java.lang.Object obj31 = stringArrayType11.nullSafeGet(resultSet22, strArray28, sharedSessionContractImplementor29, (java.lang.Object) 1);
        participantEntity0.setRoles(strArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + role12 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role12.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj20.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        java.lang.String str3 = clientRelationship0.getSecondaryClientId();
        java.lang.Short short4 = clientRelationship0.getClientRelationshipType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(short4);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        java.lang.String str1 = legacyDescriptor0.getUiId();
        java.lang.String str2 = legacyDescriptor0.getTableName();
        legacyDescriptor0.setTableName("2019-09-03T15:53:34.952-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.String str1 = csecEntity0.getParticipantId();
        java.lang.Integer int2 = csecEntity0.getId();
        java.lang.String str3 = csecEntity0.getParticipantId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        phoneNumber4.setId((java.lang.Long) 0L);
        java.lang.Long long7 = phoneNumber4.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7.equals(0L));
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getApproximateAgeUnits();
        gov.ca.cwds.rest.api.domain.Address[] addressArray9 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet10 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet10, addressArray9);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray12 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet13 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet13, phoneNumberArray12);
        gov.ca.cwds.rest.api.domain.Language[] languageArray15 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet16, languageArray15);
        gov.ca.cwds.rest.api.domain.Race[] raceArray18 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet19, raceArray18);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity23 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray24 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity23 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet25, ethnicityArray24);
        gov.ca.cwds.rest.api.domain.Person person27 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet10, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet13, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet25);
        java.lang.String str28 = person27.getLastName();
        java.lang.String str29 = person27.getNameSuffix();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList30 = person27.getMessages();
        boolean boolean31 = participantEntity0.equals((java.lang.Object) person27);
        participantEntity0.setNameSuffix("2019-09-03T15:53:29.467Z");
        java.lang.Boolean boolean34 = participantEntity0.getEstimatedDob();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str28.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean34);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        address8.setLegacyId("");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage12 = null;
        address8.addMessage(errorMessage12);
        java.lang.String str14 = address8.getZip();
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage15 = null;
        address8.addMessage(errorMessage15);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor17 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        address8.setLegacyDescriptor(legacyDescriptor17);
        java.lang.String str19 = address8.getZip();
        java.lang.String str20 = address8.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "HH:mm:ss" + "'", str14.equals("HH:mm:ss"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "HH:mm:ss" + "'", str19.equals("HH:mm:ss"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str20.equals("yyyy-MM-dd HH:mm:ss.SSS"));
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        gov.ca.cwds.data.persistence.ns.Race race38 = new gov.ca.cwds.data.persistence.ns.Race(race6, "15:52:59", "2019-09-03T15:52:58.300-0700");
        gov.ca.cwds.rest.api.domain.Address[] addressArray46 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet47 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet47, addressArray46);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray49 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet50 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet50, phoneNumberArray49);
        gov.ca.cwds.rest.api.domain.Language[] languageArray52 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet53 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet53, languageArray52);
        gov.ca.cwds.rest.api.domain.Race[] raceArray55 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet56 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet56, raceArray55);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity60 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray61 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity60 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet62 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet62, ethnicityArray61);
        gov.ca.cwds.rest.api.domain.Person person64 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet47, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet50, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet53, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet56, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet62);
        java.lang.String str65 = person64.getMiddleName();
        java.lang.String str66 = person64.getMiddleName();
        boolean boolean67 = race6.equals((java.lang.Object) str66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str65.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str66.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor0.setId("2019-09-03-15.52.55.282");
        legacyDescriptor0.setTableName("yyyy-MM-dd HH:mm:ss.SSS");
        java.lang.String str5 = legacyDescriptor0.getUiId();
        legacyDescriptor0.setTableName("2019-09-03-15.53.08.704");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race4 = new gov.ca.cwds.rest.api.domain.Race(race3);
        boolean boolean6 = race4.equals((java.lang.Object) 100L);
        race4.setSubRaceType("15:52:59");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role28 = hOIReporter0.getRole();
        java.lang.String str29 = hOIReporter0.getNameSuffix();
        java.lang.String str30 = hOIReporter0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("2019-09-03-15.53.32.794", "2019-09-03-15.53.05.467");
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getCsecCodeId();
        csecEntity0.setCsecCodeId("2019-09-03-15.52.59.761");
        java.time.LocalDate localDate5 = null;
        csecEntity0.setStartDate(localDate5);
        csecEntity0.setParticipantId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        java.lang.String str9 = csecEntity0.getParticipantId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'" + "'", str9.equals("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'"));
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimeString("2019-09-03_t15:53:04.984-0700");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03_t15:53:04.984-0700\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        gov.ca.cwds.data.persistence.ns.Person person6 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity7 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity8 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person6, ethnicity7);
        java.util.Date date9 = personEthnicity8.getLastUpdatedTime();
        java.lang.String str10 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date9);
        java.lang.String str11 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date9);
        gov.ca.cwds.data.persistence.ns.Person person16 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity17 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity18 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person16, ethnicity17);
        java.util.Date date19 = personEthnicity18.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person20 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity21 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity22 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person20, ethnicity21);
        java.util.Date date23 = personEthnicity22.getLastUpdatedTime();
        boolean boolean24 = personEthnicity18.equals((java.lang.Object) personEthnicity22);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity18.setEthnicity(ethnicity28);
        java.util.Date date30 = personEthnicity18.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship31 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date9, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date30);
        java.lang.String str32 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date9);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship37 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date38 = clientRelationship37.getLastUpdatedTime();
        java.lang.String str39 = clientRelationship37.getSecondaryClientId();
        gov.ca.cwds.data.persistence.ns.Person person40 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity41 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity42 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person40, ethnicity41);
        java.util.Date date43 = personEthnicity42.getLastUpdatedTime();
        java.lang.String str44 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date43);
        java.lang.String str45 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date43);
        clientRelationship37.setLastUpdatedTime(date43);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship47 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("2019-09-03-15.53.08.733", (java.lang.Short) (short) 0, date9, "2019-09-03-15.53.10.189", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "2019-09-03T15:53:11.111-0700", "2019-09-03T15:53:19.827Z", date43);
        gov.ca.cwds.data.persistence.ns.Person person52 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity53 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity54 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person52, ethnicity53);
        java.util.Date date55 = personEthnicity54.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person56 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity57 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity58 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person56, ethnicity57);
        java.util.Date date59 = personEthnicity58.getLastUpdatedTime();
        boolean boolean60 = personEthnicity54.equals((java.lang.Object) personEthnicity58);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity64 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity54.setEthnicity(ethnicity64);
        java.util.Date date66 = personEthnicity54.getLastUpdatedTime();
        java.lang.String str67 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date66);
        java.lang.String str68 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date66);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship69 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("2019-09-03T15:53:30.137Z", (java.lang.Short) (short) -1, date9, "2019-09-03T15:53:26.809Z", "2019-09-03T15:53:01.223Z", "", "2019-09-03T15:53:34.144Z", date66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date9);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "2019-09-03" + "'", str10.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "2019-09-03" + "'", str11.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date19);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date23);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "2019-09-03" + "'", str32.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date43);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "2019-09-03" + "'", str44.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "2019-09-03" + "'", str45.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date55);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date59);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date59.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date66);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date66.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str67 + "' != '" + "2019-09-03-15.53.38.754" + "'", str67.equals("2019-09-03-15.53.38.754"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "2019-09-03" + "'", str68.equals("2019-09-03"));
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor10 = address8.getLegacyDescriptor();
        java.lang.String str11 = address8.getZip();
        java.lang.String str12 = address8.getZip();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity15 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList16 = ethnicity15.getMessages();
        address8.setMessages(errorMessageList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "HH:mm:ss" + "'", str11.equals("HH:mm:ss"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "HH:mm:ss" + "'", str12.equals("HH:mm:ss"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList16);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        address8.setLegacyId("");
        java.lang.String str12 = address8.getLegacyId();
        java.lang.Integer int13 = address8.getState();
        gov.ca.cwds.data.persistence.ns.Person person15 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity16 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity17 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person15, ethnicity16);
        java.util.Date date18 = personEthnicity17.getLastUpdatedTime();
        java.util.Date date19 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date18);
        java.lang.String str20 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date19);
        java.util.Date date21 = null;
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity26 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity28 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean29 = participantEntity28.getProbationYouth();
        participantEntity28.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date32 = null;
        participantEntity28.setDateOfBirth(date32);
        participantEntity28.setId("_n");
        participantEntity28.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity28.setId("_n");
        participantEntity28.setRelatedScreeningId("15:52:59");
        participantEntity28.setLegacyId("2019-09-03-15.53.05.294");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType44 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role45 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity46 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean47 = participantEntity46.getProbationYouth();
        participantEntity46.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity46.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray52 = participantEntity46.getLanguages();
        java.lang.Object obj53 = stringArrayType44.assemble((java.io.Serializable) role45, (java.lang.Object) strArray52);
        participantEntity28.setLanguages(strArray52);
        java.lang.String[] strArray55 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity67 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("2019-09-03-15.53.08.704", date19, date21, "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "2019-09-03T15:53:05.518-0700", "2019-09-03T15:53:08.732Z", "", screeningEntity26, "2019-09-03-15.53.19.417", strArray52, strArray55, "2019-09-03T15:53:08.732-0700", "15:53:18", "2019-09-03T15:53:17.177-0700", "_n", "2019-09-03-15.53.08.285", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) false, "2019-09-03T15:53:22.420Z", "Non-mandated Reporter", (java.lang.Boolean) false);
        boolean boolean68 = address8.equals((java.lang.Object) "15:53:18");
        address8.setLegacySourceTable("15:53:38");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13.equals(100));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date18);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date19);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str20 + "' != '" + "15:53:38" + "'", str20.equals("15:53:38"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertTrue("'" + role45 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role45.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + obj53 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj53.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        java.lang.String[] strArray7 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date14);
        java.lang.String str16 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date14);
        gov.ca.cwds.data.persistence.ns.Person person21 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity22 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity23 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person21, ethnicity22);
        java.util.Date date24 = personEthnicity23.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person25 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity27 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person25, ethnicity26);
        java.util.Date date28 = personEthnicity27.getLastUpdatedTime();
        boolean boolean29 = personEthnicity23.equals((java.lang.Object) personEthnicity27);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity33 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity23.setEthnicity(ethnicity33);
        java.util.Date date35 = personEthnicity23.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship36 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date14, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date35);
        java.lang.String str37 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date35);
        gov.ca.cwds.data.persistence.ns.Person person38 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity39 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity40 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person38, ethnicity39);
        java.util.Date date41 = personEthnicity40.getLastUpdatedTime();
        java.util.Date date42 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date41);
        java.lang.String str43 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date42);
        java.lang.String str44 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date42);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity49 = null;
        java.lang.String[] strArray54 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity55 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean56 = participantEntity55.getProbationYouth();
        participantEntity55.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity55.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray61 = participantEntity55.getLanguages();
        java.lang.String[] strArray62 = participantEntity55.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity74 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date35, date42, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity49, "2019-09-03-15.52.58.871", strArray54, strArray62, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        participantEntity0.setDateOfBirth(date35);
        java.lang.String str76 = participantEntity0.getMiddleName();
        java.lang.String str77 = participantEntity0.getGender();
        participantEntity0.setId("2019-09-03T15:53:17.793Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03" + "'", str15.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "2019-09-03" + "'", str16.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date24);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date35);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str37 + "' != '" + "2019-09-03T15:53:38.881-0700" + "'", str37.equals("2019-09-03T15:53:38.881-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date41);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date42);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Sep 03 15:53:38 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str43 + "' != '" + "15:53:38" + "'", str43.equals("15:53:38"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str44 + "' != '" + "2019-09-03T15:53:38.882-0700" + "'", str44.equals("2019-09-03T15:53:38.882-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getParticipantId();
        java.lang.Integer int3 = csecEntity0.getId();
        csecEntity0.setCsecCodeId("2019-09-03-15.53.05.467");
        java.time.LocalDate localDate6 = null;
        csecEntity0.setEndDate(localDate6);
        java.lang.String str8 = csecEntity0.getCsecCodeId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03-15.53.05.467" + "'", str8.equals("2019-09-03-15.53.05.467"));
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookDateString("2019-09-03T15:53:16.206-0700");
        java.lang.String str2 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(date1.toString(), "Tue Sep 03 00:00:00 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "2019-09-03T00:00:00.000Z" + "'", str2.equals("2019-09-03T00:00:00.000Z"));
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race4 = new gov.ca.cwds.rest.api.domain.Race(race3);
        java.lang.Long long5 = race3.getPrimaryKey();
        java.util.Date date6 = race3.getLastUpdatedTime();
        java.lang.String str7 = race3.getLastUpdatedId();
        java.lang.String str8 = race3.getSubRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str8.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.lang.String str1 = clientRelationship0.getSameHomeCode();
        java.lang.String str2 = clientRelationship0.getAbsentParentCode();
        java.util.Date date3 = clientRelationship0.getEndDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "" + "'", str1.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date3);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getParticipantId();
        java.lang.Integer int3 = csecEntity0.getId();
        java.time.LocalDate localDate4 = null;
        csecEntity0.setStartDate(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        participantEntity0.setGender("yyyy-MM-dd HH:mm:ss.SSS");
        java.lang.String str8 = participantEntity0.getSsn();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor5);
        java.lang.String str7 = hOIReporter6.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        boolean boolean16 = hOIReporter6.equals((java.lang.Object) hOIReporter14);
        java.lang.String str17 = hOIReporter6.getLastName();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor18 = hOIReporter6.getLegacyDescriptor();
        java.lang.String str19 = hOIReporter6.getLastName();
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03-15.52.55.282" + "'", str7.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str17.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(legacyDescriptor18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str19.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray47 = stringArrayType0.sqlTypes();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role48 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        java.io.Serializable serializable49 = stringArrayType0.disassemble((java.lang.Object) role48);
        java.sql.PreparedStatement preparedStatement50 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity51 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean52 = participantEntity51.getProbationYouth();
        participantEntity51.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringArrayType0.nullSafeSet(preparedStatement50, (java.lang.Object) participantEntity51, (int) (byte) 100, sharedSessionContractImplementor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + role48 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role48.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        org.junit.Assert.assertTrue("'" + serializable49 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", serializable49.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean52);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor3 = hOIReporter0.getLegacyDescriptor();
        java.lang.String str4 = hOIReporter0.getNameSuffix();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        hOIReporter0.setLegacyDescriptor(legacyDescriptor5);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role7 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor12 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter13 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role7, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor12);
        java.lang.String str14 = hOIReporter13.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor20 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter21 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role15, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor20);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role22 = hOIReporter21.getRole();
        boolean boolean23 = hOIReporter13.equals((java.lang.Object) hOIReporter21);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role24 = hOIReporter13.getRole();
        org.joda.time.DateTime dateTime31 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor34 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor("2019-09-03T15:53:13.177Z", "2019-09-03T15:53:03.344Z", dateTime31, "2019-09-03T15:53:10.189Z", "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        java.lang.String str35 = legacyDescriptor34.getId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter36 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role24, "15:53:11", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s_z", "{\"id\":\"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\",\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "2019-09-03T15:53:13.317Z", legacyDescriptor34);
        hOIReporter0.setRole(role24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + role7 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role7.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03-15.52.55.282" + "'", str14.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role22 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role22.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + role24 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role24.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "2019-09-03T15:53:13.177Z" + "'", str35.equals("2019-09-03T15:53:13.177Z"));
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address15 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor14);
        gov.ca.cwds.rest.api.domain.Address address16 = new gov.ca.cwds.rest.api.domain.Address("N", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "2019-09-03T15:52:58.300-0700", (java.lang.Integer) (-1), "00001", (java.lang.Integer) 100, legacyDescriptor14);
        legacyDescriptor14.setTableDescription("2019-09-03T15:53:13.008-0700");
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        address8.setLegacyId("");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage12 = null;
        address8.addMessage(errorMessage12);
        java.lang.String str14 = address8.getZip();
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage15 = null;
        address8.addMessage(errorMessage15);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor17 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        address8.setLegacyDescriptor(legacyDescriptor17);
        legacyDescriptor17.setUiId("2019-09-03_t15:53:32.162_z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "HH:mm:ss" + "'", str14.equals("HH:mm:ss"));
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 10L, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.Long long4 = race3.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4.equals(10L));
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        int[] intArray2 = stringJsonUserType0.sqlTypes();
        java.lang.Object obj4 = stringJsonUserType0.deepCopy((java.lang.Object) "2019-09-03-15.53.08.216");
        int[] intArray5 = stringJsonUserType0.sqlTypes();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity9 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str10 = ethnicity9.getEthnicityType();
        java.lang.Long long11 = ethnicity9.getId();
        java.lang.Object obj12 = stringJsonUserType0.deepCopy((java.lang.Object) ethnicity9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "2019-09-03-15.53.08.216" + "'", obj4.equals("2019-09-03-15.53.08.216"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        java.lang.String str3 = participantEntity0.getScreeningId();
        java.lang.Boolean boolean4 = participantEntity0.getSensitive();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean4);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.Boolean boolean2 = participantEntity0.getProbationYouth();
        participantEntity0.setSensitive((java.lang.Boolean) true);
        participantEntity0.setSensitive((java.lang.Boolean) false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean2);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str5 = ethnicity4.getEthnicityType();
        java.lang.Long long6 = ethnicity4.getId();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        boolean boolean15 = personEthnicity9.equals((java.lang.Object) personEthnicity13);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId16 = personEthnicity13.getPrimaryKey();
        java.io.Serializable serializable17 = personEthnicityId16.getPrimaryKey();
        boolean boolean18 = stringArrayType0.equals((java.lang.Object) long6, (java.lang.Object) personEthnicityId16);
        java.io.Serializable serializable19 = null;
        gov.ca.cwds.rest.api.domain.Address[] addressArray27 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet28, addressArray27);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray30 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet31, phoneNumberArray30);
        gov.ca.cwds.rest.api.domain.Language[] languageArray33 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet34, languageArray33);
        gov.ca.cwds.rest.api.domain.Race[] raceArray36 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet37 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet37, raceArray36);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity41 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray42 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity41 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet43 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet43, ethnicityArray42);
        gov.ca.cwds.rest.api.domain.Person person45 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet37, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet43);
        java.lang.String str46 = person45.getMiddleName();
        java.lang.String str47 = person45.getNameSuffix();
        java.lang.String str48 = person45.getGender();
        java.lang.String str49 = person45.getMiddleName();
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber54 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId", "2019-09-03-15.52.55.282", "_n");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList55 = phoneNumber54.getMessages();
        person45.setMessages(errorMessageList55);
        java.lang.Object obj57 = null;
        boolean boolean58 = person45.equals(obj57);
        java.lang.Object obj59 = stringArrayType0.assemble(serializable19, obj57);
        java.sql.PreparedStatement preparedStatement60 = null;
        gov.ca.cwds.data.persistence.ns.Race race64 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race65 = new gov.ca.cwds.rest.api.domain.Race(race64);
        java.lang.Long long66 = race64.getPrimaryKey();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor68 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringArrayType0.nullSafeSet(preparedStatement60, (java.lang.Object) long66, 1, sharedSessionContractImplementor68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str46.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "" + "'", str47.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "hi!" + "'", str48.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str49.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66.equals(0L));
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet37 = person25.getPhoneNumber();
        gov.ca.cwds.rest.api.domain.Address[] addressArray45 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet46 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet46, addressArray45);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray48 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet49 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet49, phoneNumberArray48);
        gov.ca.cwds.rest.api.domain.Language[] languageArray51 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet52 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet52, languageArray51);
        gov.ca.cwds.rest.api.domain.Race[] raceArray54 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet55 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet55, raceArray54);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity59 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray60 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity59 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet61 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet61, ethnicityArray60);
        gov.ca.cwds.rest.api.domain.Person person63 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet46, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet49, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet52, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet55, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet61);
        java.lang.String str64 = person63.getMiddleName();
        java.lang.String str65 = person63.getLastName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet66 = person63.getPhoneNumber();
        java.util.Set<gov.ca.cwds.rest.api.domain.Race> raceSet67 = person63.getRace();
        boolean boolean68 = person25.equals((java.lang.Object) person63);
        java.lang.String str69 = person25.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str64.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str65.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceSet67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str69.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str5 = ethnicity4.getEthnicityType();
        java.lang.Long long6 = ethnicity4.getId();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        boolean boolean15 = personEthnicity9.equals((java.lang.Object) personEthnicity13);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId16 = personEthnicity13.getPrimaryKey();
        java.io.Serializable serializable17 = personEthnicityId16.getPrimaryKey();
        boolean boolean18 = stringArrayType0.equals((java.lang.Object) long6, (java.lang.Object) personEthnicityId16);
        gov.ca.cwds.data.persistence.ns.Race race22 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType23 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity27 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str28 = ethnicity27.getEthnicityType();
        java.lang.Long long29 = ethnicity27.getId();
        gov.ca.cwds.data.persistence.ns.Person person30 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity32 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person30, ethnicity31);
        java.util.Date date33 = personEthnicity32.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person34 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity35 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity36 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person34, ethnicity35);
        java.util.Date date37 = personEthnicity36.getLastUpdatedTime();
        boolean boolean38 = personEthnicity32.equals((java.lang.Object) personEthnicity36);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId39 = personEthnicity36.getPrimaryKey();
        java.io.Serializable serializable40 = personEthnicityId39.getPrimaryKey();
        boolean boolean41 = stringArrayType23.equals((java.lang.Object) long29, (java.lang.Object) personEthnicityId39);
        boolean boolean42 = stringArrayType0.equals((java.lang.Object) "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", (java.lang.Object) stringArrayType23);
        boolean boolean43 = stringArrayType0.isMutable();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role44 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        java.lang.String str45 = role44.toString();
        java.lang.String str46 = role44.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj47 = stringArrayType0.deepCopy((java.lang.Object) str46);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to [Ljava.lang.String;");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + role44 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role44.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Anonymous Reporter" + "'", str45.equals("Anonymous Reporter"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Anonymous Reporter" + "'", str46.equals("Anonymous Reporter"));
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getMiddleName();
        person25.doSomething();
        java.lang.String str31 = person25.getNameSuffix();
        gov.ca.cwds.rest.api.domain.Address[] addressArray39 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet40, addressArray39);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray42 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet43 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet43, phoneNumberArray42);
        gov.ca.cwds.rest.api.domain.Language[] languageArray45 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet46 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet46, languageArray45);
        gov.ca.cwds.rest.api.domain.Race[] raceArray48 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet49 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet49, raceArray48);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity53 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray54 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity53 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet55 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet55, ethnicityArray54);
        gov.ca.cwds.rest.api.domain.Person person57 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet40, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet43, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet46, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet49, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet55);
        java.lang.String str58 = person57.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet59 = person57.getPhoneNumber();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList60 = person57.getMessages();
        person25.setMessages(errorMessageList60);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship62 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date63 = clientRelationship62.getLastUpdatedTime();
        java.lang.String str64 = clientRelationship62.getSecondaryClientId();
        java.lang.String str65 = clientRelationship62.getLastUpdatedId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship66 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship66.setLastUpdatedId("");
        clientRelationship66.setLastUpdatedId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        boolean boolean71 = clientRelationship62.relatedTo(clientRelationship66);
        java.lang.Short short72 = clientRelationship66.getClientRelationshipType();
        boolean boolean73 = person25.equals((java.lang.Object) clientRelationship66);
        java.lang.Short short74 = clientRelationship66.getClientRelationshipType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str29.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "" + "'", str31.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str58.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(short72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(short74);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray4 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList5 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList5, csecEntityArray4);
        participantEntity2.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList5);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity8 = participantEntity2.getScreening();
        java.lang.String str9 = participantEntity2.getScreeningId();
        java.lang.String str10 = participantEntity2.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity11 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person12 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity14 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person12, ethnicity13);
        java.util.Date date15 = personEthnicity14.getLastUpdatedTime();
        java.util.Date date16 = personEthnicity14.getCreateDateTime();
        java.lang.String str17 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date16);
        participantEntity11.setDateOfBirth(date16);
        participantEntity2.setDateOfDeath(date16);
        gov.ca.cwds.data.persistence.ns.Person person24 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity26 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person24, ethnicity25);
        java.util.Date date27 = personEthnicity26.getLastUpdatedTime();
        java.util.Date date28 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date28);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship30 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (java.lang.Short) (short) -1, date16, "15:53:04", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "15:53:07", date28);
        java.lang.String str31 = clientRelationship30.getLastUpdatedId();
        java.lang.String str32 = clientRelationship30.getAbsentParentCode();
        java.lang.Short short33 = clientRelationship30.getClientRelationshipType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date15);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str17 + "' != '" + "2019-09-03T15:53:39.600Z" + "'", str17.equals("2019-09-03T15:53:39.600Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str29 + "' != '" + "15:53:39" + "'", str29.equals("15:53:39"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str32.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) -1 + "'", short33.equals((short) -1));
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role30 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor35 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter36 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role30, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor35);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role37 = hOIReporter36.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor42 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor42.setId("2019-09-03-15.52.55.282");
        java.lang.String str45 = legacyDescriptor42.getUiId();
        java.lang.String str46 = legacyDescriptor42.getUiId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter47 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role37, "HH:mm:ss", "Y", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.02.984", legacyDescriptor42);
        hOIReporter0.setLegacyDescriptor(legacyDescriptor42);
        hOIReporter0.setFirstName("2019-09-03T15:53:27.051-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + role30 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role30.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role37 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role37.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        race6.setSubRaceType("N");
        race6.setSubRaceType("2019-09-03-15.53.08.733");
        race6.setRaceType("Mandated Reporter");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 0L, "_n", "15:53:21");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity12 = null;
        participantEntity0.setSafelySurrenderedBabies(safelySurrenderedBabiesEntity12);
        java.lang.Boolean boolean14 = participantEntity0.getSensitive();
        java.lang.Boolean boolean15 = participantEntity0.getSensitive();
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity16 = null;
        participantEntity0.setScreeningEntity(screeningEntity16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean15);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity0.setRaces("yyyy-MM-dd HH:mm:ss.SSS");
        participantEntity0.setEstimatedDob((java.lang.Boolean) false);
        java.lang.String str5 = participantEntity0.getRaces();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str5.equals("yyyy-MM-dd HH:mm:ss.SSS"));
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet37 = person25.getPhoneNumber();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList38 = person25.getMessages();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor46 = null;
        gov.ca.cwds.rest.api.domain.Address address47 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor46);
        java.lang.String str48 = address47.getCity();
        java.lang.Integer int49 = address47.getType();
        java.lang.String str50 = address47.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter51 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        boolean boolean52 = address47.equals((java.lang.Object) hOIReporter51);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor53 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor53.setId("2019-09-03-15.52.55.282");
        hOIReporter51.setLegacyDescriptor(legacyDescriptor53);
        boolean boolean57 = person25.equals((java.lang.Object) hOIReporter51);
        java.lang.String str58 = person25.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str48.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str50.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str58.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter0.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor37 = null;
        gov.ca.cwds.rest.api.domain.Address address38 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor37);
        java.lang.String str39 = address38.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor40 = address38.getLegacyDescriptor();
        hOIReporter0.setLegacyDescriptor(legacyDescriptor40);
        legacyDescriptor40.setId("2019-09-03T15:53:29.966Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str39.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor40);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity4);
        java.lang.String str6 = ethnicity4.getEthnicityType();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity7 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity4);
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet8 = ethnicity4.getPersonEthnicity();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity9 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity4);
        java.util.Date date10 = ethnicity4.getCreateDateTime();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date10);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage5 = null;
        phoneNumber4.addMessage(errorMessage5);
        java.lang.Long long7 = phoneNumber4.getId();
        java.lang.String str8 = phoneNumber4.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str8.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        csecEntity0.setParticipantId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity6 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList7 = ethnicity6.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity6, "Anonymous Reporter", "N");
        java.lang.String str11 = ethnicity10.getSubEthnicity();
        java.util.Date date12 = ethnicity10.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity10);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId14 = personEthnicity13.getPrimaryKey();
        boolean boolean15 = csecEntity0.equals((java.lang.Object) personEthnicityId14);
        java.time.LocalDate localDate16 = null;
        csecEntity0.setEndDate(localDate16);
        csecEntity0.setCsecCodeId("2019-09-03T15:53:05.518-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str11.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:39 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 10L, "2019-09-03-15.53.08.704", "2019-09-03T15:53:08.732Z");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity4 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean5 = participantEntity4.getProbationYouth();
        participantEntity4.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date8 = null;
        participantEntity4.setDateOfBirth(date8);
        participantEntity4.setId("_n");
        participantEntity4.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity4.setId("_n");
        java.lang.String str16 = participantEntity4.getScreeningId();
        boolean boolean17 = ethnicity2.equals((java.lang.Object) participantEntity4);
        java.lang.String str18 = participantEntity4.toString();
        participantEntity4.setLastName("2019-09-03-15.53.15.533");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookLocalDateString("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":\"MANDATED_REPORTER\",\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.time.format.DateTimeParseException: Text '{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null...' could not be parsed at index 0");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getApproximateAge();
        participantEntity0.setEstimatedDob((java.lang.Boolean) true);
        java.lang.String str11 = participantEntity0.getMiddleName();
        java.lang.String str12 = participantEntity0.getLastName();
        participantEntity0.setEthnicity("2019-09-03T15:53:25.355Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "2019-09-03T15:53:21.072Z", "2019-09-03_t15:53:04.984-0700", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s_z", legacyDescriptor5);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor7.setId("2019-09-03-15.52.55.282");
        java.lang.String str10 = legacyDescriptor7.getUiId();
        java.lang.String str11 = legacyDescriptor7.getUiId();
        hOIReporter6.setLegacyDescriptor(legacyDescriptor7);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter13 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role14 = hOIReporter13.getRole();
        java.lang.String str15 = hOIReporter13.getId();
        java.lang.String str16 = hOIReporter13.toJson();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor17 = hOIReporter13.getLegacyDescriptor();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor18 = hOIReporter13.getLegacyDescriptor();
        hOIReporter6.setLegacyDescriptor(legacyDescriptor18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str16.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor18);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        csecEntity0.setParticipantId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds");
        java.lang.String str4 = csecEntity0.getCsecCodeId();
        java.time.LocalDate localDate5 = csecEntity0.getStartDate();
        gov.ca.cwds.data.persistence.ns.Race race9 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        java.lang.Long long10 = race9.getPrimaryKey();
        java.lang.String str11 = race9.getSubRaceType();
        boolean boolean12 = csecEntity0.equals((java.lang.Object) str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str11.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        address8.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter13 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray21 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet22, addressArray21);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray24 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, phoneNumberArray24);
        gov.ca.cwds.rest.api.domain.Language[] languageArray27 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet28, languageArray27);
        gov.ca.cwds.rest.api.domain.Race[] raceArray30 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet31, raceArray30);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity35 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray36 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity35 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet37 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37, ethnicityArray36);
        gov.ca.cwds.rest.api.domain.Person person39 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37);
        boolean boolean40 = hOIReporter13.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter13.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor50 = null;
        gov.ca.cwds.rest.api.domain.Address address51 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor50);
        java.lang.String str52 = address51.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor53 = address51.getLegacyDescriptor();
        hOIReporter13.setLegacyDescriptor(legacyDescriptor53);
        org.joda.time.DateTime dateTime55 = null;
        legacyDescriptor53.setLastUpdated(dateTime55);
        address8.setLegacyDescriptor(legacyDescriptor53);
        boolean boolean59 = legacyDescriptor53.equals((java.lang.Object) "2019-09-03T15:53:11.857-0700");
        org.joda.time.DateTime dateTime60 = null;
        legacyDescriptor53.setLastUpdated(dateTime60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str52.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship3 = null;
        boolean boolean4 = clientRelationship0.relatedTo(clientRelationship3);
        java.lang.String str5 = clientRelationship0.getId();
        java.lang.String str6 = clientRelationship0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role28 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        hOIReporter0.setRole(role28);
        hOIReporter0.setFirstName("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str32 = hOIReporter0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + role28 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role28.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        java.lang.Boolean boolean3 = participantEntity0.getProbationYouth();
        participantEntity0.setProbationYouth((java.lang.Boolean) true);
        java.lang.String str6 = participantEntity0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity40 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType42 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role43 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity44 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean45 = participantEntity44.getProbationYouth();
        participantEntity44.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity44.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray50 = participantEntity44.getLanguages();
        java.lang.Object obj51 = stringArrayType42.assemble((java.io.Serializable) role43, (java.lang.Object) strArray50);
        java.lang.Class<java.lang.String[]> strArrayClass52 = stringArrayType42.returnedClass();
        java.sql.ResultSet resultSet53 = null;
        java.lang.String[] strArray59 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor60 = null;
        java.lang.Object obj62 = stringArrayType42.nullSafeGet(resultSet53, strArray59, sharedSessionContractImplementor60, (java.lang.Object) 1);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity63 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean64 = participantEntity63.getProbationYouth();
        participantEntity63.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity63.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray69 = participantEntity63.getLanguages();
        java.lang.String[] strArray70 = participantEntity63.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity82 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("hi!", date5, date12, "2019-09-03-15.53.07.205", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.05.703", "yyyy-MM-dd-HH.mm.ss.SSS", screeningEntity40, "yyyy-MM-dd HH:mm:ss.SSS", strArray59, strArray70, "", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:08.733-0700", "", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", (java.lang.Boolean) false, (java.lang.Boolean) false, (java.lang.Boolean) true, "2019-09-03T15:53:08.733-0700", "15:53:08", (java.lang.Boolean) true);
        participantEntity82.setSsn("2019-09-03T15:53:05.518Z");
        java.lang.String str85 = participantEntity82.getNameSuffix();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:40.334Z" + "'", str6.equals("2019-09-03T15:53:40.334Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "2019-09-03" + "'", str35.equals("2019-09-03"));
        org.junit.Assert.assertTrue("'" + role43 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role43.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj51.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str85.equals("yyyy-MM-dd HH:mm:ss.SSS"));
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getApproximateAge();
        participantEntity0.setEstimatedDob((java.lang.Boolean) true);
        java.lang.String str11 = participantEntity0.getRaces();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        java.lang.String str1 = safelySurrenderedBabiesEntity0.getComments();
        safelySurrenderedBabiesEntity0.setBraceletId("2019-09-03-15.53.08.988");
        safelySurrenderedBabiesEntity0.setRelationToChild("15:53:13");
        safelySurrenderedBabiesEntity0.setBraceletId("yyyy-_m_m-dd _h_h:mm:ss._s_s_s");
        java.lang.String str8 = safelySurrenderedBabiesEntity0.getRelationToChild();
        java.lang.String str9 = safelySurrenderedBabiesEntity0.getBraceletId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "15:53:13" + "'", str8.equals("15:53:13"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-_m_m-dd _h_h:mm:ss._s_s_s" + "'", str9.equals("yyyy-_m_m-dd _h_h:mm:ss._s_s_s"));
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet29 = person25.getEthnicity();
        java.lang.String str30 = person25.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicitySet29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str30.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity7 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 0L, "2019-09-03T15:53:04.320-0700", "2019-09-03T15:53:05.518Z");
        personEthnicity2.setEthnicity(ethnicity7);
        gov.ca.cwds.data.persistence.ns.Person person9 = personEthnicity2.getPerson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person9);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        boolean boolean7 = participantEntity0.equals((java.lang.Object) '4');
        java.lang.String str8 = participantEntity0.getPrimaryKey();
        java.lang.String str9 = participantEntity0.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage5 = null;
        phoneNumber4.addMessage(errorMessage5);
        java.lang.Long long7 = phoneNumber4.getId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor20 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor20.setId("2019-09-03-15.52.55.282");
        java.lang.String str23 = legacyDescriptor20.getUiId();
        java.lang.String str24 = legacyDescriptor20.getUiId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter25 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role15, "HH:mm:ss", "Y", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.02.984", legacyDescriptor20);
        hOIReporter25.setLastName("{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        boolean boolean28 = phoneNumber4.equals((java.lang.Object) "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity31 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList32 = ethnicity31.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity35 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity31, "Anonymous Reporter", "N");
        java.lang.String str36 = ethnicity35.getSubEthnicity();
        java.util.Date date37 = ethnicity35.getLastUpdatedTime();
        java.lang.String str38 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date37);
        boolean boolean39 = phoneNumber4.equals((java.lang.Object) str38);
        java.lang.Long long40 = phoneNumber4.getId();
        java.lang.String str41 = phoneNumber4.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7.equals(0L));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str36.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str38 + "' != '" + "2019-09-03T15:53:40.488Z" + "'", str38.equals("2019-09-03T15:53:40.488Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str41.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        participantEntity0.setSealed((java.lang.Boolean) false);
        participantEntity0.setNameSuffix("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
        participantEntity0.setApproximateAgeUnits("15:53:15");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity19 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList20 = ethnicity19.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity23 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity19, "Anonymous Reporter", "N");
        java.lang.String str24 = ethnicity19.getEthnicityType();
        boolean boolean26 = ethnicity19.equals((java.lang.Object) ' ');
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity29 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity19, "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
        java.lang.String str30 = ethnicity29.getSubEthnicity();
        java.lang.String str31 = ethnicity29.getEthnicityType();
        boolean boolean32 = participantEntity0.equals((java.lang.Object) ethnicity29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str24.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str30.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str31.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("15:53:15", "2019-09-03T15:53:06.452-0700");
        java.lang.String str3 = race2.getSubRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "2019-09-03T15:53:06.452-0700" + "'", str3.equals("2019-09-03T15:53:06.452-0700"));
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        java.lang.String[] strArray2 = participantEntity0.getRoles();
        java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = participantEntity0.getCsecs();
        java.lang.String str4 = participantEntity0.getMiddleName();
        java.lang.String str5 = participantEntity0.getMiddleName();
        java.lang.String str6 = participantEntity0.getGender();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity3 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList4 = ethnicity3.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity7 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity3, "Anonymous Reporter", "N");
        java.lang.String str8 = ethnicity7.getSubEthnicity();
        java.util.Date date9 = ethnicity7.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity10 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity7);
        java.lang.String str11 = ethnicity7.getSubEthnicity();
        java.lang.String str12 = ethnicity7.getSubEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str8.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date9);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str11.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str12.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setFirstName("2019-09-03-15.52.55.282");
        java.lang.String str9 = participantEntity0.getRelatedScreeningId();
        participantEntity0.setSensitive((java.lang.Boolean) true);
        participantEntity0.setSealed((java.lang.Boolean) false);
        participantEntity0.setId("2019-09-03T15:53:22.883-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        java.lang.Object obj9 = stringArrayType0.assemble((java.io.Serializable) role1, (java.lang.Object) strArray8);
        java.lang.Class<java.lang.String[]> strArrayClass10 = stringArrayType0.returnedClass();
        java.sql.ResultSet resultSet11 = null;
        java.lang.String[] strArray17 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor18 = null;
        java.lang.Object obj20 = stringArrayType0.nullSafeGet(resultSet11, strArray17, sharedSessionContractImplementor18, (java.lang.Object) 1);
        java.lang.Object obj21 = null;
        java.lang.Object obj22 = stringArrayType0.deepCopy(obj21);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor31 = null;
        gov.ca.cwds.rest.api.domain.Address address32 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor31);
        java.lang.String str33 = address32.getCity();
        java.lang.Integer int34 = address32.getType();
        address32.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.Object obj37 = stringArrayType0.assemble((java.io.Serializable) "15:53:04", (java.lang.Object) address32);
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str33.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "15:53:04" + "'", obj37.equals("15:53:04"));
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor5);
        java.lang.String str7 = hOIReporter6.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        boolean boolean16 = hOIReporter6.equals((java.lang.Object) hOIReporter14);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role17 = hOIReporter6.getRole();
        hOIReporter6.setFirstName("2019-09-03T15:53:09.087Z");
        java.lang.String str20 = hOIReporter6.getLastName();
        hOIReporter6.setFirstName("2019-09-03T15:53:21.883-0700");
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03-15.52.55.282" + "'", str7.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + role17 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role17.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str20.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimestampString("2019-09-03T15:53:30.137Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03T15:53:30.137Z\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        java.lang.String str3 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor4 = hOIReporter0.getLegacyDescriptor();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = hOIReporter0.getLegacyDescriptor();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role6 = null;
        hOIReporter0.setRole(role6);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = null;
        hOIReporter0.setRole(role8);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role10 = hOIReporter0.getRole();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str3.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role10);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.String str1 = csecEntity0.getParticipantId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter2 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray10 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet11, addressArray10);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray13 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet14, phoneNumberArray13);
        gov.ca.cwds.rest.api.domain.Language[] languageArray16 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet17, languageArray16);
        gov.ca.cwds.rest.api.domain.Race[] raceArray19 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet20 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet20, raceArray19);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity24 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray25 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity24 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet26 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet26, ethnicityArray25);
        gov.ca.cwds.rest.api.domain.Person person28 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet20, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet26);
        boolean boolean29 = hOIReporter2.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str30 = hOIReporter2.getFirstName();
        hOIReporter2.setLastName("2019-09-03T15:53:04.984-0700");
        boolean boolean33 = csecEntity0.equals((java.lang.Object) "2019-09-03T15:53:04.984-0700");
        csecEntity0.setCsecCodeId("2019-09-03-15.53.34.849");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        int[] intArray39 = stringJsonUserType0.sqlTypes();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity40 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean41 = participantEntity40.getProbationYouth();
        participantEntity40.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity40.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        participantEntity40.setSsn("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity48 = participantEntity40.getScreening();
        java.lang.String str49 = participantEntity40.getApproximateAgeUnits();
        java.lang.Object obj50 = null;
        boolean boolean51 = stringJsonUserType0.equals((java.lang.Object) str49, obj50);
        int[] intArray52 = stringJsonUserType0.sqlTypes();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str49.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray52);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        gov.ca.cwds.data.persistence.ns.Person person14 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity15 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity16 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person14, ethnicity15);
        java.util.Date date17 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person18 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity19 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity20 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person18, ethnicity19);
        java.util.Date date21 = personEthnicity20.getLastUpdatedTime();
        boolean boolean22 = personEthnicity16.equals((java.lang.Object) personEthnicity20);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity16.setEthnicity(ethnicity26);
        java.util.Date date28 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship29 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date7, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date28);
        java.lang.String str30 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date7);
        java.lang.String str31 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date7);
        gov.ca.cwds.data.persistence.ns.Person person36 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity37 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity38 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person36, ethnicity37);
        java.util.Date date39 = personEthnicity38.getLastUpdatedTime();
        java.util.Date date40 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        java.lang.String str41 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date39);
        java.lang.String str42 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date39);
        java.util.Date date43 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship44 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("HH:mm:ss", (java.lang.Short) (short) 0, date7, "15:52:54", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "Non-mandated Reporter", "", date43);
        java.util.Date date45 = clientRelationship44.getEndDate();
        java.lang.String str46 = clientRelationship44.getPrimaryClientId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "2019-09-03" + "'", str9.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date17);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date21);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str30 + "' != '" + "2019-09-03T15:53:40.900Z" + "'", str30.equals("2019-09-03T15:53:40.900Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str31 + "' != '" + "15:53:40" + "'", str31.equals("15:53:40"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date40);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str41 + "' != '" + "2019-09-03-15.53.40.900" + "'", str41.equals("2019-09-03-15.53.40.900"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "2019-09-03" + "'", str42.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date43);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date45);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Sep 03 15:53:40 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str46.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        participantEntity0.setApproximateAgeUnits("_n");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimestampString("2019-09-03T15:53:21.072Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03T15:53:21.072Z\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor0.setId("2019-09-03-15.52.55.282");
        java.lang.String str3 = legacyDescriptor0.getUiId();
        java.lang.String str4 = legacyDescriptor0.getUiId();
        java.lang.String str5 = legacyDescriptor0.getUiId();
        org.joda.time.DateTime dateTime6 = legacyDescriptor0.getLastUpdated();
        org.joda.time.DateTime dateTime7 = legacyDescriptor0.getLastUpdated();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(dateTime6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(dateTime7);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage5 = null;
        phoneNumber4.addMessage(errorMessage5);
        java.lang.Long long7 = phoneNumber4.getId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor20 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor20.setId("2019-09-03-15.52.55.282");
        java.lang.String str23 = legacyDescriptor20.getUiId();
        java.lang.String str24 = legacyDescriptor20.getUiId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter25 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role15, "HH:mm:ss", "Y", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.02.984", legacyDescriptor20);
        hOIReporter25.setLastName("{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        boolean boolean28 = phoneNumber4.equals((java.lang.Object) "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        java.lang.Long long29 = phoneNumber4.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7.equals(0L));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29.equals(0L));
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        java.lang.String[] strArray2 = participantEntity0.getRoles();
        java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = participantEntity0.getCsecs();
        java.lang.String str4 = participantEntity0.getMiddleName();
        java.lang.String str5 = participantEntity0.getMiddleName();
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType6 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet7 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity8 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean9 = participantEntity8.getProbationYouth();
        participantEntity8.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity8.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray14 = participantEntity8.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor15 = null;
        gov.ca.cwds.data.persistence.ns.Person person16 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person16, ethnicity20);
        java.lang.Object obj22 = stringArrayType6.nullSafeGet(resultSet7, strArray14, sharedSessionContractImplementor15, (java.lang.Object) personEthnicity21);
        participantEntity0.setRoles(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String str6 = participantEntity0.getEthnicity();
        participantEntity0.setSsn("gov.ca.cwds.data.persistence.ns._participant_entity.find_participant_by_related_screening_id_and_legacy_id");
        java.lang.String str9 = participantEntity0.getGender();
        java.lang.String str10 = participantEntity0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        java.lang.String str12 = participantEntity0.getScreeningId();
        java.util.Date date13 = participantEntity0.getDateOfDeath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date13);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        clientRelationship0.setLastUpdatedId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        java.lang.String str5 = clientRelationship0.getSameHomeCode();
        java.lang.String str6 = clientRelationship0.getId();
        clientRelationship0.setLastUpdatedId("2019-09-03T15:53:11.912-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor5);
        java.lang.String str7 = hOIReporter6.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        boolean boolean16 = hOIReporter6.equals((java.lang.Object) hOIReporter14);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role17 = hOIReporter6.getRole();
        org.joda.time.DateTime dateTime24 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor27 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor("2019-09-03T15:53:13.177Z", "2019-09-03T15:53:03.344Z", dateTime24, "2019-09-03T15:53:10.189Z", "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        java.lang.String str28 = legacyDescriptor27.getId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter29 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role17, "15:53:11", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s_z", "{\"id\":\"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\",\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "2019-09-03T15:53:13.317Z", legacyDescriptor27);
        hOIReporter29.setFirstName("2019-09-03-15.53.23.483");
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03-15.52.55.282" + "'", str7.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + role17 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role17.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "2019-09-03T15:53:13.177Z" + "'", str28.equals("2019-09-03T15:53:13.177Z"));
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        race6.setSubRaceType("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        boolean boolean39 = race6.equals((java.lang.Object) "N");
        gov.ca.cwds.data.persistence.ns.Race race42 = new gov.ca.cwds.data.persistence.ns.Race(race6, "2019-09-03T15:53:16.789Z", "2019-09-03T15:53:22.232Z");
        gov.ca.cwds.data.persistence.ns.Race race45 = new gov.ca.cwds.data.persistence.ns.Race(race6, "15:53:05", "2019-09-03T15:53:33.575-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = null;
        gov.ca.cwds.rest.api.domain.Address address15 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor14);
        java.lang.String str16 = address15.getCity();
        java.lang.Integer int17 = address15.getType();
        address15.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter20 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray28 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet29 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet29, addressArray28);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray31 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet32 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet32, phoneNumberArray31);
        gov.ca.cwds.rest.api.domain.Language[] languageArray34 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet35 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet35, languageArray34);
        gov.ca.cwds.rest.api.domain.Race[] raceArray37 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet38 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet38, raceArray37);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity42 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray43 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity42 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet44 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet44, ethnicityArray43);
        gov.ca.cwds.rest.api.domain.Person person46 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet29, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet32, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet35, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet38, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet44);
        boolean boolean47 = hOIReporter20.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter20.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor57 = null;
        gov.ca.cwds.rest.api.domain.Address address58 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor57);
        java.lang.String str59 = address58.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor60 = address58.getLegacyDescriptor();
        hOIReporter20.setLegacyDescriptor(legacyDescriptor60);
        org.joda.time.DateTime dateTime62 = null;
        legacyDescriptor60.setLastUpdated(dateTime62);
        address15.setLegacyDescriptor(legacyDescriptor60);
        java.lang.Integer int65 = address15.getState();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter66 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role67 = hOIReporter66.getRole();
        java.lang.String str68 = hOIReporter66.getId();
        java.lang.String str69 = hOIReporter66.toJson();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor70 = hOIReporter66.getLegacyDescriptor();
        address15.setLegacyDescriptor(legacyDescriptor70);
        gov.ca.cwds.rest.api.domain.Address address72 = new gov.ca.cwds.rest.api.domain.Address("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "2019-09-03-15.52.59.761", "15:53:11", "2019-09-03T15:53:32.057Z", (java.lang.Integer) 1, "2019-09-03T15:53:04.320-0700", (java.lang.Integer) 10, legacyDescriptor70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str16.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str59.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65.equals(100));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str69.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor70);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity12 = null;
        participantEntity0.setSafelySurrenderedBabies(safelySurrenderedBabiesEntity12);
        java.lang.Boolean boolean14 = participantEntity0.getSensitive();
        participantEntity0.setRelatedScreeningId("2019-09-03-15.53.26.640");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean14);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "Anonymous Reporter", "N");
        java.lang.String str7 = ethnicity2.getEthnicityType();
        boolean boolean9 = ethnicity2.equals((java.lang.Object) ' ');
        java.lang.String str10 = ethnicity2.getSubEthnicity();
        java.lang.String str11 = ethnicity2.getSubEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str7.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str10.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str11.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity40 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType42 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role43 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity44 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean45 = participantEntity44.getProbationYouth();
        participantEntity44.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity44.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray50 = participantEntity44.getLanguages();
        java.lang.Object obj51 = stringArrayType42.assemble((java.io.Serializable) role43, (java.lang.Object) strArray50);
        java.lang.Class<java.lang.String[]> strArrayClass52 = stringArrayType42.returnedClass();
        java.sql.ResultSet resultSet53 = null;
        java.lang.String[] strArray59 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor60 = null;
        java.lang.Object obj62 = stringArrayType42.nullSafeGet(resultSet53, strArray59, sharedSessionContractImplementor60, (java.lang.Object) 1);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity63 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean64 = participantEntity63.getProbationYouth();
        participantEntity63.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity63.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray69 = participantEntity63.getLanguages();
        java.lang.String[] strArray70 = participantEntity63.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity82 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("hi!", date5, date12, "2019-09-03-15.53.07.205", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.05.703", "yyyy-MM-dd-HH.mm.ss.SSS", screeningEntity40, "yyyy-MM-dd HH:mm:ss.SSS", strArray59, strArray70, "", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:08.733-0700", "", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", (java.lang.Boolean) false, (java.lang.Boolean) false, (java.lang.Boolean) true, "2019-09-03T15:53:08.733-0700", "15:53:08", (java.lang.Boolean) true);
        participantEntity82.setNameSuffix("");
        participantEntity82.setMiddleName("2019-09-03-15.53.08.988");
        participantEntity82.setLegacySourceTable("2019-09-03-15.53.19.417");
        participantEntity82.setFirstName("2019-09-03T15:53:14.005-0700");
        java.lang.String str91 = participantEntity82.getSsn();
        java.lang.String str92 = participantEntity82.getEthnicity();
        java.util.Date date93 = participantEntity82.getDateOfDeath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:41.324Z" + "'", str6.equals("2019-09-03T15:53:41.324Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "2019-09-03" + "'", str35.equals("2019-09-03"));
        org.junit.Assert.assertTrue("'" + role43 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role43.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj51.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str91 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str91.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str92 + "' != '" + "" + "'", str92.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date93);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date93.toString(), "Tue Sep 03 15:53:41 PDT 2019");
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        java.lang.String str1 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str2 = safelySurrenderedBabiesEntity0.getBraceletId();
        java.lang.String str3 = safelySurrenderedBabiesEntity0.getComments();
        java.util.Date date4 = safelySurrenderedBabiesEntity0.getMedQuestionaireReturnDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date4);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setFirstName("2019-09-03-15.52.55.282");
        java.lang.Boolean boolean9 = participantEntity0.getSensitive();
        java.lang.String str10 = participantEntity0.getApproximateAge();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray47 = stringArrayType0.sqlTypes();
        int[] intArray48 = stringArrayType0.sqlTypes();
        java.lang.Class<java.lang.String[]> strArrayClass49 = stringArrayType0.returnedClass();
        java.lang.Class<java.lang.String[]> strArrayClass50 = stringArrayType0.returnedClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass50);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getRaces();
        java.lang.String str2 = participantEntity0.getApproximateAge();
        gov.ca.cwds.rest.api.domain.ParticipantIntakeApi participantIntakeApi3 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity4 = participantEntity0.updateFrom(participantIntakeApi3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getLastName();
        java.lang.String str27 = person25.getNameSuffix();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList28 = person25.getMessages();
        java.lang.String str29 = person25.getGender();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str26.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "hi!" + "'", str29.equals("hi!"));
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        boolean boolean17 = stringArrayType0.isMutable();
        java.sql.ResultSet resultSet18 = null;
        gov.ca.cwds.data.persistence.ns.Person person22 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity23 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity24 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person22, ethnicity23);
        java.util.Date date25 = personEthnicity24.getLastUpdatedTime();
        java.lang.String str26 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date25);
        java.lang.String str27 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date25);
        gov.ca.cwds.data.persistence.ns.Person person32 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity33 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity34 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person32, ethnicity33);
        java.util.Date date35 = personEthnicity34.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person36 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity37 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity38 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person36, ethnicity37);
        java.util.Date date39 = personEthnicity38.getLastUpdatedTime();
        boolean boolean40 = personEthnicity34.equals((java.lang.Object) personEthnicity38);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity44 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity34.setEthnicity(ethnicity44);
        java.util.Date date46 = personEthnicity34.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship47 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date25, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date46);
        java.lang.String str48 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date46);
        gov.ca.cwds.data.persistence.ns.Person person49 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity50 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity51 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person49, ethnicity50);
        java.util.Date date52 = personEthnicity51.getLastUpdatedTime();
        java.util.Date date53 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date52);
        java.lang.String str54 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date53);
        java.lang.String str55 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date53);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity60 = null;
        java.lang.String[] strArray65 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity66 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean67 = participantEntity66.getProbationYouth();
        participantEntity66.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity66.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray72 = participantEntity66.getLanguages();
        java.lang.String[] strArray73 = participantEntity66.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity85 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date46, date53, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity60, "2019-09-03-15.52.58.871", strArray65, strArray73, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor86 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor87 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor87.setId("2019-09-03-15.52.55.282");
        legacyDescriptor87.setTableName("yyyy-MM-dd HH:mm:ss.SSS");
        java.lang.String str92 = legacyDescriptor87.getTableName();
        java.lang.Object obj93 = stringArrayType0.nullSafeGet(resultSet18, strArray73, sharedSessionContractImplementor86, (java.lang.Object) legacyDescriptor87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date25);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "2019-09-03" + "'", str26.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "2019-09-03" + "'", str27.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date35);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date46);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str48 + "' != '" + "2019-09-03T15:53:41.540-0700" + "'", str48.equals("2019-09-03T15:53:41.540-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date52);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date53);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str54 + "' != '" + "15:53:41" + "'", str54.equals("15:53:41"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str55 + "' != '" + "2019-09-03T15:53:41.540-0700" + "'", str55.equals("2019-09-03T15:53:41.540-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str92 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str92.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj93);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity7 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean8 = participantEntity7.getProbationYouth();
        participantEntity7.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date11 = null;
        participantEntity7.setDateOfBirth(date11);
        participantEntity7.setId("_n");
        boolean boolean15 = participantEntity0.equals((java.lang.Object) "_n");
        java.lang.String[] strArray16 = participantEntity0.getRoles();
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        java.lang.String str23 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date22);
        java.lang.String str24 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date22);
        gov.ca.cwds.data.persistence.ns.Person person29 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity30 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity31 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person29, ethnicity30);
        java.util.Date date32 = personEthnicity31.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person33 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity34 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity35 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person33, ethnicity34);
        java.util.Date date36 = personEthnicity35.getLastUpdatedTime();
        boolean boolean37 = personEthnicity31.equals((java.lang.Object) personEthnicity35);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity41 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity31.setEthnicity(ethnicity41);
        java.util.Date date43 = personEthnicity31.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship44 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date22, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date43);
        java.lang.String str45 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date22);
        boolean boolean46 = participantEntity0.equals((java.lang.Object) date22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "2019-09-03" + "'", str23.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "2019-09-03" + "'", str24.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date32);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date43);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "2019-09-03" + "'", str45.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("_n", "");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor10 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address11 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor10);
        java.lang.String str12 = address11.getStreetAddress();
        boolean boolean13 = race2.equals((java.lang.Object) str12);
        race2.setSubRaceType("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        java.lang.Object obj16 = null;
        boolean boolean17 = race2.equals(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str12.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor0.setId("2019-09-03-15.52.55.282");
        legacyDescriptor0.setTableName("yyyy-MM-dd HH:mm:ss.SSS");
        java.lang.String str5 = legacyDescriptor0.getTableDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race4 = new gov.ca.cwds.rest.api.domain.Race(race3);
        java.lang.Long long5 = race3.getPrimaryKey();
        java.util.Date date6 = race3.getLastUpdatedTime();
        java.lang.String str7 = race3.getLastUpdatedId();
        java.util.Date date8 = race3.getLastUpdatedTime();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setFirstName("2019-09-03-15.52.55.282");
        java.lang.String str9 = participantEntity0.getRelatedScreeningId();
        participantEntity0.setGender("2019-09-03T15:53:18.945-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        participantEntity0.setFirstName("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId");
        java.lang.String str13 = participantEntity0.getRaces();
        java.lang.String str14 = participantEntity0.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        int[] intArray39 = stringJsonUserType0.sqlTypes();
        java.lang.Class class40 = stringJsonUserType0.returnedClass();
        gov.ca.cwds.rest.api.domain.Race race43 = new gov.ca.cwds.rest.api.domain.Race("_n", "");
        java.lang.Object obj44 = stringJsonUserType0.deepCopy((java.lang.Object) "");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity45 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean46 = participantEntity45.getProbationYouth();
        participantEntity45.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date49 = null;
        participantEntity45.setDateOfBirth(date49);
        participantEntity45.setId("_n");
        participantEntity45.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity45.setId("_n");
        java.lang.String str57 = participantEntity45.getScreeningId();
        java.lang.String str58 = participantEntity45.getFirstName();
        java.lang.String str59 = participantEntity45.getEthnicity();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable60 = stringJsonUserType0.disassemble((java.lang.Object) participantEntity45);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: gov.ca.cwds.data.persistence.ns.ParticipantEntity cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "" + "'", obj44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'" + "'", str59.equals("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'"));
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.lang.String str3 = ethnicity2.getSubEthnicity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship4.setLastUpdatedId("");
        java.lang.String str7 = clientRelationship4.getSecondaryClientId();
        java.lang.String str8 = clientRelationship4.getAbsentParentCode();
        java.lang.String str9 = clientRelationship4.getSameHomeCode();
        boolean boolean10 = ethnicity2.equals((java.lang.Object) clientRelationship4);
        clientRelationship4.setLastUpdatedId("2019-09-03-15.52.55.282");
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person13, ethnicity14);
        java.util.Date date16 = personEthnicity15.getLastUpdatedTime();
        java.util.Date date17 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date16);
        java.lang.String str18 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date16);
        java.lang.String str19 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date16);
        clientRelationship4.setLastUpdatedTime(date16);
        gov.ca.cwds.data.persistence.ns.Person person25 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity27 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person25, ethnicity26);
        java.util.Date date28 = personEthnicity27.getLastUpdatedTime();
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date28);
        java.lang.String str30 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date28);
        gov.ca.cwds.data.persistence.ns.Person person35 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity36 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity37 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person35, ethnicity36);
        java.util.Date date38 = personEthnicity37.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person39 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity40 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity41 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person39, ethnicity40);
        java.util.Date date42 = personEthnicity41.getLastUpdatedTime();
        boolean boolean43 = personEthnicity37.equals((java.lang.Object) personEthnicity41);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity47 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity37.setEthnicity(ethnicity47);
        java.util.Date date49 = personEthnicity37.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship50 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date28, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date49);
        java.lang.String str51 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date28);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship56 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date57 = clientRelationship56.getLastUpdatedTime();
        java.lang.String str58 = clientRelationship56.getSecondaryClientId();
        gov.ca.cwds.data.persistence.ns.Person person59 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity60 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity61 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person59, ethnicity60);
        java.util.Date date62 = personEthnicity61.getLastUpdatedTime();
        java.lang.String str63 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date62);
        java.lang.String str64 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date62);
        clientRelationship56.setLastUpdatedTime(date62);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship66 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("2019-09-03-15.53.08.733", (java.lang.Short) (short) 0, date28, "2019-09-03-15.53.10.189", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "2019-09-03T15:53:11.111-0700", "2019-09-03T15:53:19.827Z", date62);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = clientRelationship4.relatedTo(clientRelationship66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str3.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date17);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str18 + "' != '" + "2019-09-03-15.53.41.922" + "'", str18.equals("2019-09-03-15.53.41.922"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "2019-09-03" + "'", str19.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "2019-09-03" + "'", str29.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "2019-09-03" + "'", str30.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date38);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date42);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date49);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "2019-09-03" + "'", str51.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date62);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "2019-09-03" + "'", str63.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "2019-09-03" + "'", str64.equals("2019-09-03"));
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "Anonymous Reporter", "N");
        java.lang.String str7 = ethnicity6.getSubEthnicity();
        java.util.Date date8 = ethnicity6.getLastUpdatedTime();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity9 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity6);
        java.lang.String str10 = ethnicity9.getSubEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date8);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Sep 03 15:53:41 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str10.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        csecEntity0.setParticipantId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str3 = csecEntity0.getParticipantId();
        csecEntity0.setCsecCodeId("2019-09-03T15:53:34.457-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds" + "'", str3.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds"));
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet37 = person25.getPhoneNumber();
        java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet38 = person25.getEthnicity();
        boolean boolean39 = person25.hasMessages();
        java.lang.String str40 = person25.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:42 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:42 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicitySet38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str40.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.io.Serializable serializable12 = safelySurrenderedBabiesEntity0.getPrimaryKey();
        safelySurrenderedBabiesEntity0.setParentGuardProvMedQuestion("2019-09-03T15:53:33.751-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable12);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Class class36 = stringJsonUserType0.returnedClass();
        gov.ca.cwds.data.persistence.ns.Person person37 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity41 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity42 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person37, ethnicity41);
        java.lang.String str43 = ethnicity41.getEthnicityType();
        gov.ca.cwds.data.persistence.ns.Race race47 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) (-1L), "2019-09-03T15:53:11.506Z", "2019-09-03-15.53.08.216");
        boolean boolean48 = stringJsonUserType0.equals((java.lang.Object) ethnicity41, (java.lang.Object) race47);
        java.sql.ResultSet resultSet49 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity50 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean51 = participantEntity50.getProbationYouth();
        participantEntity50.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date54 = null;
        participantEntity50.setDateOfBirth(date54);
        participantEntity50.setId("_n");
        participantEntity50.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity50.setId("_n");
        participantEntity50.setRelatedScreeningId("15:52:59");
        participantEntity50.setLegacyId("2019-09-03-15.53.05.294");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType66 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role67 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity68 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean69 = participantEntity68.getProbationYouth();
        participantEntity68.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity68.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray74 = participantEntity68.getLanguages();
        java.lang.Object obj75 = stringArrayType66.assemble((java.io.Serializable) role67, (java.lang.Object) strArray74);
        participantEntity50.setLanguages(strArray74);
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor77 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor85 = null;
        gov.ca.cwds.rest.api.domain.Address address86 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor85);
        java.lang.String str87 = address86.getCity();
        java.lang.Integer int88 = address86.getType();
        java.lang.String str89 = address86.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter90 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        boolean boolean91 = address86.equals((java.lang.Object) hOIReporter90);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor92 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor92.setId("2019-09-03-15.52.55.282");
        hOIReporter90.setLegacyDescriptor(legacyDescriptor92);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj96 = stringJsonUserType0.nullSafeGet(resultSet49, strArray74, sharedSessionContractImplementor77, (java.lang.Object) hOIReporter90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "hi!" + "'", str43.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + role67 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role67.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj75.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str87 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str87.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str89.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.lang.String str12 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str13 = safelySurrenderedBabiesEntity0.getBraceletId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role3 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor8 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter9 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role3, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor8);
        java.lang.String str10 = hOIReporter9.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role11 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor16 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter17 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role11, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor16);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role18 = hOIReporter17.getRole();
        boolean boolean19 = hOIReporter9.equals((java.lang.Object) hOIReporter17);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role20 = hOIReporter9.getRole();
        org.joda.time.DateTime dateTime27 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor30 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor("2019-09-03T15:53:13.177Z", "2019-09-03T15:53:03.344Z", dateTime27, "2019-09-03T15:53:10.189Z", "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        java.lang.String str31 = legacyDescriptor30.getId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter32 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role20, "15:53:11", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s_z", "{\"id\":\"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\",\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "2019-09-03T15:53:13.317Z", legacyDescriptor30);
        java.lang.String str33 = legacyDescriptor30.getId();
        hOIReporter0.setLegacyDescriptor(legacyDescriptor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + role3 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role3.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "2019-09-03-15.52.55.282" + "'", str10.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role11 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role11.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role18 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role18.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + role20 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role20.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "2019-09-03T15:53:13.177Z" + "'", str31.equals("2019-09-03T15:53:13.177Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "2019-09-03T15:53:13.177Z" + "'", str33.equals("2019-09-03T15:53:13.177Z"));
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "Anonymous Reporter", "N");
        java.lang.String str7 = ethnicity2.getSubEthnicity();
        boolean boolean8 = ethnicity2.hasMessages();
        boolean boolean10 = ethnicity2.equals((java.lang.Object) "2019-09-03T15:53:37.753Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor5);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role7 = hOIReporter6.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor12 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor12.setId("2019-09-03-15.52.55.282");
        java.lang.String str15 = legacyDescriptor12.getUiId();
        java.lang.String str16 = legacyDescriptor12.getUiId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter17 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role7, "HH:mm:ss", "Y", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.02.984", legacyDescriptor12);
        hOIReporter17.setLastName("{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor20 = hOIReporter17.getLegacyDescriptor();
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role7 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role7.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor20);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship3 = null;
        boolean boolean4 = clientRelationship0.relatedTo(clientRelationship3);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getStartDate();
        boolean boolean7 = clientRelationship0.relatedTo(clientRelationship5);
        java.lang.String str8 = clientRelationship5.getSecondaryClientId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        race6.setSubRaceType("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        boolean boolean39 = race6.equals((java.lang.Object) "N");
        gov.ca.cwds.data.persistence.ns.Race race42 = new gov.ca.cwds.data.persistence.ns.Race(race6, "2019-09-03T15:53:16.789Z", "2019-09-03T15:53:22.232Z");
        race6.setSubRaceType("2019-09-03T15:53:23.483Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str3 = participantEntity0.getId();
        java.lang.String[] strArray4 = participantEntity0.getRoles();
        participantEntity0.setRaces("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity7 = participantEntity0.getScreening();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity7);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        java.lang.Boolean boolean3 = participantEntity0.getProbationYouth();
        participantEntity0.setProbationYouth((java.lang.Boolean) true);
        java.lang.String str6 = participantEntity0.toString();
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity7 = participantEntity0.getScreeningEntity();
        participantEntity0.setLastName("2019-09-03T15:53:37.591Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity7);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.lang.String str1 = clientRelationship0.getPrimaryClientId();
        java.util.Date date2 = clientRelationship0.getLastUpdatedTime();
        java.util.Date date3 = clientRelationship0.getStartDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date3);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        participantEntity0.setSsn("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity8 = participantEntity0.getScreening();
        java.lang.String str9 = participantEntity0.getApproximateAgeUnits();
        java.lang.String str10 = participantEntity0.getLastName();
        java.lang.String str11 = participantEntity0.getSsn();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str9.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str10.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId" + "'", str11.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId"));
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        gov.ca.cwds.data.persistence.ns.Race race0 = new gov.ca.cwds.data.persistence.ns.Race();
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonRace> personRaceSet1 = race0.getPersonRace();
        java.lang.Long long2 = race0.getPrimaryKey();
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonRace> personRaceSet3 = race0.getPersonRace();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personRaceSet1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personRaceSet3);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        boolean boolean36 = stringJsonUserType0.isMutable();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getId();
        participantEntity0.setProbationYouth((java.lang.Boolean) false);
        participantEntity0.setScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.Boolean boolean13 = participantEntity0.getSealed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        safelySurrenderedBabiesEntity0.setParentGuardGivenBraceletId("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":\"MANDATED_REPORTER\",\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}");
        safelySurrenderedBabiesEntity0.setParentGuardProvMedQuestion("2019-09-03-15.53.07.205");
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        java.lang.String str11 = personEthnicity2.getCreateUserId();
        gov.ca.cwds.data.persistence.ns.Person person12 = personEthnicity2.getPerson();
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        personEthnicity2.setPerson(person13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:42 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:42 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person12);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.lang.String str12 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str13 = safelySurrenderedBabiesEntity0.getParentGuardGivenBraceletId();
        java.lang.String str14 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        safelySurrenderedBabiesEntity0.setParentGuardGivenBraceletId("2019-09-03T15:53:40.334Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor10 = address8.getLegacyDescriptor();
        java.lang.String str11 = address8.getStreetAddress();
        java.lang.String str12 = address8.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str11.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str12.equals("yyyy-MM-dd HH:mm:ss.SSS"));
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        safelySurrenderedBabiesEntity0.setSurrenderedBy("2019-09-03T15:53:25.974Z");
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Class class36 = stringJsonUserType0.returnedClass();
        java.sql.PreparedStatement preparedStatement37 = null;
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType38 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean39 = stringJsonUserType38.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race43 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race44 = new gov.ca.cwds.rest.api.domain.Race(race43);
        java.lang.String str45 = race44.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray53 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet54 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet54, addressArray53);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray56 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet57 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet57, phoneNumberArray56);
        gov.ca.cwds.rest.api.domain.Language[] languageArray59 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet60 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet60, languageArray59);
        gov.ca.cwds.rest.api.domain.Race[] raceArray62 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet63 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet63, raceArray62);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity67 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray68 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity67 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet69 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet69, ethnicityArray68);
        gov.ca.cwds.rest.api.domain.Person person71 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet54, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet57, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet60, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet63, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet69);
        java.lang.String str72 = person71.getSsn();
        boolean boolean73 = stringJsonUserType38.equals((java.lang.Object) race44, (java.lang.Object) str72);
        gov.ca.cwds.data.persistence.ns.Race race76 = new gov.ca.cwds.data.persistence.ns.Race(race44, "15:52:59", "2019-09-03T15:52:58.300-0700");
        gov.ca.cwds.data.persistence.ns.Race race79 = new gov.ca.cwds.data.persistence.ns.Race(race44, "2019-09-03-15.53.08.733", "yyyy-MM-dd HH:mm:ss.SSS");
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor81 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringJsonUserType0.nullSafeSet(preparedStatement37, (java.lang.Object) "2019-09-03-15.53.08.733", 1, sharedSessionContractImplementor81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str45.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str72 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str72.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.lang.String str12 = safelySurrenderedBabiesEntity0.getRelationToChild();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race4 = new gov.ca.cwds.rest.api.domain.Race(race3);
        java.lang.Long long5 = race3.getPrimaryKey();
        java.lang.Long long6 = race3.getPrimaryKey();
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonRace> personRaceSet7 = race3.getPersonRace();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personRaceSet7);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        address8.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter13 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray21 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet22, addressArray21);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray24 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, phoneNumberArray24);
        gov.ca.cwds.rest.api.domain.Language[] languageArray27 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet28, languageArray27);
        gov.ca.cwds.rest.api.domain.Race[] raceArray30 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet31, raceArray30);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity35 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray36 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity35 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet37 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37, ethnicityArray36);
        gov.ca.cwds.rest.api.domain.Person person39 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37);
        boolean boolean40 = hOIReporter13.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter13.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor50 = null;
        gov.ca.cwds.rest.api.domain.Address address51 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor50);
        java.lang.String str52 = address51.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor53 = address51.getLegacyDescriptor();
        hOIReporter13.setLegacyDescriptor(legacyDescriptor53);
        org.joda.time.DateTime dateTime55 = null;
        legacyDescriptor53.setLastUpdated(dateTime55);
        address8.setLegacyDescriptor(legacyDescriptor53);
        java.lang.String str58 = address8.getLegacyId();
        address8.setLegacySourceTable("2019-09-03-15.53.29.969");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str52.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId" + "'", str58.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId"));
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor10 = address8.getLegacyDescriptor();
        java.lang.String str11 = address8.getStreetAddress();
        java.lang.String str12 = address8.getLegacyId();
        java.lang.String str13 = address8.getZip();
        address8.setLegacyId("2019-09-03-15.53.34.850");
        java.lang.String str16 = address8.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str11.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str12.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "HH:mm:ss" + "'", str13.equals("HH:mm:ss"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str16.equals("yyyy-MM-dd HH:mm:ss.SSS"));
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        participantEntity0.setEthnicity("2019-09-03-15.53.29.969");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        participantEntity0.setFirstName("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId");
        participantEntity0.setFirstName("2019-09-03-15.52.59.761");
        participantEntity0.setEstimatedDob((java.lang.Boolean) true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "Anonymous Reporter", "N");
        java.lang.String str7 = ethnicity2.getEthnicityType();
        boolean boolean9 = ethnicity2.equals((java.lang.Object) ' ');
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
        boolean boolean13 = ethnicity2.hasMessages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str7.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        java.lang.String str11 = personEthnicity2.getCreateUserId();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = personEthnicity2.getEthnicity();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity16 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 0L, "2019-09-03T15:53:04.320-0700", "2019-09-03T15:53:05.518Z");
        personEthnicity2.setEthnicity(ethnicity16);
        java.lang.String str18 = ethnicity16.getEthnicityType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:42 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:42 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ethnicity12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "2019-09-03T15:53:04.320-0700" + "'", str18.equals("2019-09-03T15:53:04.320-0700"));
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.getFirstName();
        hOIReporter0.setId("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        hOIReporter0.setFirstName("15:52:59");
        java.lang.String str34 = hOIReporter0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.Person person9 = personEthnicity2.getPerson();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        personEthnicity2.setEthnicity(ethnicity10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:42 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:42 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person9);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship3 = null;
        boolean boolean4 = clientRelationship0.relatedTo(clientRelationship3);
        java.util.Date date5 = clientRelationship0.getStartDate();
        java.lang.String str6 = clientRelationship0.getPrimaryClientId();
        java.lang.String str7 = clientRelationship0.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.lang.String str1 = clientRelationship0.getPrimaryClientId();
        java.util.Date date2 = clientRelationship0.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship3 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date4 = clientRelationship3.getLastUpdatedTime();
        java.lang.String str5 = clientRelationship3.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship6 = null;
        boolean boolean7 = clientRelationship3.relatedTo(clientRelationship6);
        java.lang.String str8 = clientRelationship3.getSecondaryClientId();
        boolean boolean9 = clientRelationship0.relatedTo(clientRelationship3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        java.lang.String str27 = person25.getMiddleName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str27.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        int[] intArray2 = stringJsonUserType0.sqlTypes();
        java.lang.Class class3 = stringJsonUserType0.returnedClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class3);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        java.lang.String str9 = participantEntity0.getLegacySourceTable();
        participantEntity0.setSsn("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        participantEntity0.setLegacySourceTable("N");
        java.lang.String str14 = participantEntity0.getEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        java.util.Date date4 = personEthnicity2.getCreateDateTime();
        gov.ca.cwds.data.persistence.ns.Person person5 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity7 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person5, ethnicity6);
        java.util.Date date8 = personEthnicity7.getLastUpdatedTime();
        java.util.Date date9 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date8);
        java.lang.String str10 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date8);
        java.lang.String str11 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date8);
        java.util.Date date12 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date8);
        boolean boolean13 = personEthnicity2.equals((java.lang.Object) date8);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date8);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date9);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str10 + "' != '" + "2019-09-03-15.53.43.086" + "'", str10.equals("2019-09-03-15.53.43.086"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "2019-09-03" + "'", str11.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str14 + "' != '" + "15:53:43" + "'", str14.equals("15:53:43"));
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getId();
        java.lang.String str9 = participantEntity0.getRelatedScreeningId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId", "2019-09-03-15.52.55.282", "_n");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList5 = phoneNumber4.getMessages();
        java.lang.String str6 = phoneNumber4.getNumber();
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage7 = null;
        phoneNumber4.addMessage(errorMessage7);
        phoneNumber4.setId((java.lang.Long) 0L);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId" + "'", str6.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId"));
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        java.lang.String[] strArray7 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person8 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity9 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity10 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person8, ethnicity9);
        java.util.Date date11 = personEthnicity10.getLastUpdatedTime();
        java.util.Date date12 = personEthnicity10.getCreateDateTime();
        participantEntity0.setDateOfDeath(date12);
        participantEntity0.setNameSuffix("2019-09-03-15.53.15.533");
        participantEntity0.setRaces("2019-09-03T15:53:17.753Z");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity18 = participantEntity0.getSafelySurrenderedBabies();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date11);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(safelySurrenderedBabiesEntity18);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor3 = hOIReporter0.getLegacyDescriptor();
        java.lang.String str4 = hOIReporter0.getNameSuffix();
        hOIReporter0.setId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        hOIReporter0.setFirstName("2019-09-03T15:53:33.751-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        java.lang.String str11 = personEthnicity2.getLastUpdatedId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor10 = address8.getLegacyDescriptor();
        java.lang.String str11 = address8.getStreetAddress();
        java.lang.String str12 = address8.getLegacyId();
        java.lang.String str13 = address8.getZip();
        address8.setLegacyId("2019-09-03-15.53.34.850");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter16 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role17 = hOIReporter16.getRole();
        java.lang.String str18 = hOIReporter16.getId();
        java.lang.String str19 = hOIReporter16.toJson();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor20 = hOIReporter16.getLegacyDescriptor();
        address8.setLegacyDescriptor(legacyDescriptor20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str11.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str12.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "HH:mm:ss" + "'", str13.equals("HH:mm:ss"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str19.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor20);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        java.lang.String str3 = clientRelationship0.getLastUpdatedId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship4.setLastUpdatedId("");
        clientRelationship4.setLastUpdatedId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        boolean boolean9 = clientRelationship0.relatedTo(clientRelationship4);
        java.util.Date date10 = clientRelationship4.getStartDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date10);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        java.lang.String[] strArray2 = participantEntity0.getRoles();
        java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = participantEntity0.getCsecs();
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity4 = participantEntity0.getScreeningEntity();
        participantEntity0.setEstimatedDob((java.lang.Boolean) true);
        java.lang.String str7 = participantEntity0.getRelatedScreeningId();
        java.util.Date date8 = participantEntity0.getDateOfDeath();
        java.lang.String str9 = participantEntity0.getApproximateAge();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str4 = ethnicity3.getEthnicityType();
        java.lang.String str5 = ethnicity3.getSubEthnicity();
        java.lang.Class<?> wildcardClass6 = ethnicity3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setFirstName("2019-09-03-15.52.55.282");
        java.lang.String str9 = participantEntity0.getRelatedScreeningId();
        participantEntity0.setSensitive((java.lang.Boolean) true);
        java.lang.Boolean boolean12 = participantEntity0.getSealed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage5 = null;
        phoneNumber4.addMessage(errorMessage5);
        java.lang.Long long7 = phoneNumber4.getId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor20 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor20.setId("2019-09-03-15.52.55.282");
        java.lang.String str23 = legacyDescriptor20.getUiId();
        java.lang.String str24 = legacyDescriptor20.getUiId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter25 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role15, "HH:mm:ss", "Y", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.02.984", legacyDescriptor20);
        hOIReporter25.setLastName("{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        boolean boolean28 = phoneNumber4.equals((java.lang.Object) "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity31 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList32 = ethnicity31.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity35 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity31, "Anonymous Reporter", "N");
        java.lang.String str36 = ethnicity35.getSubEthnicity();
        java.util.Date date37 = ethnicity35.getLastUpdatedTime();
        java.lang.String str38 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date37);
        boolean boolean39 = phoneNumber4.equals((java.lang.Object) str38);
        java.lang.Long long40 = phoneNumber4.getId();
        java.lang.String str41 = phoneNumber4.getNumber();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7.equals(0L));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str36.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str38 + "' != '" + "2019-09-03T15:53:43.357Z" + "'", str38.equals("2019-09-03T15:53:43.357Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId" + "'", str41.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId"));
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        boolean boolean11 = personEthnicity5.equals((java.lang.Object) personEthnicity9);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity15 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity5.setEthnicity(ethnicity15);
        boolean boolean17 = hOIReporter0.equals((java.lang.Object) ethnicity15);
        java.lang.String str18 = ethnicity15.getSubEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 10L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId", "");
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity40 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean41 = participantEntity40.getProbationYouth();
        participantEntity40.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date44 = null;
        participantEntity40.setDateOfBirth(date44);
        participantEntity40.setId("_n");
        participantEntity40.setScreeningId("00001");
        java.lang.Boolean boolean50 = participantEntity40.getSealed();
        java.lang.String str51 = participantEntity40.getSsn();
        java.lang.Object obj52 = stringJsonUserType0.assemble((java.io.Serializable) "00010", (java.lang.Object) str51);
        java.sql.PreparedStatement preparedStatement53 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType54 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet55 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity56 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean57 = participantEntity56.getProbationYouth();
        participantEntity56.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity56.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray62 = participantEntity56.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor63 = null;
        gov.ca.cwds.data.persistence.ns.Person person64 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity68 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity69 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person64, ethnicity68);
        java.lang.Object obj70 = stringArrayType54.nullSafeGet(resultSet55, strArray62, sharedSessionContractImplementor63, (java.lang.Object) personEthnicity69);
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType71 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity75 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str76 = ethnicity75.getEthnicityType();
        java.lang.Long long77 = ethnicity75.getId();
        gov.ca.cwds.data.persistence.ns.Person person78 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity79 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity80 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person78, ethnicity79);
        java.util.Date date81 = personEthnicity80.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person82 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity83 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity84 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person82, ethnicity83);
        java.util.Date date85 = personEthnicity84.getLastUpdatedTime();
        boolean boolean86 = personEthnicity80.equals((java.lang.Object) personEthnicity84);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId87 = personEthnicity84.getPrimaryKey();
        java.io.Serializable serializable88 = personEthnicityId87.getPrimaryKey();
        boolean boolean89 = stringArrayType71.equals((java.lang.Object) long77, (java.lang.Object) personEthnicityId87);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity93 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 100L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId");
        boolean boolean94 = stringArrayType54.equals((java.lang.Object) stringArrayType71, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId");
        java.io.Serializable serializable96 = stringArrayType54.disassemble((java.lang.Object) "2019-09-03T15:53:11.317Z");
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor98 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringJsonUserType0.nullSafeSet(preparedStatement53, (java.lang.Object) "2019-09-03T15:53:11.317Z", (int) (short) -1, sharedSessionContractImplementor98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "00010" + "'", obj52.equals("00010"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "hi!" + "'", str76.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date81);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date81.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date85);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date85.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + serializable96 + "' != '" + "2019-09-03T15:53:11.317Z" + "'", serializable96.equals("2019-09-03T15:53:11.317Z"));
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.time.LocalDate localDate1 = csecEntity0.getEndDate();
        csecEntity0.setCsecCodeId("2019-09-03T15:53:30.502Z");
        gov.ca.cwds.data.persistence.ns.Person person5 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity7 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person5, ethnicity6);
        java.util.Date date8 = personEthnicity7.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        boolean boolean13 = personEthnicity7.equals((java.lang.Object) personEthnicity11);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity17 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity7.setEthnicity(ethnicity17);
        java.util.Date date19 = personEthnicity7.getLastUpdatedTime();
        java.lang.String str20 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date19);
        java.lang.String str21 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date19);
        gov.ca.cwds.data.persistence.ns.Person person22 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity23 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity24 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person22, ethnicity23);
        java.util.Date date25 = personEthnicity24.getLastUpdatedTime();
        java.util.Date date26 = gov.ca.cwds.rest.api.domain.DomainChef.concatenateDateAndTime(date19, date25);
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        java.util.Date date31 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date30);
        java.lang.String str32 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date30);
        java.lang.String str33 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date30);
        java.util.Date date34 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date30);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity39 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity41 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean42 = participantEntity41.getProbationYouth();
        participantEntity41.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date45 = null;
        participantEntity41.setDateOfBirth(date45);
        participantEntity41.setId("_n");
        participantEntity41.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity41.setId("_n");
        participantEntity41.setRelatedScreeningId("15:52:59");
        java.lang.String[] strArray55 = participantEntity41.getRoles();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity56 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean57 = participantEntity56.getProbationYouth();
        participantEntity56.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity56.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray62 = participantEntity56.getLanguages();
        java.lang.String[] strArray63 = participantEntity56.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity75 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", date26, date34, "15:53:14", "2019-09-03T15:53:08.984Z", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":\"MANDATED_REPORTER\",\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "2019-09-03T15:53:23.704Z", screeningEntity39, "2019-09-03T15:53:20.723-0700", strArray55, strArray63, "15:52:54", "2019-09-03T15:53:28.551Z", "2019-09-03T15:53:36.831-0700", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "2019-09-03T15:53:43.013-0700", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) false, "15:53:08", "15:53:26", (java.lang.Boolean) false);
        boolean boolean76 = csecEntity0.equals((java.lang.Object) "2019-09-03T15:53:23.704Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date8);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date19);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str20 + "' != '" + "2019-09-03-15.53.43.538" + "'", str20.equals("2019-09-03-15.53.43.538"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str21 + "' != '" + "15:53:43" + "'", str21.equals("15:53:43"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date25);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date31);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str32 + "' != '" + "2019-09-03-15.53.43.538" + "'", str32.equals("2019-09-03-15.53.43.538"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "2019-09-03" + "'", str33.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        java.lang.String str1 = safelySurrenderedBabiesEntity0.getComments();
        safelySurrenderedBabiesEntity0.setBraceletId("2019-09-03-15.53.08.988");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity4 = safelySurrenderedBabiesEntity0.getParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        java.lang.String str11 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date10);
        java.lang.String str12 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date10);
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person21 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity22 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity23 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person21, ethnicity22);
        java.util.Date date24 = personEthnicity23.getLastUpdatedTime();
        boolean boolean25 = personEthnicity19.equals((java.lang.Object) personEthnicity23);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity29 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity19.setEthnicity(ethnicity29);
        java.util.Date date31 = personEthnicity19.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship32 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date10, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date31);
        java.lang.String str33 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date10);
        java.util.Date date34 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date10);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date10);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date10);
        safelySurrenderedBabiesEntity0.setMedQuestionaireReturnDate(date10);
        java.lang.String str38 = safelySurrenderedBabiesEntity0.getParentGuardGivenBraceletId();
        safelySurrenderedBabiesEntity0.setParentGuardProvMedQuestion("2019-09-03T15:53:13.317Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(participantEntity4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "2019-09-03" + "'", str11.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "2019-09-03" + "'", str12.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date24);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date31);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str33 + "' != '" + "2019-09-03T15:53:43.575Z" + "'", str33.equals("2019-09-03T15:53:43.575Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str35 + "' != '" + "15:53:43" + "'", str35.equals("15:53:43"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "2019-09-03T15:53:43.575-0700" + "'", str36.equals("2019-09-03T15:53:43.575-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        race6.setSubRaceType("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        boolean boolean39 = race6.equals((java.lang.Object) "N");
        gov.ca.cwds.data.persistence.ns.Race race42 = new gov.ca.cwds.data.persistence.ns.Race(race6, "2019-09-03T15:53:16.789Z", "2019-09-03T15:53:22.232Z");
        boolean boolean44 = race6.equals((java.lang.Object) "2019-09-03-15.53.27.650");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber2 = new gov.ca.cwds.rest.api.domain.PhoneNumber("2019-09-03T15:53:15.370Z", "2019-09-03T15:53:04.320-0700");
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getParticipantId();
        csecEntity0.setId((java.lang.Integer) 1);
        java.time.LocalDate localDate5 = null;
        csecEntity0.setEndDate(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person5 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity7 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person5, ethnicity6);
        java.util.Date date8 = personEthnicity7.getLastUpdatedTime();
        boolean boolean9 = personEthnicity3.equals((java.lang.Object) personEthnicity7);
        boolean boolean11 = personEthnicity3.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId12 = personEthnicity3.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity17 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity18 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person13, ethnicity17);
        personEthnicityId12.setEthnicity(ethnicity17);
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity20 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity17);
        gov.ca.cwds.data.persistence.ns.Person person21 = null;
        personEthnicity20.setPerson(person21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date8);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId12);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        participantEntity0.setDateOfBirth(date5);
        java.lang.String str8 = participantEntity0.toString();
        participantEntity0.setProbationYouth((java.lang.Boolean) false);
        participantEntity0.setLegacySourceTable("15:53:35");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:43.703Z" + "'", str6.equals("2019-09-03T15:53:43.703Z"));
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person13, ethnicity14);
        java.util.Date date16 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        boolean boolean21 = personEthnicity15.equals((java.lang.Object) personEthnicity19);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity15.setEthnicity(ethnicity25);
        java.util.Date date27 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship28 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date6, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date27);
        gov.ca.cwds.data.persistence.ns.Person person30 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity32 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person30, ethnicity31);
        java.util.Date date33 = personEthnicity32.getLastUpdatedTime();
        java.util.Date date34 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date34);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date34);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity41 = null;
        java.lang.String[] strArray46 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity47 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean48 = participantEntity47.getProbationYouth();
        participantEntity47.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity47.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray53 = participantEntity47.getLanguages();
        java.lang.String[] strArray54 = participantEntity47.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity66 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date27, date34, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity41, "2019-09-03-15.52.58.871", strArray46, strArray54, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity67 = participantEntity66.getScreening();
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity68 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship69 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship69.setLastUpdatedId("");
        java.lang.String str72 = clientRelationship69.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship73 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date74 = clientRelationship73.getLastUpdatedTime();
        boolean boolean75 = clientRelationship69.equals((java.lang.Object) date74);
        java.util.Date date76 = clientRelationship69.getLastUpdatedTime();
        java.util.Date date77 = clientRelationship69.getEndDate();
        java.lang.String str78 = clientRelationship69.getLastUpdatedId();
        boolean boolean79 = safelySurrenderedBabiesEntity68.equals((java.lang.Object) clientRelationship69);
        participantEntity66.setSafelySurrenderedBabies(safelySurrenderedBabiesEntity68);
        safelySurrenderedBabiesEntity68.setBraceletId("2019-09-03-15.53.25.802");
        java.lang.String str83 = safelySurrenderedBabiesEntity68.getParticipantId();
        safelySurrenderedBabiesEntity68.setParticipantId("2019-09-03T15:53:30.502Z");
        java.lang.String str86 = safelySurrenderedBabiesEntity68.getSurrenderedBy();
        safelySurrenderedBabiesEntity68.setSurrenderedBy("2019-09-03T15:53:08.733-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str29 + "' != '" + "2019-09-03T15:53:43.729-0700" + "'", str29.equals("2019-09-03T15:53:43.729-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str35 + "' != '" + "15:53:43" + "'", str35.equals("15:53:43"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "2019-09-03T15:53:43.729-0700" + "'", str36.equals("2019-09-03T15:53:43.729-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "" + "'", str78.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        participantEntity0.setSsn("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        java.lang.String str8 = participantEntity0.getId();
        java.util.Date date10 = gov.ca.cwds.rest.api.domain.DomainChef.uncookISO8601Timestamp("2019-09-03T15:53:05.518Z");
        participantEntity0.setDateOfBirth(date10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:05 PDT 2019");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.String str1 = csecEntity0.getParticipantId();
        java.time.LocalDate localDate2 = null;
        csecEntity0.setEndDate(localDate2);
        csecEntity0.setParticipantId("2019-09-03T15:53:16.062Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getParticipantId();
        java.lang.Integer int3 = csecEntity0.getId();
        java.io.Serializable serializable4 = csecEntity0.getPrimaryKey();
        csecEntity0.setCsecCodeId("2019-09-03T15:53:08.285-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable4);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimestampString("00001");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"00001\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity40 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType42 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role43 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity44 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean45 = participantEntity44.getProbationYouth();
        participantEntity44.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity44.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray50 = participantEntity44.getLanguages();
        java.lang.Object obj51 = stringArrayType42.assemble((java.io.Serializable) role43, (java.lang.Object) strArray50);
        java.lang.Class<java.lang.String[]> strArrayClass52 = stringArrayType42.returnedClass();
        java.sql.ResultSet resultSet53 = null;
        java.lang.String[] strArray59 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor60 = null;
        java.lang.Object obj62 = stringArrayType42.nullSafeGet(resultSet53, strArray59, sharedSessionContractImplementor60, (java.lang.Object) 1);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity63 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean64 = participantEntity63.getProbationYouth();
        participantEntity63.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity63.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray69 = participantEntity63.getLanguages();
        java.lang.String[] strArray70 = participantEntity63.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity82 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("hi!", date5, date12, "2019-09-03-15.53.07.205", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.05.703", "yyyy-MM-dd-HH.mm.ss.SSS", screeningEntity40, "yyyy-MM-dd HH:mm:ss.SSS", strArray59, strArray70, "", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:08.733-0700", "", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", (java.lang.Boolean) false, (java.lang.Boolean) false, (java.lang.Boolean) true, "2019-09-03T15:53:08.733-0700", "15:53:08", (java.lang.Boolean) true);
        gov.ca.cwds.data.persistence.ns.Person person83 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity84 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity85 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person83, ethnicity84);
        java.util.Date date86 = personEthnicity85.getLastUpdatedTime();
        java.util.Date date87 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date86);
        java.lang.String str88 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date86);
        java.lang.String str89 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date86);
        java.util.Date date90 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date86);
        java.util.Date date91 = gov.ca.cwds.rest.api.domain.DomainChef.concatenateDateAndTime(date12, date90);
        java.util.Date date92 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date90);
        java.lang.String str93 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:43.871Z" + "'", str6.equals("2019-09-03T15:53:43.871Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "2019-09-03" + "'", str35.equals("2019-09-03"));
        org.junit.Assert.assertTrue("'" + role43 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role43.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj51.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date86);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date86.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date87);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date87.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str88 + "' != '" + "2019-09-03-15.53.43.873" + "'", str88.equals("2019-09-03-15.53.43.873"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "2019-09-03" + "'", str89.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date90);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date90.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date91);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date91.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date92);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date92.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str93 + "' != '" + "15:53:43" + "'", str93.equals("15:53:43"));
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getApproximateAgeUnits();
        java.lang.String[] strArray2 = participantEntity0.getLanguages();
        participantEntity0.setEstimatedDob((java.lang.Boolean) false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor0.setId("2019-09-03-15.52.55.282");
        java.lang.String str3 = legacyDescriptor0.getUiId();
        boolean boolean5 = legacyDescriptor0.equals((java.lang.Object) "2019-09-03T15:53:17.143Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor6 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter7 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role1, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor6);
        java.lang.String str8 = hOIReporter7.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role9 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter15 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role9, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor14);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role16 = hOIReporter15.getRole();
        boolean boolean17 = hOIReporter7.equals((java.lang.Object) hOIReporter15);
        boolean boolean18 = csecEntity0.equals((java.lang.Object) hOIReporter15);
        java.io.Serializable serializable19 = csecEntity0.getPrimaryKey();
        csecEntity0.setCsecCodeId("");
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03-15.52.55.282" + "'", str8.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role16 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role16.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable19);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 1L, "2019-09-03-15.52.55.282", "");
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        boolean boolean7 = participantEntity0.equals((java.lang.Object) '4');
        java.lang.String str8 = participantEntity0.getGender();
        participantEntity0.setLastName("2019-09-03-15.53.05.294");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity13 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean14 = participantEntity13.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray15 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList16 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList16, csecEntityArray15);
        participantEntity13.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList16);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity19 = participantEntity13.getScreening();
        java.lang.String str20 = participantEntity13.getScreeningId();
        java.lang.String str21 = participantEntity13.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity22 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        java.util.Date date27 = personEthnicity25.getCreateDateTime();
        java.lang.String str28 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date27);
        participantEntity22.setDateOfBirth(date27);
        participantEntity13.setDateOfDeath(date27);
        gov.ca.cwds.data.persistence.ns.Person person35 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity36 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity37 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person35, ethnicity36);
        java.util.Date date38 = personEthnicity37.getLastUpdatedTime();
        java.util.Date date39 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date38);
        java.lang.String str40 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date39);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship41 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (java.lang.Short) (short) -1, date27, "15:53:04", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "15:53:07", date39);
        participantEntity0.setDateOfDeath(date39);
        java.lang.String str43 = participantEntity0.getScreeningId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str28 + "' != '" + "2019-09-03T15:53:43.998Z" + "'", str28.equals("2019-09-03T15:53:43.998Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date38);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Sep 03 15:53:43 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str40 + "' != '" + "15:53:43" + "'", str40.equals("15:53:43"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity10 = participantEntity0.getScreeningEntity();
        participantEntity0.setId("2019-09-03T15:53:15.533-0700");
        java.lang.String str13 = participantEntity0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03T15:53:15.533-0700" + "'", str13.equals("2019-09-03T15:53:15.533-0700"));
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.Boolean boolean2 = participantEntity0.getProbationYouth();
        participantEntity0.setApproximateAge("2019-09-03-15.53.10.189");
        java.lang.String[] strArray5 = participantEntity0.getLanguages();
        java.lang.Boolean boolean6 = participantEntity0.getSealed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean6);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        java.lang.String str3 = clientRelationship0.getLastUpdatedId();
        java.util.Date date4 = clientRelationship0.getLastUpdatedTime();
        java.lang.Short short5 = clientRelationship0.getClientRelationshipType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(short5);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        java.util.Date date4 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date3);
        java.lang.String str5 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date3);
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date3);
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date3);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date3);
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str5 + "' != '" + "2019-09-03-15.53.44.085" + "'", str5.equals("2019-09-03-15.53.44.085"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03" + "'", str6.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03T15:53:44.085Z" + "'", str7.equals("2019-09-03T15:53:44.085Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03T15:53:44.085-0700" + "'", str8.equals("2019-09-03T15:53:44.085-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "2019-09-03" + "'", str9.equals("2019-09-03"));
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId0 = new gov.ca.cwds.data.persistence.ns.PersonEthnicityId();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity1 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean2 = participantEntity1.getProbationYouth();
        participantEntity1.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity1.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String str7 = participantEntity1.getEthnicity();
        boolean boolean8 = personEthnicityId0.equals((java.lang.Object) participantEntity1);
        participantEntity1.setApproximateAgeUnits("2019-09-03-15.53.38.754");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        participantEntity0.setRelatedScreeningId("15:52:59");
        java.lang.String[] strArray14 = participantEntity0.getRoles();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity15 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity15.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str18 = participantEntity15.getPrimaryKey();
        java.lang.String[] strArray19 = participantEntity15.getRoles();
        participantEntity0.setLanguages(strArray19);
        java.lang.String str21 = participantEntity0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "_n" + "'", str21.equals("_n"));
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        java.lang.String str11 = address8.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter12 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        boolean boolean13 = address8.equals((java.lang.Object) hOIReporter12);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor14.setId("2019-09-03-15.52.55.282");
        hOIReporter12.setLegacyDescriptor(legacyDescriptor14);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity18 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean19 = participantEntity18.getProbationYouth();
        participantEntity18.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity18.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        participantEntity18.setSsn("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity26 = participantEntity18.getScreening();
        boolean boolean27 = legacyDescriptor14.equals((java.lang.Object) participantEntity18);
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType28 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship29 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship29.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role32 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean33 = stringJsonUserType28.equals((java.lang.Object) "", (java.lang.Object) role32);
        boolean boolean34 = legacyDescriptor14.equals((java.lang.Object) stringJsonUserType28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str11.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + role32 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role32.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        java.lang.Boolean boolean3 = participantEntity0.getProbationYouth();
        participantEntity0.setProbationYouth((java.lang.Boolean) true);
        java.lang.Boolean boolean6 = participantEntity0.getProbationYouth();
        java.lang.String str7 = participantEntity0.getNameSuffix();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6.equals(true));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimeString("2019-09-03-15.53.05.294");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03-15.53.05.294\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.lang.String str12 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str13 = safelySurrenderedBabiesEntity0.getParentGuardGivenBraceletId();
        java.lang.String str14 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str15 = safelySurrenderedBabiesEntity0.getParentGuardGivenBraceletId();
        java.io.Serializable serializable16 = safelySurrenderedBabiesEntity0.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable16);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        java.lang.String str11 = personEthnicity2.getCreateUserId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter12 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray20 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet21 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet21, addressArray20);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray23 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet24, phoneNumberArray23);
        gov.ca.cwds.rest.api.domain.Language[] languageArray26 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet27 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet27, languageArray26);
        gov.ca.cwds.rest.api.domain.Race[] raceArray29 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet30 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet30, raceArray29);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity34 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray35 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity34 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet36 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet36, ethnicityArray35);
        gov.ca.cwds.rest.api.domain.Person person38 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet21, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet24, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet27, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet30, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet36);
        boolean boolean39 = hOIReporter12.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        boolean boolean40 = personEthnicity2.equals((java.lang.Object) boolean39);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity41 = null;
        personEthnicity2.setEthnicity(ethnicity41);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity45 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList46 = ethnicity45.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity49 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity45, "Anonymous Reporter", "N");
        java.lang.String str50 = ethnicity45.getEthnicityType();
        boolean boolean52 = ethnicity45.equals((java.lang.Object) ' ');
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity55 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity45, "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
        java.lang.String str56 = ethnicity55.getSubEthnicity();
        java.lang.String str57 = ethnicity55.getEthnicityType();
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet58 = ethnicity55.getPersonEthnicity();
        personEthnicity2.setEthnicity(ethnicity55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str50.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str56.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str57.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet58);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimeString("2019-09-03T15:53:36.251Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03T15:53:36.251Z\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getRaces();
        java.lang.Boolean boolean2 = participantEntity0.getSealed();
        java.lang.String str3 = participantEntity0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.util.Date date2 = participantEntity0.getDateOfBirth();
        participantEntity0.setLegacySourceTable("2019-09-03-15.53.15.533");
        participantEntity0.setApproximateAgeUnits("2019-09-03-15.53.43.086");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date2);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.getFirstName();
        java.lang.String str30 = hOIReporter0.toString();
        hOIReporter0.setFirstName("Y");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor40 = null;
        gov.ca.cwds.rest.api.domain.Address address41 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor40);
        java.lang.String str42 = address41.getCity();
        address41.setLegacyId("");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage45 = null;
        address41.addMessage(errorMessage45);
        java.lang.String str47 = address41.getLegacyId();
        address41.setLegacySourceTable("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str50 = address41.getStreetAddress();
        boolean boolean51 = hOIReporter0.equals((java.lang.Object) address41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str42.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "" + "'", str47.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str50.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        java.lang.String str2 = participantEntity0.getNameSuffix();
        participantEntity0.setGender("2019-09-03T15:53:23.114Z");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity5 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        java.lang.String str6 = safelySurrenderedBabiesEntity5.getComments();
        safelySurrenderedBabiesEntity5.setBraceletId("2019-09-03-15.53.08.988");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity9 = safelySurrenderedBabiesEntity5.getParticipantEntity();
        safelySurrenderedBabiesEntity5.setSurrenderedBy("2019-09-03T15:53:04.984-0700");
        safelySurrenderedBabiesEntity5.setBraceletId("2019-09-03-15.53.08.733");
        participantEntity0.setSafelySurrenderedBabies(safelySurrenderedBabiesEntity5);
        java.lang.String str15 = safelySurrenderedBabiesEntity5.getBraceletId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(participantEntity9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03-15.53.08.733" + "'", str15.equals("2019-09-03-15.53.08.733"));
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.lang.String str12 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str13 = safelySurrenderedBabiesEntity0.getParentGuardGivenBraceletId();
        java.lang.String str14 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str15 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        safelySurrenderedBabiesEntity0.setParentGuardProvMedQuestion("15:53:40");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.lang.Integer int1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookZipcodeString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1.equals(0));
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookStrictTimestampString("2019-09-03-15.53.27.721");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03-15.53.27.721\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        address8.setLegacyId("");
        java.lang.String str12 = address8.getLegacyId();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity15 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList16 = ethnicity15.getMessages();
        address8.setMessages(errorMessageList16);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter18 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role19 = hOIReporter18.getRole();
        java.lang.String str20 = hOIReporter18.getId();
        java.lang.String str21 = hOIReporter18.toJson();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor22 = hOIReporter18.getLegacyDescriptor();
        java.lang.String str23 = legacyDescriptor22.getTableDescription();
        address8.setLegacyDescriptor(legacyDescriptor22);
        java.lang.Integer int25 = address8.getState();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str21.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25.equals(100));
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        java.lang.Long long4 = race3.getPrimaryKey();
        java.lang.Long long5 = race3.getPrimaryKey();
        java.lang.Long long6 = race3.getId();
        java.lang.String str7 = race3.getRaceType();
        java.lang.Long long8 = race3.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8.equals(0L));
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getApproximateAge();
        java.lang.Boolean boolean9 = participantEntity0.getSensitive();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getRaces();
        java.lang.Boolean boolean2 = participantEntity0.getSealed();
        participantEntity0.setLegacyId("2019-09-03T15:53:25.974Z");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity5 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean6 = participantEntity5.getProbationYouth();
        participantEntity5.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity5.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray11 = participantEntity5.getLanguages();
        java.lang.String[] strArray12 = participantEntity5.getLanguages();
        participantEntity0.setRoles(strArray12);
        java.lang.String str14 = participantEntity0.getSsn();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity4 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean5 = participantEntity4.getProbationYouth();
        participantEntity4.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date8 = null;
        participantEntity4.setDateOfBirth(date8);
        participantEntity4.setId("_n");
        participantEntity4.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity4.setId("_n");
        java.lang.String str16 = participantEntity4.getScreeningId();
        boolean boolean17 = ethnicity2.equals((java.lang.Object) participantEntity4);
        java.lang.String str18 = participantEntity4.getId();
        participantEntity4.setNameSuffix("2019-09-03T15:53:41.540-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "_n" + "'", str18.equals("_n"));
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person13, ethnicity14);
        java.util.Date date16 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        boolean boolean21 = personEthnicity15.equals((java.lang.Object) personEthnicity19);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity15.setEthnicity(ethnicity25);
        java.util.Date date27 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship28 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date6, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date27);
        gov.ca.cwds.data.persistence.ns.Person person30 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity32 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person30, ethnicity31);
        java.util.Date date33 = personEthnicity32.getLastUpdatedTime();
        java.util.Date date34 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date34);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date34);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity41 = null;
        java.lang.String[] strArray46 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity47 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean48 = participantEntity47.getProbationYouth();
        participantEntity47.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity47.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray53 = participantEntity47.getLanguages();
        java.lang.String[] strArray54 = participantEntity47.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity66 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date27, date34, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity41, "2019-09-03-15.52.58.871", strArray46, strArray54, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity67 = participantEntity66.getScreening();
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity68 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship69 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship69.setLastUpdatedId("");
        java.lang.String str72 = clientRelationship69.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship73 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date74 = clientRelationship73.getLastUpdatedTime();
        boolean boolean75 = clientRelationship69.equals((java.lang.Object) date74);
        java.util.Date date76 = clientRelationship69.getLastUpdatedTime();
        java.util.Date date77 = clientRelationship69.getEndDate();
        java.lang.String str78 = clientRelationship69.getLastUpdatedId();
        boolean boolean79 = safelySurrenderedBabiesEntity68.equals((java.lang.Object) clientRelationship69);
        participantEntity66.setSafelySurrenderedBabies(safelySurrenderedBabiesEntity68);
        safelySurrenderedBabiesEntity68.setBraceletId("2019-09-03-15.53.25.802");
        java.lang.String str83 = safelySurrenderedBabiesEntity68.getParticipantId();
        safelySurrenderedBabiesEntity68.setParticipantId("2019-09-03T15:53:30.502Z");
        java.lang.String str86 = safelySurrenderedBabiesEntity68.getComments();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str29 + "' != '" + "2019-09-03T15:53:44.560-0700" + "'", str29.equals("2019-09-03T15:53:44.560-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str35 + "' != '" + "15:53:44" + "'", str35.equals("15:53:44"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "2019-09-03T15:53:44.560-0700" + "'", str36.equals("2019-09-03T15:53:44.560-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "" + "'", str78.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 1L, "yyyy-MM-dd-HH.mm.ss.SSS", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity5 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean6 = participantEntity5.getProbationYouth();
        participantEntity5.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity5.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray11 = participantEntity5.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity12 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean13 = participantEntity12.getProbationYouth();
        participantEntity12.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date16 = null;
        participantEntity12.setDateOfBirth(date16);
        participantEntity12.setId("_n");
        boolean boolean20 = participantEntity5.equals((java.lang.Object) "_n");
        boolean boolean21 = phoneNumber4.equals((java.lang.Object) boolean20);
        phoneNumber4.setId((java.lang.Long) 0L);
        java.lang.String str24 = phoneNumber4.getExtension();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str24.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("HH:mm:ss", "15:52:54");
        java.lang.String str3 = ethnicity2.getEthnicityType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "15:53:10", "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "HH:mm:ss" + "'", str3.equals("HH:mm:ss"));
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        java.lang.String str3 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor4 = hOIReporter0.getLegacyDescriptor();
        java.lang.String str5 = legacyDescriptor4.getTableDescription();
        legacyDescriptor4.setTableName("2019-09-03T15:53:23.704Z");
        org.joda.time.DateTime dateTime8 = legacyDescriptor4.getLastUpdated();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str3.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(dateTime8);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        java.lang.Class class39 = stringJsonUserType0.returnedClass();
        java.sql.PreparedStatement preparedStatement40 = null;
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor43 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringJsonUserType0.nullSafeSet(preparedStatement40, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", (int) (byte) -1, sharedSessionContractImplementor43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class39);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        gov.ca.cwds.rest.api.domain.cms.ClientRelationship clientRelationship1 = null;
        java.util.Date date4 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimeString("15:53:05");
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("{\"absentParentCode\":\"HH:mm:ss\",\"clientRelationshipType\":0,\"endDate\":1567551211852,\"id\":\"Non-mandated Reporter\",\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":\"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId\",\"primaryKey\":\"Non-mandated Reporter\",\"sameHomeCode\":\"\",\"secondaryClientId\":\"15:52:54\",\"startDate\":1567551211852}", clientRelationship1, "2019-09-03-15.53.38.754", date4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 15:53:05 PST 1970");
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor0.setId("2019-09-03-15.52.55.282");
        java.lang.String str3 = legacyDescriptor0.getUiId();
        legacyDescriptor0.setTableDescription("15:52:54");
        org.joda.time.DateTime dateTime6 = null;
        legacyDescriptor0.setLastUpdated(dateTime6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person13, ethnicity14);
        java.util.Date date16 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        boolean boolean21 = personEthnicity15.equals((java.lang.Object) personEthnicity19);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity15.setEthnicity(ethnicity25);
        java.util.Date date27 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship28 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date6, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date27);
        gov.ca.cwds.data.persistence.ns.Person person30 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity32 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person30, ethnicity31);
        java.util.Date date33 = personEthnicity32.getLastUpdatedTime();
        java.util.Date date34 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date34);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date34);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity41 = null;
        java.lang.String[] strArray46 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity47 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean48 = participantEntity47.getProbationYouth();
        participantEntity47.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity47.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray53 = participantEntity47.getLanguages();
        java.lang.String[] strArray54 = participantEntity47.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity66 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date27, date34, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity41, "2019-09-03-15.52.58.871", strArray46, strArray54, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity67 = participantEntity66.getScreening();
        participantEntity66.setApproximateAgeUnits("00010");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str29 + "' != '" + "2019-09-03T15:53:44.751-0700" + "'", str29.equals("2019-09-03T15:53:44.751-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str35 + "' != '" + "15:53:44" + "'", str35.equals("15:53:44"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "2019-09-03T15:53:44.752-0700" + "'", str36.equals("2019-09-03T15:53:44.752-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity67);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.String str1 = csecEntity0.getParticipantId();
        java.lang.Integer int2 = csecEntity0.getId();
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType3 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean4 = stringJsonUserType3.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race8 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race9 = new gov.ca.cwds.rest.api.domain.Race(race8);
        java.lang.String str10 = race9.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray18 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet19, addressArray18);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray21 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet22, phoneNumberArray21);
        gov.ca.cwds.rest.api.domain.Language[] languageArray24 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet25, languageArray24);
        gov.ca.cwds.rest.api.domain.Race[] raceArray27 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet28, raceArray27);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity32 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray33 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity32 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet34, ethnicityArray33);
        gov.ca.cwds.rest.api.domain.Person person36 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet34);
        java.lang.String str37 = person36.getSsn();
        boolean boolean38 = stringJsonUserType3.equals((java.lang.Object) race9, (java.lang.Object) str37);
        java.lang.String str39 = race9.getSubRaceType();
        gov.ca.cwds.data.persistence.ns.Race race42 = new gov.ca.cwds.data.persistence.ns.Race(race9, "2019-09-03-15.52.59.761", "2019-09-03-15.53.05.703");
        boolean boolean43 = csecEntity0.equals((java.lang.Object) race9);
        java.lang.String str44 = csecEntity0.getCsecCodeId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str10.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str37.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str39.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        java.util.Date date4 = personEthnicity2.getCreateDateTime();
        gov.ca.cwds.data.persistence.ns.Person person5 = personEthnicity2.getPerson();
        gov.ca.cwds.data.persistence.ns.Person person6 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity9 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList10 = ethnicity9.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity9, "Anonymous Reporter", "N");
        java.lang.String str14 = ethnicity13.getSubEthnicity();
        java.util.Date date15 = ethnicity13.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity16 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person6, ethnicity13);
        java.lang.Long long17 = ethnicity13.getPrimaryKey();
        personEthnicity2.setEthnicity(ethnicity13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str14.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date15);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long17);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setFirstName("2019-09-03-15.52.55.282");
        java.lang.Boolean boolean9 = participantEntity0.getSensitive();
        participantEntity0.setProbationYouth((java.lang.Boolean) true);
        participantEntity0.setId("2019-09-03T15:53:08.732Z");
        java.lang.String str14 = participantEntity0.getApproximateAgeUnits();
        participantEntity0.setApproximateAgeUnits("2019-09-03T15:53:17.174Z");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity17 = null;
        participantEntity0.setScreeningEntity(screeningEntity17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str14.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        java.lang.String str3 = clientRelationship0.getLastUpdatedId();
        java.lang.Short short4 = clientRelationship0.getClientRelationshipType();
        java.lang.String str5 = clientRelationship0.toJson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(short4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{\"absentParentCode\":null,\"clientRelationshipType\":null,\"endDate\":null,\"id\":null,\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":null,\"primaryKey\":null,\"sameHomeCode\":\"\",\"secondaryClientId\":null,\"startDate\":null}" + "'", str5.equals("{\"absentParentCode\":null,\"clientRelationshipType\":null,\"endDate\":null,\"id\":null,\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":null,\"primaryKey\":null,\"sameHomeCode\":\"\",\"secondaryClientId\":null,\"startDate\":null}"));
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.lang.String str12 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        safelySurrenderedBabiesEntity0.setParentGuardProvMedQuestion("{\"id\":\"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\",\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}");
        java.lang.String str15 = safelySurrenderedBabiesEntity0.getBraceletId();
        java.util.Date date16 = safelySurrenderedBabiesEntity0.getMedQuestionaireReturnDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date16);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity0 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.rest.api.domain.Ethnicity ethnicity1 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person2 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity4 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person2, ethnicity3);
        java.util.Date date5 = personEthnicity4.getLastUpdatedTime();
        java.util.Date date6 = personEthnicity4.getCreateDateTime();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        java.util.Date date11 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date10);
        java.lang.String str12 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date10);
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date10);
        java.util.Date date14 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date10);
        boolean boolean15 = personEthnicity4.equals((java.lang.Object) date10);
        clientRelationship0.setLastUpdatedTime(date10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date11);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str12 + "' != '" + "2019-09-03-15.53.44.970" + "'", str12.equals("2019-09-03-15.53.44.970"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:44 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        gov.ca.cwds.data.persistence.ns.Person person14 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity15 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity16 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person14, ethnicity15);
        java.util.Date date17 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person18 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity19 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity20 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person18, ethnicity19);
        java.util.Date date21 = personEthnicity20.getLastUpdatedTime();
        boolean boolean22 = personEthnicity16.equals((java.lang.Object) personEthnicity20);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity16.setEthnicity(ethnicity26);
        java.util.Date date28 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship29 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date7, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date28);
        java.lang.String str30 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date7);
        java.lang.String str31 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date7);
        gov.ca.cwds.data.persistence.ns.Person person36 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity37 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity38 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person36, ethnicity37);
        java.util.Date date39 = personEthnicity38.getLastUpdatedTime();
        java.util.Date date40 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        java.lang.String str41 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date39);
        java.lang.String str42 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date39);
        java.util.Date date43 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship44 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("HH:mm:ss", (java.lang.Short) (short) 0, date7, "15:52:54", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "Non-mandated Reporter", "", date43);
        java.lang.String str45 = clientRelationship44.getSecondaryClientId();
        java.lang.String str46 = clientRelationship44.toJson();
        clientRelationship44.setLastUpdatedId("2019-09-03T15:53:11.111-0700");
        java.util.Date date49 = clientRelationship44.getStartDate();
        java.lang.String str50 = clientRelationship44.toJson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "2019-09-03" + "'", str9.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date17);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date21);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str30 + "' != '" + "2019-09-03T15:53:45.020Z" + "'", str30.equals("2019-09-03T15:53:45.020Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str31 + "' != '" + "15:53:45" + "'", str31.equals("15:53:45"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date40);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str41 + "' != '" + "2019-09-03-15.53.45.020" + "'", str41.equals("2019-09-03-15.53.45.020"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "2019-09-03" + "'", str42.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date43);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "15:52:54" + "'", str45.equals("15:52:54"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str46 + "' != '" + "{\"absentParentCode\":\"HH:mm:ss\",\"clientRelationshipType\":0,\"endDate\":1567551225020,\"id\":\"Non-mandated Reporter\",\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":\"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId\",\"primaryKey\":\"Non-mandated Reporter\",\"sameHomeCode\":\"\",\"secondaryClientId\":\"15:52:54\",\"startDate\":1567551225020}" + "'", str46.equals("{\"absentParentCode\":\"HH:mm:ss\",\"clientRelationshipType\":0,\"endDate\":1567551225020,\"id\":\"Non-mandated Reporter\",\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":\"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId\",\"primaryKey\":\"Non-mandated Reporter\",\"sameHomeCode\":\"\",\"secondaryClientId\":\"15:52:54\",\"startDate\":1567551225020}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date49);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str50 + "' != '" + "{\"absentParentCode\":\"HH:mm:ss\",\"clientRelationshipType\":0,\"endDate\":1567551225020,\"id\":\"Non-mandated Reporter\",\"lastUpdatedId\":\"2019-09-03T15:53:11.111-0700\",\"lastUpdatedTime\":null,\"primaryClientId\":\"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId\",\"primaryKey\":\"Non-mandated Reporter\",\"sameHomeCode\":\"\",\"secondaryClientId\":\"15:52:54\",\"startDate\":1567551225020}" + "'", str50.equals("{\"absentParentCode\":\"HH:mm:ss\",\"clientRelationshipType\":0,\"endDate\":1567551225020,\"id\":\"Non-mandated Reporter\",\"lastUpdatedId\":\"2019-09-03T15:53:11.111-0700\",\"lastUpdatedTime\":null,\"primaryClientId\":\"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId\",\"primaryKey\":\"Non-mandated Reporter\",\"sameHomeCode\":\"\",\"secondaryClientId\":\"15:52:54\",\"startDate\":1567551225020}"));
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor2 = hOIReporter0.getLegacyDescriptor();
        java.lang.String str3 = hOIReporter0.getNameSuffix();
        hOIReporter0.setNameSuffix("2019-09-03-15.53.35.927");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getCsecCodeId();
        csecEntity0.setCsecCodeId("2019-09-03-15.52.59.761");
        csecEntity0.setParticipantId("2019-09-03T15:53:33.863Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.util.Date date0 = null;
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person13, ethnicity14);
        java.util.Date date16 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        boolean boolean21 = personEthnicity15.equals((java.lang.Object) personEthnicity19);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity15.setEthnicity(ethnicity25);
        java.util.Date date27 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship28 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date6, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.util.Date date30 = null; // flaky: gov.ca.cwds.rest.api.domain.DomainChef.concatenateDateAndTime(date0, date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "2019-09-03" + "'", str29.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:45 PDT 2019");
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        java.lang.Boolean boolean3 = participantEntity0.getProbationYouth();
        participantEntity0.setId("2019-09-03-15.53.32.057");
        java.lang.String str6 = participantEntity0.getScreeningId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        participantEntity0.setGender("yyyy-MM-dd HH:mm:ss.SSS");
        participantEntity0.setLegacySourceTable("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity11 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity12 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity11);
        java.util.Date date13 = personEthnicity12.getLastUpdatedTime();
        java.util.Date date14 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date13);
        participantEntity0.setDateOfBirth(date13);
        participantEntity0.setScreeningId("2019-09-03-15.53.07.205");
        java.lang.String str18 = participantEntity0.getId();
        java.lang.String str19 = participantEntity0.getRaces();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray4 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList5 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList5, csecEntityArray4);
        participantEntity2.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList5);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity8 = participantEntity2.getScreening();
        java.lang.String str9 = participantEntity2.getScreeningId();
        java.lang.String str10 = participantEntity2.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity11 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person12 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity14 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person12, ethnicity13);
        java.util.Date date15 = personEthnicity14.getLastUpdatedTime();
        java.util.Date date16 = personEthnicity14.getCreateDateTime();
        java.lang.String str17 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date16);
        participantEntity11.setDateOfBirth(date16);
        participantEntity2.setDateOfDeath(date16);
        gov.ca.cwds.data.persistence.ns.Person person24 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity26 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person24, ethnicity25);
        java.util.Date date27 = personEthnicity26.getLastUpdatedTime();
        java.util.Date date28 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date28);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship30 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (java.lang.Short) (short) -1, date16, "15:53:04", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "15:53:07", date28);
        java.lang.String str31 = clientRelationship30.getLastUpdatedId();
        java.lang.String str32 = clientRelationship30.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date15);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str17 + "' != '" + "2019-09-03T15:53:45.177Z" + "'", str17.equals("2019-09-03T15:53:45.177Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str29 + "' != '" + "15:53:45" + "'", str29.equals("15:53:45"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str32.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getRaces();
        java.lang.Boolean boolean2 = participantEntity0.getSealed();
        participantEntity0.setLegacyId("2019-09-03T15:53:25.974Z");
        java.lang.String str5 = participantEntity0.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity6 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean7 = participantEntity6.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray8 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList9 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList9, csecEntityArray8);
        participantEntity6.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList9);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity12 = participantEntity6.getScreening();
        java.lang.String str13 = participantEntity6.getScreeningId();
        participantEntity6.setLastName("2019-09-03T15:52:59.197-0700");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship16 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship16.setLastUpdatedId("");
        boolean boolean19 = participantEntity6.equals((java.lang.Object) "");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity20 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean21 = participantEntity20.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray22 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList23 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList23, csecEntityArray22);
        participantEntity20.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList23);
        participantEntity6.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList23);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setScreeningId("00001");
        java.lang.Boolean boolean10 = participantEntity0.getSealed();
        java.lang.String str11 = participantEntity0.getSsn();
        participantEntity0.setEstimatedDob((java.lang.Boolean) true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        java.lang.String str3 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter4 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray12 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet13 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet13, addressArray12);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray15 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet16, phoneNumberArray15);
        gov.ca.cwds.rest.api.domain.Language[] languageArray18 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet19, languageArray18);
        gov.ca.cwds.rest.api.domain.Race[] raceArray21 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet22, raceArray21);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity26 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray27 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity26 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet28, ethnicityArray27);
        gov.ca.cwds.rest.api.domain.Person person30 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet13, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet28);
        boolean boolean31 = hOIReporter4.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role32 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        hOIReporter4.setRole(role32);
        java.lang.String str34 = role32.toString();
        hOIReporter0.setRole(role32);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role36 = hOIReporter0.getRole();
        java.lang.String str37 = role36.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str3.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + role32 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role32.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Non-mandated Reporter" + "'", str34.equals("Non-mandated Reporter"));
        org.junit.Assert.assertTrue("'" + role36 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role36.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Non-mandated Reporter" + "'", str37.equals("Non-mandated Reporter"));
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getApproximateAgeUnits();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        participantEntity0.setSealed((java.lang.Boolean) true);
        participantEntity0.setEstimatedDob((java.lang.Boolean) true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        gov.ca.cwds.data.persistence.ns.Person person14 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity15 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity16 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person14, ethnicity15);
        java.util.Date date17 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person18 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity19 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity20 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person18, ethnicity19);
        java.util.Date date21 = personEthnicity20.getLastUpdatedTime();
        boolean boolean22 = personEthnicity16.equals((java.lang.Object) personEthnicity20);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity16.setEthnicity(ethnicity26);
        java.util.Date date28 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship29 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date7, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date28);
        java.lang.String str30 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date7);
        java.lang.String str31 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date7);
        gov.ca.cwds.data.persistence.ns.Person person36 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity37 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity38 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person36, ethnicity37);
        java.util.Date date39 = personEthnicity38.getLastUpdatedTime();
        java.util.Date date40 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        java.lang.String str41 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date39);
        java.lang.String str42 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date39);
        java.util.Date date43 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship44 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("HH:mm:ss", (java.lang.Short) (short) 0, date7, "15:52:54", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "Non-mandated Reporter", "", date43);
        java.lang.String str45 = clientRelationship44.getSecondaryClientId();
        java.lang.String str46 = clientRelationship44.toJson();
        clientRelationship44.setLastUpdatedId("2019-09-03T15:53:11.111-0700");
        java.util.Date date49 = clientRelationship44.getStartDate();
        java.util.Date date50 = clientRelationship44.getLastUpdatedTime();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "2019-09-03" + "'", str9.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date17);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date21);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str30 + "' != '" + "2019-09-03T15:53:45.303Z" + "'", str30.equals("2019-09-03T15:53:45.303Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str31 + "' != '" + "15:53:45" + "'", str31.equals("15:53:45"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date40);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str41 + "' != '" + "2019-09-03-15.53.45.303" + "'", str41.equals("2019-09-03-15.53.45.303"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "2019-09-03" + "'", str42.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date43);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "15:52:54" + "'", str45.equals("15:52:54"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str46 + "' != '" + "{\"absentParentCode\":\"HH:mm:ss\",\"clientRelationshipType\":0,\"endDate\":1567551225303,\"id\":\"Non-mandated Reporter\",\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":\"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId\",\"primaryKey\":\"Non-mandated Reporter\",\"sameHomeCode\":\"\",\"secondaryClientId\":\"15:52:54\",\"startDate\":1567551225303}" + "'", str46.equals("{\"absentParentCode\":\"HH:mm:ss\",\"clientRelationshipType\":0,\"endDate\":1567551225303,\"id\":\"Non-mandated Reporter\",\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":\"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId\",\"primaryKey\":\"Non-mandated Reporter\",\"sameHomeCode\":\"\",\"secondaryClientId\":\"15:52:54\",\"startDate\":1567551225303}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date49);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date50);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId11 = personEthnicity2.getPrimaryKey();
        java.io.Serializable serializable12 = personEthnicityId11.getPrimaryKey();
        boolean boolean14 = personEthnicityId11.equals((java.lang.Object) "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.data.persistence.ns.Person person15 = personEthnicityId11.getPerson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person15);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        java.lang.String str3 = clientRelationship0.getLastUpdatedId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship4.setLastUpdatedId("");
        clientRelationship4.setLastUpdatedId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        boolean boolean9 = clientRelationship0.relatedTo(clientRelationship4);
        java.lang.String str10 = clientRelationship4.getLastUpdatedId();
        boolean boolean12 = clientRelationship4.equals((java.lang.Object) (short) 10);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship13 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship13.setLastUpdatedId("");
        java.lang.String str16 = clientRelationship13.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship17 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date18 = clientRelationship17.getLastUpdatedTime();
        boolean boolean19 = clientRelationship13.equals((java.lang.Object) date18);
        java.lang.Short short20 = clientRelationship13.getClientRelationshipType();
        boolean boolean21 = clientRelationship4.relatedTo(clientRelationship13);
        gov.ca.cwds.data.persistence.ns.Person person22 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity23 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity24 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person22, ethnicity23);
        java.util.Date date25 = personEthnicity24.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person26 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity27 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity28 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person26, ethnicity27);
        java.util.Date date29 = personEthnicity28.getLastUpdatedTime();
        boolean boolean30 = personEthnicity24.equals((java.lang.Object) personEthnicity28);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity34 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity24.setEthnicity(ethnicity34);
        java.util.Date date36 = personEthnicity24.getLastUpdatedTime();
        java.lang.String str37 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date36);
        clientRelationship4.setLastUpdatedTime(date36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str10.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(short20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date25);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date29);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str37 + "' != '" + "2019-09-03-15.53.45.385" + "'", str37.equals("2019-09-03-15.53.45.385"));
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        hOIReporter0.setId("N");
        java.lang.String str4 = hOIReporter0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getParticipantId();
        java.time.LocalDate localDate3 = null;
        csecEntity0.setStartDate(localDate3);
        java.lang.String str5 = csecEntity0.getCsecCodeId();
        csecEntity0.setCsecCodeId("2019-09-03-15.53.10.189");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getNameSuffix();
        java.util.Set<gov.ca.cwds.rest.api.domain.Address> addressSet30 = person25.getAddress();
        java.util.Set<gov.ca.cwds.rest.api.domain.Address> addressSet31 = person25.getAddress();
        boolean boolean32 = person25.hasMessages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressSet30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressSet31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity40 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType42 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role43 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity44 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean45 = participantEntity44.getProbationYouth();
        participantEntity44.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity44.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray50 = participantEntity44.getLanguages();
        java.lang.Object obj51 = stringArrayType42.assemble((java.io.Serializable) role43, (java.lang.Object) strArray50);
        java.lang.Class<java.lang.String[]> strArrayClass52 = stringArrayType42.returnedClass();
        java.sql.ResultSet resultSet53 = null;
        java.lang.String[] strArray59 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor60 = null;
        java.lang.Object obj62 = stringArrayType42.nullSafeGet(resultSet53, strArray59, sharedSessionContractImplementor60, (java.lang.Object) 1);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity63 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean64 = participantEntity63.getProbationYouth();
        participantEntity63.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity63.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray69 = participantEntity63.getLanguages();
        java.lang.String[] strArray70 = participantEntity63.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity82 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("hi!", date5, date12, "2019-09-03-15.53.07.205", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.05.703", "yyyy-MM-dd-HH.mm.ss.SSS", screeningEntity40, "yyyy-MM-dd HH:mm:ss.SSS", strArray59, strArray70, "", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:08.733-0700", "", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", (java.lang.Boolean) false, (java.lang.Boolean) false, (java.lang.Boolean) true, "2019-09-03T15:53:08.733-0700", "15:53:08", (java.lang.Boolean) true);
        gov.ca.cwds.data.persistence.ns.Person person83 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity84 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity85 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person83, ethnicity84);
        java.util.Date date86 = personEthnicity85.getLastUpdatedTime();
        java.util.Date date87 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date86);
        java.lang.String str88 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date86);
        java.lang.String str89 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date86);
        java.util.Date date90 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date86);
        java.util.Date date91 = gov.ca.cwds.rest.api.domain.DomainChef.concatenateDateAndTime(date12, date90);
        java.util.Date date92 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:45.481Z" + "'", str6.equals("2019-09-03T15:53:45.481Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "2019-09-03" + "'", str35.equals("2019-09-03"));
        org.junit.Assert.assertTrue("'" + role43 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role43.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj51.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date86);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date86.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date87);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date87.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str88 + "' != '" + "2019-09-03-15.53.45.484" + "'", str88.equals("2019-09-03-15.53.45.484"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "2019-09-03" + "'", str89.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date90);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date90.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date91);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date91.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date92);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date92.toString(), "Tue Sep 03 15:53:45 PDT 2019");
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor7);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship9 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date10 = clientRelationship9.getLastUpdatedTime();
        java.lang.String str11 = clientRelationship9.getSecondaryClientId();
        gov.ca.cwds.data.persistence.ns.Person person12 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity14 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person12, ethnicity13);
        java.util.Date date15 = personEthnicity14.getLastUpdatedTime();
        java.lang.String str16 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date15);
        java.lang.String str17 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date15);
        clientRelationship9.setLastUpdatedTime(date15);
        boolean boolean19 = address8.equals((java.lang.Object) date15);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter20 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role21 = hOIReporter20.getRole();
        java.lang.String str22 = hOIReporter20.getId();
        java.lang.String str23 = hOIReporter20.toJson();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor24 = hOIReporter20.getLegacyDescriptor();
        address8.setLegacyDescriptor(legacyDescriptor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date15);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "2019-09-03" + "'", str16.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "2019-09-03" + "'", str17.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str23.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor24);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        java.lang.Object obj9 = stringArrayType0.assemble((java.io.Serializable) role1, (java.lang.Object) strArray8);
        java.lang.Class<java.lang.String[]> strArrayClass10 = stringArrayType0.returnedClass();
        java.sql.ResultSet resultSet11 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity12 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean13 = participantEntity12.getProbationYouth();
        participantEntity12.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date16 = null;
        participantEntity12.setDateOfBirth(date16);
        participantEntity12.setId("_n");
        participantEntity12.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity12.setId("_n");
        java.lang.String str24 = participantEntity12.getScreeningId();
        participantEntity12.setFirstName("15:53:10");
        java.lang.String[] strArray27 = participantEntity12.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor28 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity29 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean30 = participantEntity29.getProbationYouth();
        participantEntity29.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date33 = null;
        participantEntity29.setDateOfBirth(date33);
        participantEntity29.setId("_n");
        participantEntity29.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity29.setId("_n");
        java.lang.String str41 = participantEntity29.getScreeningId();
        participantEntity29.setFirstName("15:53:10");
        java.lang.String str44 = participantEntity29.getRelatedScreeningId();
        java.lang.Object obj45 = stringArrayType0.nullSafeGet(resultSet11, strArray27, sharedSessionContractImplementor28, (java.lang.Object) participantEntity29);
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj45);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.lang.String str12 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        safelySurrenderedBabiesEntity0.setParentGuardProvMedQuestion("{\"id\":\"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\",\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}");
        java.lang.String str15 = safelySurrenderedBabiesEntity0.getBraceletId();
        java.lang.String str16 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        safelySurrenderedBabiesEntity0.setParentGuardProvMedQuestion("2019-09-03T15:53:16.062Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity4 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean5 = participantEntity4.getProbationYouth();
        participantEntity4.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date8 = null;
        participantEntity4.setDateOfBirth(date8);
        participantEntity4.setId("_n");
        participantEntity4.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity4.setId("_n");
        java.lang.String str16 = participantEntity4.getScreeningId();
        boolean boolean17 = ethnicity2.equals((java.lang.Object) participantEntity4);
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber22 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId", "2019-09-03-15.52.55.282", "_n");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList23 = phoneNumber22.getMessages();
        ethnicity2.setMessages(errorMessageList23);
        java.lang.String str25 = ethnicity2.getSubEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str25.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        java.lang.String str1 = safelySurrenderedBabiesEntity0.getComments();
        safelySurrenderedBabiesEntity0.setBraceletId("2019-09-03-15.53.08.988");
        safelySurrenderedBabiesEntity0.setRelationToChild("15:53:13");
        safelySurrenderedBabiesEntity0.setBraceletId("yyyy-_m_m-dd _h_h:mm:ss._s_s_s");
        java.lang.String str8 = safelySurrenderedBabiesEntity0.getRelationToChild();
        java.lang.String str9 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "15:53:13" + "'", str8.equals("15:53:13"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter30 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray38 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet39 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet39, addressArray38);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray41 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet42 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, phoneNumberArray41);
        gov.ca.cwds.rest.api.domain.Language[] languageArray44 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet45 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet45, languageArray44);
        gov.ca.cwds.rest.api.domain.Race[] raceArray47 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet48 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet48, raceArray47);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity52 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray53 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity52 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet54 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54, ethnicityArray53);
        gov.ca.cwds.rest.api.domain.Person person56 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet39, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet45, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet48, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54);
        boolean boolean57 = hOIReporter30.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str58 = hOIReporter30.getLastName();
        java.lang.String str59 = hOIReporter30.getFirstName();
        hOIReporter30.setId("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType62 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship63 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship63.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role66 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean67 = stringJsonUserType62.equals((java.lang.Object) "", (java.lang.Object) role66);
        hOIReporter30.setRole(role66);
        hOIReporter0.setRole(role66);
        hOIReporter0.setLastName("{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str29.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + role66 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role66.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        java.lang.String str1 = legacyDescriptor0.getUiId();
        legacyDescriptor0.setTableName("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s_z");
        legacyDescriptor0.setUiId("Non-mandated Reporter");
        legacyDescriptor0.setId("15:53:30");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        clientRelationship0.setLastUpdatedTime(date6);
        java.util.Date date10 = clientRelationship0.getStartDate();
        java.util.Date date11 = clientRelationship0.getStartDate();
        java.lang.String str12 = clientRelationship0.getLastUpdatedId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("2019-09-03T15:53:09.087Z", "yyyy-MM-dd-HH.mm.ss.SSS");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "", "2019-09-03T15:53:36.305-0700");
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimeString("2019-09-03T15:53:13.177Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03T15:53:13.177Z\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String str3 = race2.getSubRaceType();
        java.lang.String str4 = race2.getRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str3.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str4.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str3 = participantEntity0.getId();
        java.lang.String str4 = participantEntity0.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getScreeningId();
        participantEntity0.setLegacySourceTable("2019-09-03T15:53:13.008-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        gov.ca.cwds.data.persistence.ns.Person person14 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity15 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity16 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person14, ethnicity15);
        java.util.Date date17 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person18 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity19 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity20 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person18, ethnicity19);
        java.util.Date date21 = personEthnicity20.getLastUpdatedTime();
        boolean boolean22 = personEthnicity16.equals((java.lang.Object) personEthnicity20);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity16.setEthnicity(ethnicity26);
        java.util.Date date28 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship29 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date7, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date28);
        java.lang.String str30 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date7);
        java.lang.String str31 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date7);
        gov.ca.cwds.data.persistence.ns.Person person36 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity37 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity38 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person36, ethnicity37);
        java.util.Date date39 = personEthnicity38.getLastUpdatedTime();
        java.util.Date date40 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        java.lang.String str41 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date39);
        java.lang.String str42 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date39);
        java.util.Date date43 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship44 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("HH:mm:ss", (java.lang.Short) (short) 0, date7, "15:52:54", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "Non-mandated Reporter", "", date43);
        java.lang.String str45 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "2019-09-03" + "'", str9.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date17);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date21);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str30 + "' != '" + "2019-09-03T15:53:45.908Z" + "'", str30.equals("2019-09-03T15:53:45.908Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str31 + "' != '" + "15:53:45" + "'", str31.equals("15:53:45"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date40);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str41 + "' != '" + "2019-09-03-15.53.45.908" + "'", str41.equals("2019-09-03-15.53.45.908"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "2019-09-03" + "'", str42.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date43);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str45 + "' != '" + "2019-09-03T15:53:45.908-0700" + "'", str45.equals("2019-09-03T15:53:45.908-0700"));
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getStartDate();
        java.lang.String str2 = clientRelationship0.toJson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "{\"absentParentCode\":null,\"clientRelationshipType\":null,\"endDate\":null,\"id\":null,\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":null,\"primaryKey\":null,\"sameHomeCode\":\"\",\"secondaryClientId\":null,\"startDate\":null}" + "'", str2.equals("{\"absentParentCode\":null,\"clientRelationshipType\":null,\"endDate\":null,\"id\":null,\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":null,\"primaryKey\":null,\"sameHomeCode\":\"\",\"secondaryClientId\":null,\"startDate\":null}"));
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        gov.ca.cwds.data.persistence.ns.Person person14 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity15 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity16 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person14, ethnicity15);
        java.util.Date date17 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person18 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity19 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity20 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person18, ethnicity19);
        java.util.Date date21 = personEthnicity20.getLastUpdatedTime();
        boolean boolean22 = personEthnicity16.equals((java.lang.Object) personEthnicity20);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity16.setEthnicity(ethnicity26);
        java.util.Date date28 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship29 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date7, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date28);
        java.lang.String str30 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date7);
        java.lang.String str31 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date7);
        gov.ca.cwds.data.persistence.ns.Person person36 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity37 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity38 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person36, ethnicity37);
        java.util.Date date39 = personEthnicity38.getLastUpdatedTime();
        java.util.Date date40 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        java.lang.String str41 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date39);
        java.lang.String str42 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date39);
        java.util.Date date43 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date39);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship44 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("HH:mm:ss", (java.lang.Short) (short) 0, date7, "15:52:54", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "Non-mandated Reporter", "", date43);
        java.lang.String str45 = clientRelationship44.getSecondaryClientId();
        java.lang.String str46 = clientRelationship44.toJson();
        clientRelationship44.setLastUpdatedId("2019-09-03T15:53:11.111-0700");
        java.util.Date date49 = clientRelationship44.getStartDate();
        java.lang.String str50 = clientRelationship44.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "2019-09-03" + "'", str9.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date17);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date21);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str30 + "' != '" + "2019-09-03T15:53:45.999Z" + "'", str30.equals("2019-09-03T15:53:45.999Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str31 + "' != '" + "15:53:45" + "'", str31.equals("15:53:45"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date40);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str41 + "' != '" + "2019-09-03-15.53.45.999" + "'", str41.equals("2019-09-03-15.53.45.999"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "2019-09-03" + "'", str42.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date43);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "15:52:54" + "'", str45.equals("15:52:54"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str46 + "' != '" + "{\"absentParentCode\":\"HH:mm:ss\",\"clientRelationshipType\":0,\"endDate\":1567551225999,\"id\":\"Non-mandated Reporter\",\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":\"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId\",\"primaryKey\":\"Non-mandated Reporter\",\"sameHomeCode\":\"\",\"secondaryClientId\":\"15:52:54\",\"startDate\":1567551225999}" + "'", str46.equals("{\"absentParentCode\":\"HH:mm:ss\",\"clientRelationshipType\":0,\"endDate\":1567551225999,\"id\":\"Non-mandated Reporter\",\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":\"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId\",\"primaryKey\":\"Non-mandated Reporter\",\"sameHomeCode\":\"\",\"secondaryClientId\":\"15:52:54\",\"startDate\":1567551225999}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date49);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Sep 03 15:53:45 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Non-mandated Reporter" + "'", str50.equals("Non-mandated Reporter"));
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        csecEntity0.setParticipantId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds");
        java.lang.String str4 = csecEntity0.getCsecCodeId();
        csecEntity0.setParticipantId("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        java.lang.String str3 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor4 = hOIReporter0.getLegacyDescriptor();
        java.lang.String str5 = legacyDescriptor4.getTableDescription();
        legacyDescriptor4.setTableName("2019-09-03T15:53:23.704Z");
        java.lang.String str8 = legacyDescriptor4.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str3.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        java.lang.String str11 = personEthnicity2.getCreateUserId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter12 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray20 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet21 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet21, addressArray20);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray23 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet24, phoneNumberArray23);
        gov.ca.cwds.rest.api.domain.Language[] languageArray26 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet27 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet27, languageArray26);
        gov.ca.cwds.rest.api.domain.Race[] raceArray29 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet30 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet30, raceArray29);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity34 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray35 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity34 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet36 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet36, ethnicityArray35);
        gov.ca.cwds.rest.api.domain.Person person38 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet21, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet24, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet27, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet30, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet36);
        boolean boolean39 = hOIReporter12.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        boolean boolean40 = personEthnicity2.equals((java.lang.Object) boolean39);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity41 = personEthnicity2.getEthnicity();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity42 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int43 = csecEntity42.getId();
        csecEntity42.setId((java.lang.Integer) 10);
        csecEntity42.setCsecCodeId("Non-mandated Reporter");
        boolean boolean48 = personEthnicity2.equals((java.lang.Object) csecEntity42);
        csecEntity42.setParticipantId("2019-09-03-15.53.08.988");
        java.time.LocalDate localDate51 = null;
        csecEntity42.setEndDate(localDate51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ethnicity41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        java.lang.String str9 = participantEntity0.getLegacySourceTable();
        participantEntity0.setEstimatedDob((java.lang.Boolean) false);
        gov.ca.cwds.data.persistence.ns.Person person15 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity16 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity17 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person15, ethnicity16);
        java.util.Date date18 = personEthnicity17.getLastUpdatedTime();
        java.lang.String str19 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date18);
        java.lang.String str20 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date18);
        gov.ca.cwds.data.persistence.ns.Person person25 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity27 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person25, ethnicity26);
        java.util.Date date28 = personEthnicity27.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person29 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity30 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity31 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person29, ethnicity30);
        java.util.Date date32 = personEthnicity31.getLastUpdatedTime();
        boolean boolean33 = personEthnicity27.equals((java.lang.Object) personEthnicity31);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity37 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity27.setEthnicity(ethnicity37);
        java.util.Date date39 = personEthnicity27.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship40 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date18, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date39);
        java.lang.String str41 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date39);
        gov.ca.cwds.data.persistence.ns.Person person42 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity43 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity44 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person42, ethnicity43);
        java.util.Date date45 = personEthnicity44.getLastUpdatedTime();
        java.util.Date date46 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date45);
        java.lang.String str47 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date46);
        java.lang.String str48 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date46);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity53 = null;
        java.lang.String[] strArray58 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity59 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean60 = participantEntity59.getProbationYouth();
        participantEntity59.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity59.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray65 = participantEntity59.getLanguages();
        java.lang.String[] strArray66 = participantEntity59.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity78 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date39, date46, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity53, "2019-09-03-15.52.58.871", strArray58, strArray66, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        java.lang.Boolean boolean79 = participantEntity78.getProbationYouth();
        boolean boolean80 = participantEntity0.equals((java.lang.Object) participantEntity78);
        java.lang.String[] strArray81 = participantEntity0.getLanguages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date18);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "2019-09-03" + "'", str19.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "2019-09-03" + "'", str20.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date32);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str41 + "' != '" + "2019-09-03T15:53:46.115-0700" + "'", str41.equals("2019-09-03T15:53:46.115-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date45);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date46);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str47 + "' != '" + "15:53:46" + "'", str47.equals("15:53:46"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str48 + "' != '" + "2019-09-03T15:53:46.116-0700" + "'", str48.equals("2019-09-03T15:53:46.116-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79.equals(true));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity11 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int12 = csecEntity11.getId();
        java.lang.String str13 = csecEntity11.getParticipantId();
        boolean boolean14 = personEthnicity2.equals((java.lang.Object) str13);
        java.util.Date date15 = personEthnicity2.getCreateDateTime();
        gov.ca.cwds.data.persistence.ns.Person person16 = null;
        personEthnicity2.setPerson(person16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date15);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Sep 03 15:53:46 PDT 2019");
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity3 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList4 = ethnicity3.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity7 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity3, "Anonymous Reporter", "N");
        java.lang.String str8 = ethnicity3.getEthnicityType();
        boolean boolean10 = ethnicity3.equals((java.lang.Object) ' ');
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity3, "15:52:54", "00001");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity14 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity13);
        java.lang.String str15 = ethnicity13.getLastUpdatedId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str8.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "15:52:54" + "'", str15.equals("15:52:54"));
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        participantEntity0.setEstimatedDob((java.lang.Boolean) true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor3 = hOIReporter0.getLegacyDescriptor();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor4 = hOIReporter0.getLegacyDescriptor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor4);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        java.lang.String str47 = person42.getGender();
        java.util.Set<gov.ca.cwds.rest.api.domain.Race> raceSet48 = person42.getRace();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "hi!" + "'", str47.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceSet48);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        participantEntity0.setLegacyId("2019-09-03-15.53.29.969");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity8 = participantEntity0.getSafelySurrenderedBabies();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(safelySurrenderedBabiesEntity8);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        person25.doSomething();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race4 = new gov.ca.cwds.rest.api.domain.Race(race3);
        java.lang.Long long5 = race3.getPrimaryKey();
        java.util.Date date6 = race3.getLastUpdatedTime();
        java.lang.String str7 = race3.getCreateUserId();
        java.lang.String str8 = race3.getSubRaceType();
        java.lang.String str9 = race3.getLastUpdatedId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str8.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.joda.time.DateTime dateTime9 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor12 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor("2019-09-03T15:53:13.177Z", "2019-09-03T15:53:03.344Z", dateTime9, "2019-09-03T15:53:10.189Z", "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        gov.ca.cwds.rest.api.domain.Address address13 = new gov.ca.cwds.rest.api.domain.Address("", "2019-09-03-15.53.15.533", "2019-09-03T15:53:06.452-0700", "2019-09-03T15:53:05.518-0700", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", (java.lang.Integer) (-1), legacyDescriptor12);
        org.joda.time.DateTime dateTime14 = null;
        legacyDescriptor12.setLastUpdated(dateTime14);
        legacyDescriptor12.setTableName("2019-09-03-15.53.00.269");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.lang.String str12 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str13 = safelySurrenderedBabiesEntity0.getParentGuardGivenBraceletId();
        java.lang.String str14 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str15 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        safelySurrenderedBabiesEntity0.setBraceletId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str18 = safelySurrenderedBabiesEntity0.getComments();
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList23 = ethnicity22.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity22, "Anonymous Reporter", "N");
        java.lang.String str27 = ethnicity26.getSubEthnicity();
        java.util.Date date28 = ethnicity26.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity26);
        java.lang.Long long30 = ethnicity26.getPrimaryKey();
        java.lang.String str31 = ethnicity26.getLastUpdatedId();
        java.util.Date date32 = ethnicity26.getCreateDateTime();
        safelySurrenderedBabiesEntity0.setMedQuestionaireReturnDate(date32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str27.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Anonymous Reporter" + "'", str31.equals("Anonymous Reporter"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date32);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Sep 03 15:53:46 PDT 2019");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setScreeningId("00001");
        java.lang.Boolean boolean10 = participantEntity0.getSealed();
        participantEntity0.setProbationYouth((java.lang.Boolean) true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str5 = ethnicity4.getEthnicityType();
        java.lang.Long long6 = ethnicity4.getId();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        boolean boolean15 = personEthnicity9.equals((java.lang.Object) personEthnicity13);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId16 = personEthnicity13.getPrimaryKey();
        java.io.Serializable serializable17 = personEthnicityId16.getPrimaryKey();
        boolean boolean18 = stringArrayType0.equals((java.lang.Object) long6, (java.lang.Object) personEthnicityId16);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.lang.Long long33 = ethnicity31.getId();
        gov.ca.cwds.rest.api.domain.Address[] addressArray41 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet42 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet42, addressArray41);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray44 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet45 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet45, phoneNumberArray44);
        gov.ca.cwds.rest.api.domain.Language[] languageArray47 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet48 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet48, languageArray47);
        gov.ca.cwds.rest.api.domain.Race[] raceArray50 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet51 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet51, raceArray50);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity55 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray56 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity55 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet57 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet57, ethnicityArray56);
        gov.ca.cwds.rest.api.domain.Person person59 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet42, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet45, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet48, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet51, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet57);
        java.lang.String str60 = person59.getLastName();
        java.lang.String str61 = person59.getNameSuffix();
        java.lang.String str62 = person59.getMiddleName();
        java.lang.Object obj63 = stringArrayType0.assemble((java.io.Serializable) ethnicity31, (java.lang.Object) person59);
        java.lang.String str64 = person59.getNameSuffix();
        java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet65 = person59.getEthnicity();
        java.lang.String str66 = person59.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str60.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "" + "'", str61.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str62.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "" + "'", str64.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicitySet65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str66.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter30 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray38 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet39 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet39, addressArray38);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray41 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet42 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, phoneNumberArray41);
        gov.ca.cwds.rest.api.domain.Language[] languageArray44 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet45 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet45, languageArray44);
        gov.ca.cwds.rest.api.domain.Race[] raceArray47 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet48 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet48, raceArray47);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity52 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray53 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity52 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet54 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54, ethnicityArray53);
        gov.ca.cwds.rest.api.domain.Person person56 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet39, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet45, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet48, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54);
        boolean boolean57 = hOIReporter30.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str58 = hOIReporter30.getLastName();
        java.lang.String str59 = hOIReporter30.getFirstName();
        hOIReporter30.setId("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType62 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship63 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship63.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role66 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean67 = stringJsonUserType62.equals((java.lang.Object) "", (java.lang.Object) role66);
        hOIReporter30.setRole(role66);
        hOIReporter0.setRole(role66);
        hOIReporter0.setNameSuffix("2019-09-03T15:53:25.566Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str29.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + role66 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role66.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        address8.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter13 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray21 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet22, addressArray21);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray24 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, phoneNumberArray24);
        gov.ca.cwds.rest.api.domain.Language[] languageArray27 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet28, languageArray27);
        gov.ca.cwds.rest.api.domain.Race[] raceArray30 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet31, raceArray30);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity35 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray36 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity35 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet37 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37, ethnicityArray36);
        gov.ca.cwds.rest.api.domain.Person person39 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37);
        boolean boolean40 = hOIReporter13.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter13.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor50 = null;
        gov.ca.cwds.rest.api.domain.Address address51 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor50);
        java.lang.String str52 = address51.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor53 = address51.getLegacyDescriptor();
        hOIReporter13.setLegacyDescriptor(legacyDescriptor53);
        org.joda.time.DateTime dateTime55 = null;
        legacyDescriptor53.setLastUpdated(dateTime55);
        address8.setLegacyDescriptor(legacyDescriptor53);
        java.lang.String str58 = address8.getLegacyId();
        java.lang.Integer int59 = address8.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str52.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId" + "'", str58.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59.equals(0));
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor6 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter7 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role1, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor6);
        java.lang.String str8 = hOIReporter7.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role9 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter15 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role9, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor14);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role16 = hOIReporter15.getRole();
        boolean boolean17 = hOIReporter7.equals((java.lang.Object) hOIReporter15);
        boolean boolean18 = csecEntity0.equals((java.lang.Object) hOIReporter15);
        java.io.Serializable serializable19 = csecEntity0.getPrimaryKey();
        java.lang.Integer int20 = csecEntity0.getId();
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03-15.52.55.282" + "'", str8.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role16 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role16.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setFirstName("2019-09-03-15.52.55.282");
        java.lang.String str9 = participantEntity0.getRelatedScreeningId();
        participantEntity0.setSensitive((java.lang.Boolean) true);
        java.lang.String str12 = participantEntity0.getMiddleName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        participantEntity0.setGender("yyyy-MM-dd HH:mm:ss.SSS");
        participantEntity0.setLegacySourceTable("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity11 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity12 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity11);
        java.util.Date date13 = personEthnicity12.getLastUpdatedTime();
        java.util.Date date14 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date13);
        participantEntity0.setDateOfBirth(date13);
        java.lang.Boolean boolean16 = participantEntity0.getEstimatedDob();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean16);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity10 = participantEntity0.getScreeningEntity();
        participantEntity0.setEstimatedDob((java.lang.Boolean) false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity10);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        java.lang.String[] strArray7 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date14);
        java.lang.String str16 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date14);
        gov.ca.cwds.data.persistence.ns.Person person21 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity22 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity23 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person21, ethnicity22);
        java.util.Date date24 = personEthnicity23.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person25 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity27 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person25, ethnicity26);
        java.util.Date date28 = personEthnicity27.getLastUpdatedTime();
        boolean boolean29 = personEthnicity23.equals((java.lang.Object) personEthnicity27);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity33 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity23.setEthnicity(ethnicity33);
        java.util.Date date35 = personEthnicity23.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship36 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date14, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date35);
        java.lang.String str37 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date35);
        gov.ca.cwds.data.persistence.ns.Person person38 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity39 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity40 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person38, ethnicity39);
        java.util.Date date41 = personEthnicity40.getLastUpdatedTime();
        java.util.Date date42 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date41);
        java.lang.String str43 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date42);
        java.lang.String str44 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date42);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity49 = null;
        java.lang.String[] strArray54 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity55 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean56 = participantEntity55.getProbationYouth();
        participantEntity55.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity55.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray61 = participantEntity55.getLanguages();
        java.lang.String[] strArray62 = participantEntity55.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity74 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date35, date42, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity49, "2019-09-03-15.52.58.871", strArray54, strArray62, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        participantEntity0.setDateOfBirth(date35);
        java.lang.String str76 = participantEntity0.getMiddleName();
        java.lang.String str77 = participantEntity0.getLastName();
        gov.ca.cwds.data.persistence.ns.Person person78 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity79 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity80 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person78, ethnicity79);
        java.util.Date date81 = personEthnicity80.getLastUpdatedTime();
        java.util.Date date82 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date81);
        participantEntity0.setDateOfBirth(date82);
        java.lang.String str84 = participantEntity0.getMiddleName();
        java.lang.Boolean boolean85 = participantEntity0.getSealed();
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity86 = participantEntity0.getScreening();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03" + "'", str15.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "2019-09-03" + "'", str16.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date24);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date35);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str37 + "' != '" + "2019-09-03T15:53:46.698-0700" + "'", str37.equals("2019-09-03T15:53:46.698-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date41);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date42);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str43 + "' != '" + "15:53:46" + "'", str43.equals("15:53:46"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str44 + "' != '" + "2019-09-03T15:53:46.698-0700" + "'", str44.equals("2019-09-03T15:53:46.698-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str77.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date81);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date81.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date82);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date82.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity86);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray4 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList5 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList5, csecEntityArray4);
        participantEntity2.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList5);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity8 = participantEntity2.getScreening();
        java.lang.String str9 = participantEntity2.getScreeningId();
        java.lang.String str10 = participantEntity2.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity11 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person12 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity14 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person12, ethnicity13);
        java.util.Date date15 = personEthnicity14.getLastUpdatedTime();
        java.util.Date date16 = personEthnicity14.getCreateDateTime();
        java.lang.String str17 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date16);
        participantEntity11.setDateOfBirth(date16);
        participantEntity2.setDateOfDeath(date16);
        gov.ca.cwds.data.persistence.ns.Person person24 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity26 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person24, ethnicity25);
        java.util.Date date27 = personEthnicity26.getLastUpdatedTime();
        java.util.Date date28 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date28);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship30 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (java.lang.Short) (short) -1, date16, "15:53:04", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "15:53:07", date28);
        java.lang.String str31 = clientRelationship30.getLastUpdatedId();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity32 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean33 = participantEntity32.getProbationYouth();
        participantEntity32.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity32.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        participantEntity32.setSsn("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        java.lang.String str40 = participantEntity32.getApproximateAge();
        boolean boolean41 = clientRelationship30.equals((java.lang.Object) participantEntity32);
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber45 = new gov.ca.cwds.rest.api.domain.PhoneNumber("15:52:54", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId");
        boolean boolean47 = phoneNumber45.equals((java.lang.Object) (-1L));
        java.lang.String str48 = phoneNumber45.getNumber();
        boolean boolean49 = participantEntity32.equals((java.lang.Object) phoneNumber45);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity50 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean51 = participantEntity50.getProbationYouth();
        java.lang.String str52 = participantEntity50.getApproximateAgeUnits();
        java.lang.String str53 = participantEntity50.getScreeningId();
        participantEntity50.setSealed((java.lang.Boolean) true);
        boolean boolean56 = phoneNumber45.equals((java.lang.Object) true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date15);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str17 + "' != '" + "2019-09-03T15:53:46.759Z" + "'", str17.equals("2019-09-03T15:53:46.759Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str29 + "' != '" + "15:53:46" + "'", str29.equals("15:53:46"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "15:52:54" + "'", str48.equals("15:52:54"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity4 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean5 = participantEntity4.getProbationYouth();
        participantEntity4.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date8 = null;
        participantEntity4.setDateOfBirth(date8);
        participantEntity4.setId("_n");
        participantEntity4.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity4.setId("_n");
        java.lang.String str16 = participantEntity4.getScreeningId();
        boolean boolean17 = ethnicity2.equals((java.lang.Object) participantEntity4);
        java.lang.String str18 = participantEntity4.toString();
        java.lang.String str19 = participantEntity4.getSsn();
        java.lang.String[] strArray20 = null;
        participantEntity4.setLanguages(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        java.lang.String str1 = role0.toString();
        java.lang.String str2 = role0.getDescription();
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Anonymous Reporter" + "'", str1.equals("Anonymous Reporter"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Anonymous Reporter" + "'", str2.equals("Anonymous Reporter"));
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        int[] intArray2 = stringJsonUserType0.sqlTypes();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity3 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean4 = participantEntity3.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray5 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList6 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList6, csecEntityArray5);
        participantEntity3.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList6);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity9 = participantEntity3.getScreening();
        java.lang.String str10 = participantEntity3.getScreeningId();
        participantEntity3.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str13 = participantEntity3.getLegacyId();
        java.lang.Boolean boolean14 = participantEntity3.getEstimatedDob();
        java.lang.String str15 = participantEntity3.getSsn();
        participantEntity3.setApproximateAge("2019-09-03-15.53.05.703");
        java.util.Date date18 = participantEntity3.getDateOfDeath();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        java.lang.String str27 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date26);
        java.lang.String str28 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date26);
        gov.ca.cwds.data.persistence.ns.Person person33 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity34 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity35 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person33, ethnicity34);
        java.util.Date date36 = personEthnicity35.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person37 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity38 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity39 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person37, ethnicity38);
        java.util.Date date40 = personEthnicity39.getLastUpdatedTime();
        boolean boolean41 = personEthnicity35.equals((java.lang.Object) personEthnicity39);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity45 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity35.setEthnicity(ethnicity45);
        java.util.Date date47 = personEthnicity35.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship48 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date26, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date47);
        java.lang.String str49 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date26);
        java.lang.String str50 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date26);
        gov.ca.cwds.data.persistence.ns.Person person55 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity56 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity57 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person55, ethnicity56);
        java.util.Date date58 = personEthnicity57.getLastUpdatedTime();
        java.util.Date date59 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date58);
        java.lang.String str60 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date58);
        java.lang.String str61 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date58);
        java.util.Date date62 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date58);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship63 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("HH:mm:ss", (java.lang.Short) (short) 0, date26, "15:52:54", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "Non-mandated Reporter", "", date62);
        participantEntity3.setDateOfBirth(date26);
        gov.ca.cwds.rest.api.domain.Language language66 = new gov.ca.cwds.rest.api.domain.Language("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId");
        boolean boolean68 = language66.equals((java.lang.Object) 100);
        gov.ca.cwds.rest.api.domain.Address[] addressArray76 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet77 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet77, addressArray76);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray79 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet80 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet80, phoneNumberArray79);
        gov.ca.cwds.rest.api.domain.Language[] languageArray82 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet83 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet83, languageArray82);
        gov.ca.cwds.rest.api.domain.Race[] raceArray85 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet86 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet86, raceArray85);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity90 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray91 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity90 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet92 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet92, ethnicityArray91);
        gov.ca.cwds.rest.api.domain.Person person94 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet77, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet80, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet83, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet86, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet92);
        java.lang.String str95 = person94.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet96 = person94.getEthnicity();
        boolean boolean97 = language66.equals((java.lang.Object) ethnicitySet96);
        java.lang.Object obj98 = stringJsonUserType0.assemble((java.io.Serializable) date26, (java.lang.Object) ethnicitySet96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "2019-09-03" + "'", str27.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "2019-09-03" + "'", str28.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date40);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date47);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str49 + "' != '" + "2019-09-03T15:53:46.843Z" + "'", str49.equals("2019-09-03T15:53:46.843Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str50 + "' != '" + "15:53:46" + "'", str50.equals("15:53:46"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date58);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date59);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date59.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str60 + "' != '" + "2019-09-03-15.53.46.843" + "'", str60.equals("2019-09-03-15.53.46.843"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "2019-09-03" + "'", str61.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date62);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str95 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str95.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicitySet96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj98);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(obj98.toString(), "Tue Sep 03 15:53:46 PDT 2019");
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId11 = personEthnicity2.getPrimaryKey();
        java.io.Serializable serializable12 = personEthnicityId11.getPrimaryKey();
        boolean boolean14 = personEthnicityId11.equals((java.lang.Object) "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        java.io.Serializable serializable15 = personEthnicityId11.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person16 = null;
        personEthnicityId11.setPerson(person16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:46 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable15);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        address8.setLegacyId("");
        java.lang.String str12 = address8.getLegacyId();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity15 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList16 = ethnicity15.getMessages();
        address8.setMessages(errorMessageList16);
        java.lang.String str18 = address8.getZip();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "HH:mm:ss" + "'", str18.equals("HH:mm:ss"));
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str3 = participantEntity0.getId();
        java.lang.String[] strArray4 = participantEntity0.getRoles();
        participantEntity0.setRaces("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId");
        java.lang.String str7 = participantEntity0.getScreeningId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.time.LocalDate localDate1 = csecEntity0.getEndDate();
        csecEntity0.setCsecCodeId("2019-09-03T15:53:30.502Z");
        csecEntity0.setParticipantId("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate1);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String str6 = participantEntity0.getEthnicity();
        java.lang.String str7 = participantEntity0.getLegacySourceTable();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity10 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean11 = participantEntity10.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray12 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList13 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList13, csecEntityArray12);
        participantEntity10.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList13);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity16 = participantEntity10.getScreening();
        java.lang.String str17 = participantEntity10.getScreeningId();
        java.lang.String str18 = participantEntity10.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity19 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person20 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity21 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity22 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person20, ethnicity21);
        java.util.Date date23 = personEthnicity22.getLastUpdatedTime();
        java.util.Date date24 = personEthnicity22.getCreateDateTime();
        java.lang.String str25 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date24);
        participantEntity19.setDateOfBirth(date24);
        participantEntity10.setDateOfDeath(date24);
        gov.ca.cwds.data.persistence.ns.Person person32 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity33 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity34 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person32, ethnicity33);
        java.util.Date date35 = personEthnicity34.getLastUpdatedTime();
        java.util.Date date36 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date35);
        java.lang.String str37 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date36);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship38 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (java.lang.Short) (short) -1, date24, "15:53:04", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "15:53:07", date36);
        participantEntity0.setDateOfDeath(date36);
        java.lang.String str40 = participantEntity0.toString();
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity41 = null;
        participantEntity0.setScreeningEntity(screeningEntity41);
        java.lang.String str43 = participantEntity0.getApproximateAgeUnits();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date23);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date24);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str25 + "' != '" + "2019-09-03T15:53:47.014Z" + "'", str25.equals("2019-09-03T15:53:47.014Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date35);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str37 + "' != '" + "15:53:47" + "'", str37.equals("15:53:47"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        java.lang.String str1 = role0.toString();
        java.lang.String str2 = role0.toString();
        org.joda.time.DateTime dateTime16 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor19 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor("2019-09-03T15:53:13.177Z", "2019-09-03T15:53:03.344Z", dateTime16, "2019-09-03T15:53:10.189Z", "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        gov.ca.cwds.rest.api.domain.Address address20 = new gov.ca.cwds.rest.api.domain.Address("", "2019-09-03-15.53.15.533", "2019-09-03T15:53:06.452-0700", "2019-09-03T15:53:05.518-0700", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", (java.lang.Integer) (-1), legacyDescriptor19);
        org.joda.time.DateTime dateTime21 = null;
        legacyDescriptor19.setLastUpdated(dateTime21);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter23 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "2019-09-03T15:53:36.831Z", "2019-09-03T15:53:13.177Z", "2019-09-03T15:53:33.751-0700", "2019-09-03_t15:53:04.984-0700", legacyDescriptor19);
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Anonymous Reporter" + "'", str1.equals("Anonymous Reporter"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Anonymous Reporter" + "'", str2.equals("Anonymous Reporter"));
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        boolean boolean7 = participantEntity0.equals((java.lang.Object) '4');
        java.util.Date date8 = participantEntity0.getDateOfDeath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        java.lang.String str3 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date5 = clientRelationship4.getLastUpdatedTime();
        boolean boolean6 = clientRelationship0.equals((java.lang.Object) date5);
        java.lang.String str7 = clientRelationship0.getSameHomeCode();
        java.util.Date date8 = clientRelationship0.getStartDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getNameSuffix();
        java.util.Set<gov.ca.cwds.rest.api.domain.Address> addressSet30 = person25.getAddress();
        java.lang.String str31 = person25.getGender();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressSet30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "hi!" + "'", str31.equals("hi!"));
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.joda.time.DateTime dateTime2 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor("2019-09-03T15:53:36.251Z", "15:53:43", dateTime2, "2019-09-03T15:52:58.300-0700", "2019-09-03T15:53:23.483Z");
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        gov.ca.cwds.data.persistence.ns.Race race38 = new gov.ca.cwds.data.persistence.ns.Race(race6, "15:52:59", "2019-09-03T15:52:58.300-0700");
        gov.ca.cwds.data.persistence.ns.Race race41 = new gov.ca.cwds.data.persistence.ns.Race(race6, "2019-09-03T15:53:22.048Z", "{\"absentParentCode\":\"HH:mm:ss\",\"clientRelationshipType\":0,\"endDate\":1567551211852,\"id\":\"Non-mandated Reporter\",\"lastUpdatedId\":null,\"lastUpdatedTime\":null,\"primaryClientId\":\"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId\",\"primaryKey\":\"Non-mandated Reporter\",\"sameHomeCode\":\"\",\"secondaryClientId\":\"15:52:54\",\"startDate\":1567551211852}");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        csecEntity0.setParticipantId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity6 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList7 = ethnicity6.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity6, "Anonymous Reporter", "N");
        java.lang.String str11 = ethnicity10.getSubEthnicity();
        java.util.Date date12 = ethnicity10.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity10);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId14 = personEthnicity13.getPrimaryKey();
        boolean boolean15 = csecEntity0.equals((java.lang.Object) personEthnicityId14);
        java.time.LocalDate localDate16 = null;
        csecEntity0.setEndDate(localDate16);
        csecEntity0.setId((java.lang.Integer) 1);
        csecEntity0.setParticipantId("2019-09-03-15.53.29.969");
        java.time.LocalDate localDate22 = csecEntity0.getEndDate();
        java.lang.String str23 = csecEntity0.getCsecCodeId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str11.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.getFirstName();
        hOIReporter0.setId("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        hOIReporter0.setId("2019-09-03T15:53:20.723-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("_n", "");
        java.lang.String str3 = race2.getSubRaceType();
        race2.setSubRaceType("2019-09-03T15:53:18.993Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        java.lang.String str9 = participantEntity0.getLegacySourceTable();
        participantEntity0.setEstimatedDob((java.lang.Boolean) false);
        java.lang.String str12 = participantEntity0.getGender();
        java.lang.String[] strArray13 = participantEntity0.getRoles();
        java.lang.String str14 = participantEntity0.getPrimaryKey();
        java.lang.String str15 = participantEntity0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.String str10 = address8.getCity();
        address8.setLegacySourceTable("2019-09-03-15.52.58.871");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str10.equals("yyyy-MM-dd HH:mm:ss.SSS"));
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        address8.setLegacyId("");
        java.lang.String str12 = address8.getLegacyId();
        java.lang.Integer int13 = address8.getState();
        java.lang.Integer int14 = address8.getType();
        address8.setLegacySourceTable("2019-09-03T15:53:18.233Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13.equals(100));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14.equals(0));
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.toJson();
        java.lang.String str30 = hOIReporter0.getId();
        java.lang.String str31 = hOIReporter0.getLastName();
        java.lang.String str32 = hOIReporter0.getNameSuffix();
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType33 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet34 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity35 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean36 = participantEntity35.getProbationYouth();
        participantEntity35.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity35.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray41 = participantEntity35.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor42 = null;
        gov.ca.cwds.data.persistence.ns.Person person43 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity47 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity48 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person43, ethnicity47);
        java.lang.Object obj49 = stringArrayType33.nullSafeGet(resultSet34, strArray41, sharedSessionContractImplementor42, (java.lang.Object) personEthnicity48);
        gov.ca.cwds.rest.api.domain.Address[] addressArray57 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet58 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet58, addressArray57);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray60 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet61 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet61, phoneNumberArray60);
        gov.ca.cwds.rest.api.domain.Language[] languageArray63 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet64 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet64, languageArray63);
        gov.ca.cwds.rest.api.domain.Race[] raceArray66 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet67 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet67, raceArray66);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity71 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray72 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity71 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet73 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet73, ethnicityArray72);
        gov.ca.cwds.rest.api.domain.Person person75 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet58, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet61, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet64, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet67, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet73);
        java.lang.String str76 = person75.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet77 = person75.getPhoneNumber();
        java.lang.Object obj79 = stringArrayType33.assemble((java.io.Serializable) person75, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray80 = stringArrayType33.sqlTypes();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role81 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        java.io.Serializable serializable82 = stringArrayType33.disassemble((java.lang.Object) role81);
        hOIReporter0.setRole(role81);
        java.lang.String str84 = hOIReporter0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str29.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str76.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertTrue("'" + role81 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role81.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        org.junit.Assert.assertTrue("'" + serializable82 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", serializable82.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        java.lang.Long long4 = race3.getPrimaryKey();
        java.lang.String str5 = race3.getSubRaceType();
        java.lang.Long long6 = race3.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str5.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6.equals(0L));
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person13, ethnicity14);
        java.util.Date date16 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        boolean boolean21 = personEthnicity15.equals((java.lang.Object) personEthnicity19);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity15.setEthnicity(ethnicity25);
        java.util.Date date27 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship28 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date6, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date27);
        gov.ca.cwds.data.persistence.ns.Person person30 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity32 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person30, ethnicity31);
        java.util.Date date33 = personEthnicity32.getLastUpdatedTime();
        java.util.Date date34 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date34);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date34);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity41 = null;
        java.lang.String[] strArray46 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity47 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean48 = participantEntity47.getProbationYouth();
        participantEntity47.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity47.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray53 = participantEntity47.getLanguages();
        java.lang.String[] strArray54 = participantEntity47.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity66 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date27, date34, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity41, "2019-09-03-15.52.58.871", strArray46, strArray54, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity67 = participantEntity66.getScreening();
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity68 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship69 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship69.setLastUpdatedId("");
        java.lang.String str72 = clientRelationship69.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship73 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date74 = clientRelationship73.getLastUpdatedTime();
        boolean boolean75 = clientRelationship69.equals((java.lang.Object) date74);
        java.util.Date date76 = clientRelationship69.getLastUpdatedTime();
        java.util.Date date77 = clientRelationship69.getEndDate();
        java.lang.String str78 = clientRelationship69.getLastUpdatedId();
        boolean boolean79 = safelySurrenderedBabiesEntity68.equals((java.lang.Object) clientRelationship69);
        participantEntity66.setSafelySurrenderedBabies(safelySurrenderedBabiesEntity68);
        safelySurrenderedBabiesEntity68.setBraceletId("2019-09-03-15.53.25.802");
        java.lang.String str83 = safelySurrenderedBabiesEntity68.getParticipantId();
        safelySurrenderedBabiesEntity68.setParticipantId("2019-09-03T15:53:30.502Z");
        safelySurrenderedBabiesEntity68.setComments("2019-09-03-15.53.07.205");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str29 + "' != '" + "2019-09-03T15:53:47.385-0700" + "'", str29.equals("2019-09-03T15:53:47.385-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str35 + "' != '" + "15:53:47" + "'", str35.equals("15:53:47"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "2019-09-03T15:53:47.385-0700" + "'", str36.equals("2019-09-03T15:53:47.385-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "" + "'", str78.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("2019-09-03T15:53:22.721Z", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address15 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor14);
        gov.ca.cwds.rest.api.domain.Address address16 = new gov.ca.cwds.rest.api.domain.Address("N", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "2019-09-03T15:52:58.300-0700", (java.lang.Integer) (-1), "00001", (java.lang.Integer) 100, legacyDescriptor14);
        java.lang.String str17 = legacyDescriptor14.getId();
        java.lang.String str18 = legacyDescriptor14.getTableName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role28 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        hOIReporter0.setRole(role28);
        java.lang.String str30 = hOIReporter0.toString();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor31 = hOIReporter0.getLegacyDescriptor();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + role28 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role28.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor31);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        java.lang.String str1 = safelySurrenderedBabiesEntity0.getComments();
        safelySurrenderedBabiesEntity0.setBraceletId("2019-09-03-15.53.08.988");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity4 = safelySurrenderedBabiesEntity0.getParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        java.lang.String str11 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date10);
        java.lang.String str12 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date10);
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person21 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity22 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity23 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person21, ethnicity22);
        java.util.Date date24 = personEthnicity23.getLastUpdatedTime();
        boolean boolean25 = personEthnicity19.equals((java.lang.Object) personEthnicity23);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity29 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity19.setEthnicity(ethnicity29);
        java.util.Date date31 = personEthnicity19.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship32 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date10, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date31);
        java.lang.String str33 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date10);
        java.util.Date date34 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date10);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date10);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date10);
        safelySurrenderedBabiesEntity0.setMedQuestionaireReturnDate(date10);
        java.lang.String str38 = safelySurrenderedBabiesEntity0.getComments();
        safelySurrenderedBabiesEntity0.setRelationToChild("2019-09-03-15.53.43.538");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(participantEntity4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "2019-09-03" + "'", str11.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "2019-09-03" + "'", str12.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date24);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date31);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str33 + "' != '" + "2019-09-03T15:53:47.492Z" + "'", str33.equals("2019-09-03T15:53:47.492Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str35 + "' != '" + "15:53:47" + "'", str35.equals("15:53:47"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "2019-09-03T15:53:47.492-0700" + "'", str36.equals("2019-09-03T15:53:47.492-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getStartDate();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship2 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.lang.String str3 = clientRelationship2.getSameHomeCode();
        java.lang.String str4 = clientRelationship2.getAbsentParentCode();
        boolean boolean5 = clientRelationship0.relatedTo(clientRelationship2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.lang.String str12 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str13 = safelySurrenderedBabiesEntity0.getParentGuardGivenBraceletId();
        java.lang.String str14 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str15 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        safelySurrenderedBabiesEntity0.setBraceletId("2019-09-03T15:53:26.809Z");
        gov.ca.cwds.data.persistence.ns.Person person18 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity19 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity20 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person18, ethnicity19);
        java.util.Date date21 = personEthnicity20.getLastUpdatedTime();
        java.util.Date date22 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date21);
        java.lang.String str23 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date21);
        java.lang.String str24 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date21);
        java.lang.String str25 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date21);
        safelySurrenderedBabiesEntity0.setMedQuestionaireReturnDate(date21);
        java.lang.String str27 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date21);
        java.lang.String str28 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date21);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str23 + "' != '" + "2019-09-03-15.53.47.545" + "'", str23.equals("2019-09-03-15.53.47.545"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "2019-09-03" + "'", str24.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str25 + "' != '" + "2019-09-03T15:53:47.545Z" + "'", str25.equals("2019-09-03T15:53:47.545Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str27 + "' != '" + "2019-09-03-15.53.47.545" + "'", str27.equals("2019-09-03-15.53.47.545"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str28 + "' != '" + "2019-09-03T15:53:47.545Z" + "'", str28.equals("2019-09-03T15:53:47.545Z"));
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId9 = personEthnicity6.getPrimaryKey();
        java.io.Serializable serializable10 = personEthnicityId9.getPrimaryKey();
        java.io.Serializable serializable11 = personEthnicityId9.getPrimaryKey();
        java.io.Serializable serializable12 = personEthnicityId9.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable12);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        java.lang.String str1 = safelySurrenderedBabiesEntity0.getComments();
        safelySurrenderedBabiesEntity0.setBraceletId("2019-09-03-15.53.08.988");
        safelySurrenderedBabiesEntity0.setRelationToChild("15:53:13");
        safelySurrenderedBabiesEntity0.setBraceletId("yyyy-_m_m-dd _h_h:mm:ss._s_s_s");
        java.io.Serializable serializable8 = safelySurrenderedBabiesEntity0.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable8);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        java.lang.String[] strArray7 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person8 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity9 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity10 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person8, ethnicity9);
        java.util.Date date11 = personEthnicity10.getLastUpdatedTime();
        java.util.Date date12 = personEthnicity10.getCreateDateTime();
        participantEntity0.setDateOfDeath(date12);
        java.lang.String str14 = participantEntity0.getLegacyId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date11);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter0.setId("2019-09-03-15.53.25.802");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        java.lang.String str11 = address8.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter12 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        boolean boolean13 = address8.equals((java.lang.Object) hOIReporter12);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor14.setId("2019-09-03-15.52.55.282");
        hOIReporter12.setLegacyDescriptor(legacyDescriptor14);
        legacyDescriptor14.setTableDescription("2019-09-03T15:53:32.876-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str11.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("2019-09-03T15:53:45.020Z", "2019-09-03T15:53:46.115-0700");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        java.lang.String str3 = clientRelationship0.getLastUpdatedId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship4.setLastUpdatedId("");
        clientRelationship4.setLastUpdatedId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        boolean boolean9 = clientRelationship0.relatedTo(clientRelationship4);
        java.lang.String str10 = clientRelationship4.getSameHomeCode();
        gov.ca.cwds.data.persistence.ns.Race race14 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race15 = new gov.ca.cwds.rest.api.domain.Race(race14);
        java.lang.Long long16 = race14.getPrimaryKey();
        boolean boolean17 = clientRelationship4.equals((java.lang.Object) long16);
        java.util.Date date18 = clientRelationship4.getStartDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date18);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        java.lang.String str3 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor4 = hOIReporter0.getLegacyDescriptor();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role5 = hOIReporter0.getRole();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str3.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role5);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        address8.setLegacyId("");
        java.lang.String str12 = address8.getLegacyId();
        java.lang.Integer int13 = address8.getState();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity14 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean15 = participantEntity14.getProbationYouth();
        participantEntity14.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity14.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray20 = participantEntity14.getLanguages();
        participantEntity14.setFirstName("2019-09-03-15.52.55.282");
        java.lang.Boolean boolean23 = participantEntity14.getSensitive();
        participantEntity14.setApproximateAgeUnits("yyyy-MM-dd-HH.mm.ss.SSS");
        boolean boolean26 = address8.equals((java.lang.Object) "yyyy-MM-dd-HH.mm.ss.SSS");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13.equals(100));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        java.lang.Object obj9 = stringArrayType0.assemble((java.io.Serializable) role1, (java.lang.Object) strArray8);
        java.lang.Class<java.lang.String[]> strArrayClass10 = stringArrayType0.returnedClass();
        java.sql.ResultSet resultSet11 = null;
        java.lang.String[] strArray17 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor18 = null;
        java.lang.Object obj20 = stringArrayType0.nullSafeGet(resultSet11, strArray17, sharedSessionContractImplementor18, (java.lang.Object) 1);
        int[] intArray21 = stringArrayType0.sqlTypes();
        int[] intArray22 = stringArrayType0.sqlTypes();
        java.sql.PreparedStatement preparedStatement23 = null;
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship24 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date25 = clientRelationship24.getLastUpdatedTime();
        java.lang.String str26 = clientRelationship24.getSecondaryClientId();
        java.lang.String str27 = clientRelationship24.getLastUpdatedId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship28 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship28.setLastUpdatedId("");
        clientRelationship28.setLastUpdatedId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        boolean boolean33 = clientRelationship24.relatedTo(clientRelationship28);
        java.lang.String str34 = clientRelationship28.getLastUpdatedId();
        boolean boolean36 = clientRelationship28.equals((java.lang.Object) (short) 10);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship37 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship37.setLastUpdatedId("");
        java.lang.String str40 = clientRelationship37.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship41 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date42 = clientRelationship41.getLastUpdatedTime();
        boolean boolean43 = clientRelationship37.equals((java.lang.Object) date42);
        java.lang.Short short44 = clientRelationship37.getClientRelationshipType();
        boolean boolean45 = clientRelationship28.relatedTo(clientRelationship37);
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringArrayType0.nullSafeSet(preparedStatement23, (java.lang.Object) boolean45, (int) (byte) 100, sharedSessionContractImplementor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str34.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(short44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId11 = personEthnicity2.getPrimaryKey();
        java.util.Date date12 = personEthnicity2.getCreateDateTime();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:47 PDT 2019");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.lang.String str12 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        boolean boolean14 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) "2019-09-03-15.53.23.988");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        gov.ca.cwds.data.persistence.ns.Person person2 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity4 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person2, ethnicity3);
        java.util.Date date5 = personEthnicity4.getLastUpdatedTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date5);
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date5);
        gov.ca.cwds.data.persistence.ns.Person person12 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity14 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person12, ethnicity13);
        java.util.Date date15 = personEthnicity14.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person16 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity17 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity18 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person16, ethnicity17);
        java.util.Date date19 = personEthnicity18.getLastUpdatedTime();
        boolean boolean20 = personEthnicity14.equals((java.lang.Object) personEthnicity18);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity14.setEthnicity(ethnicity24);
        java.util.Date date26 = personEthnicity14.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship27 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date5, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date26);
        java.lang.String str28 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date5);
        java.lang.String str30 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        java.lang.String str31 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03" + "'", str6.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date15);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date19);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str28 + "' != '" + "2019-09-03T15:53:47.852Z" + "'", str28.equals("2019-09-03T15:53:47.852Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str29 + "' != '" + "2019-09-03T15:53:47.852-0700" + "'", str29.equals("2019-09-03T15:53:47.852-0700"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str30 + "' != '" + "2019-09-03T15:53:47.852Z" + "'", str30.equals("2019-09-03T15:53:47.852Z"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str31 + "' != '" + "15:53:47" + "'", str31.equals("15:53:47"));
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("2019-09-03T15:53:18.945-0700", "15:53:36");
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        java.lang.String[] strArray7 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person8 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity9 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity10 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person8, ethnicity9);
        java.util.Date date11 = personEthnicity10.getLastUpdatedTime();
        java.util.Date date12 = personEthnicity10.getCreateDateTime();
        participantEntity0.setDateOfDeath(date12);
        java.lang.String str14 = participantEntity0.toString();
        java.lang.String[] strArray15 = participantEntity0.getLanguages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date11);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray15);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getNameSuffix();
        java.lang.String str29 = person25.getSsn();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "" + "'", str28.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str29.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet37 = person25.getPhoneNumber();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList38 = person25.getMessages();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor46 = null;
        gov.ca.cwds.rest.api.domain.Address address47 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor46);
        java.lang.String str48 = address47.getCity();
        java.lang.Integer int49 = address47.getType();
        java.lang.String str50 = address47.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter51 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        boolean boolean52 = address47.equals((java.lang.Object) hOIReporter51);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor53 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor53.setId("2019-09-03-15.52.55.282");
        hOIReporter51.setLegacyDescriptor(legacyDescriptor53);
        boolean boolean57 = person25.equals((java.lang.Object) hOIReporter51);
        hOIReporter51.setId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:47 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str48.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str50.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookBooleanString("2019-09-03T15:53:11.506Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unable to generate boolean");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getParticipantId();
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        boolean boolean11 = personEthnicity5.equals((java.lang.Object) personEthnicity9);
        boolean boolean13 = personEthnicity5.equals((java.lang.Object) (-1.0f));
        boolean boolean14 = csecEntity0.equals((java.lang.Object) boolean13);
        java.time.LocalDate localDate15 = csecEntity0.getEndDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId9 = personEthnicity6.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId10 = personEthnicity6.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId10);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getId();
        java.lang.String str9 = participantEntity0.getScreeningId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        java.lang.String str9 = participantEntity0.getLegacySourceTable();
        participantEntity0.setEstimatedDob((java.lang.Boolean) false);
        gov.ca.cwds.data.persistence.ns.Person person15 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity16 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity17 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person15, ethnicity16);
        java.util.Date date18 = personEthnicity17.getLastUpdatedTime();
        java.lang.String str19 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date18);
        java.lang.String str20 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date18);
        gov.ca.cwds.data.persistence.ns.Person person25 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity27 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person25, ethnicity26);
        java.util.Date date28 = personEthnicity27.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person29 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity30 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity31 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person29, ethnicity30);
        java.util.Date date32 = personEthnicity31.getLastUpdatedTime();
        boolean boolean33 = personEthnicity27.equals((java.lang.Object) personEthnicity31);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity37 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity27.setEthnicity(ethnicity37);
        java.util.Date date39 = personEthnicity27.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship40 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date18, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date39);
        java.lang.String str41 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date39);
        gov.ca.cwds.data.persistence.ns.Person person42 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity43 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity44 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person42, ethnicity43);
        java.util.Date date45 = personEthnicity44.getLastUpdatedTime();
        java.util.Date date46 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date45);
        java.lang.String str47 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date46);
        java.lang.String str48 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date46);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity53 = null;
        java.lang.String[] strArray58 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity59 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean60 = participantEntity59.getProbationYouth();
        participantEntity59.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity59.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray65 = participantEntity59.getLanguages();
        java.lang.String[] strArray66 = participantEntity59.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity78 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date39, date46, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity53, "2019-09-03-15.52.58.871", strArray58, strArray66, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        java.lang.Boolean boolean79 = participantEntity78.getProbationYouth();
        boolean boolean80 = participantEntity0.equals((java.lang.Object) participantEntity78);
        gov.ca.cwds.rest.api.domain.ParticipantIntakeApi participantIntakeApi81 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity82 = participantEntity0.updateFrom(participantIntakeApi81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date18);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "2019-09-03" + "'", str19.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "2019-09-03" + "'", str20.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date32);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str41 + "' != '" + "2019-09-03T15:53:48.062-0700" + "'", str41.equals("2019-09-03T15:53:48.062-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date45);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date46);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str47 + "' != '" + "15:53:48" + "'", str47.equals("15:53:48"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str48 + "' != '" + "2019-09-03T15:53:48.062-0700" + "'", str48.equals("2019-09-03T15:53:48.062-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79.equals(true));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setScreeningId("00001");
        java.lang.Boolean boolean10 = participantEntity0.getSealed();
        gov.ca.cwds.rest.api.domain.Address[] addressArray18 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet19, addressArray18);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray21 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet22, phoneNumberArray21);
        gov.ca.cwds.rest.api.domain.Language[] languageArray24 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet25, languageArray24);
        gov.ca.cwds.rest.api.domain.Race[] raceArray27 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet28, raceArray27);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity32 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray33 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity32 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet34, ethnicityArray33);
        gov.ca.cwds.rest.api.domain.Person person36 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet34);
        java.lang.String str37 = person36.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person38 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity39 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity40 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person38, ethnicity39);
        java.util.Date date41 = personEthnicity40.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person42 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity43 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity44 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person42, ethnicity43);
        java.util.Date date45 = personEthnicity44.getLastUpdatedTime();
        boolean boolean46 = personEthnicity40.equals((java.lang.Object) personEthnicity44);
        boolean boolean47 = person36.equals((java.lang.Object) boolean46);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet48 = person36.getPhoneNumber();
        boolean boolean49 = participantEntity0.equals((java.lang.Object) person36);
        java.lang.String[] strArray50 = participantEntity0.getLanguages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str37.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date41);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date45);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getRaces();
        java.lang.String str2 = participantEntity0.getApproximateAge();
        participantEntity0.setProbationYouth((java.lang.Boolean) false);
        participantEntity0.setLastName("Y");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        participantEntity0.setDateOfBirth(date5);
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.util.Date date13 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date13);
        java.util.Date date15 = null;
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity20 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity22 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean23 = participantEntity22.getProbationYouth();
        participantEntity22.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date26 = null;
        participantEntity22.setDateOfBirth(date26);
        participantEntity22.setId("_n");
        participantEntity22.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity22.setId("_n");
        participantEntity22.setRelatedScreeningId("15:52:59");
        participantEntity22.setLegacyId("2019-09-03-15.53.05.294");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType38 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role39 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity40 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean41 = participantEntity40.getProbationYouth();
        participantEntity40.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity40.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray46 = participantEntity40.getLanguages();
        java.lang.Object obj47 = stringArrayType38.assemble((java.io.Serializable) role39, (java.lang.Object) strArray46);
        participantEntity22.setLanguages(strArray46);
        java.lang.String[] strArray49 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity61 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("2019-09-03-15.53.08.704", date13, date15, "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "2019-09-03T15:53:05.518-0700", "2019-09-03T15:53:08.732Z", "", screeningEntity20, "2019-09-03-15.53.19.417", strArray46, strArray49, "2019-09-03T15:53:08.732-0700", "15:53:18", "2019-09-03T15:53:17.177-0700", "_n", "2019-09-03-15.53.08.285", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) false, "2019-09-03T15:53:22.420Z", "Non-mandated Reporter", (java.lang.Boolean) false);
        participantEntity0.setRoles(strArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:48.155Z" + "'", str6.equals("2019-09-03T15:53:48.155Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str14 + "' != '" + "15:53:48" + "'", str14.equals("15:53:48"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertTrue("'" + role39 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role39.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj47.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId11 = personEthnicity2.getPrimaryKey();
        java.io.Serializable serializable12 = personEthnicityId11.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        personEthnicityId11.setPerson(person13);
        gov.ca.cwds.data.persistence.ns.Person person15 = null;
        personEthnicityId11.setPerson(person15);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str21 = ethnicity20.getEthnicityType();
        java.lang.Long long22 = ethnicity20.getId();
        java.util.Date date23 = ethnicity20.getLastUpdatedTime();
        personEthnicityId11.setEthnicity(ethnicity20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "hi!" + "'", str21.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date23);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookBooleanString("2019-09-03T15:53:21.042Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unable to generate boolean");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.io.Serializable serializable12 = safelySurrenderedBabiesEntity0.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity13 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean14 = participantEntity13.getProbationYouth();
        participantEntity13.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date17 = null;
        participantEntity13.setDateOfBirth(date17);
        participantEntity13.setId("_n");
        participantEntity13.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity13.setId("_n");
        java.lang.String str25 = participantEntity13.getScreeningId();
        participantEntity13.setFirstName("15:53:10");
        java.lang.String str28 = participantEntity13.getRelatedScreeningId();
        safelySurrenderedBabiesEntity0.setParticipantEntity(participantEntity13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        gov.ca.cwds.data.persistence.ns.Person person2 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity4 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person2, ethnicity3);
        java.util.Date date5 = personEthnicity4.getLastUpdatedTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date5);
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date5);
        gov.ca.cwds.data.persistence.ns.Person person12 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity14 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person12, ethnicity13);
        java.util.Date date15 = personEthnicity14.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person16 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity17 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity18 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person16, ethnicity17);
        java.util.Date date19 = personEthnicity18.getLastUpdatedTime();
        boolean boolean20 = personEthnicity14.equals((java.lang.Object) personEthnicity18);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity14.setEthnicity(ethnicity24);
        java.util.Date date26 = personEthnicity14.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship27 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date5, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date26);
        java.lang.String str28 = clientRelationship27.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03" + "'", str6.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date15);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date19);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str28.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity21 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity22 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity21);
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet23 = ethnicity21.getPersonEthnicity();
        java.lang.String str24 = ethnicity21.getLastUpdatedId();
        personEthnicity15.setEthnicity(ethnicity21);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId26 = personEthnicity15.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId26);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        java.lang.String str4 = clientRelationship1.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship5 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date6 = clientRelationship5.getLastUpdatedTime();
        boolean boolean7 = clientRelationship1.equals((java.lang.Object) date6);
        java.util.Date date8 = clientRelationship1.getLastUpdatedTime();
        java.util.Date date9 = clientRelationship1.getEndDate();
        java.lang.String str10 = clientRelationship1.getLastUpdatedId();
        boolean boolean11 = safelySurrenderedBabiesEntity0.equals((java.lang.Object) clientRelationship1);
        java.lang.String str12 = safelySurrenderedBabiesEntity0.getSurrenderedBy();
        java.lang.String str13 = safelySurrenderedBabiesEntity0.getParentGuardGivenBraceletId();
        safelySurrenderedBabiesEntity0.setParentGuardGivenBraceletId("2019-09-03-15.53.36.870");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        java.lang.String str3 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date5 = clientRelationship4.getLastUpdatedTime();
        boolean boolean6 = clientRelationship0.equals((java.lang.Object) date5);
        java.lang.Short short7 = clientRelationship0.getClientRelationshipType();
        java.lang.String str8 = clientRelationship0.getAbsentParentCode();
        java.lang.String str9 = clientRelationship0.getPrimaryClientId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(short7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str5 = ethnicity4.getEthnicityType();
        java.lang.Long long6 = ethnicity4.getId();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        boolean boolean15 = personEthnicity9.equals((java.lang.Object) personEthnicity13);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId16 = personEthnicity13.getPrimaryKey();
        java.io.Serializable serializable17 = personEthnicityId16.getPrimaryKey();
        boolean boolean18 = stringArrayType0.equals((java.lang.Object) long6, (java.lang.Object) personEthnicityId16);
        java.lang.Class<java.lang.String[]> strArrayClass19 = stringArrayType0.returnedClass();
        int[] intArray20 = stringArrayType0.sqlTypes();
        java.lang.Object obj23 = stringArrayType0.assemble((java.io.Serializable) "2019-09-03T15:53:16.206-0700", (java.lang.Object) "2019-09-03T15:53:37.021-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "2019-09-03T15:53:16.206-0700" + "'", obj23.equals("2019-09-03T15:53:16.206-0700"));
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity36 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean37 = participantEntity36.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray38 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList39 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList39, csecEntityArray38);
        participantEntity36.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList39);
        participantEntity36.setGender("yyyy-MM-dd HH:mm:ss.SSS");
        participantEntity36.setLegacySourceTable("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        participantEntity36.setNameSuffix("2019-09-03-15.53.15.533");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship48 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship48.setLastUpdatedId("");
        java.lang.String str51 = clientRelationship48.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship52 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date53 = clientRelationship52.getLastUpdatedTime();
        boolean boolean54 = clientRelationship48.equals((java.lang.Object) date53);
        java.util.Date date55 = clientRelationship48.getLastUpdatedTime();
        java.lang.Object obj56 = stringJsonUserType0.assemble((java.io.Serializable) "2019-09-03-15.53.15.533", (java.lang.Object) clientRelationship48);
        java.lang.Class class57 = stringJsonUserType0.returnedClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj56 + "' != '" + "2019-09-03-15.53.15.533" + "'", obj56.equals("2019-09-03-15.53.15.533"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class57);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        java.lang.String str9 = participantEntity0.getLegacySourceTable();
        participantEntity0.setSsn("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        participantEntity0.setFirstName("2019-09-03T15:53:10.189Z");
        gov.ca.cwds.data.persistence.ns.Person person15 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity16 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity17 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person15, ethnicity16);
        java.util.Date date18 = personEthnicity17.getLastUpdatedTime();
        java.util.Date date19 = personEthnicity17.getCreateDateTime();
        java.lang.String str20 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date19);
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        java.lang.String str27 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date26);
        java.lang.String str28 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date26);
        gov.ca.cwds.data.persistence.ns.Person person33 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity34 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity35 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person33, ethnicity34);
        java.util.Date date36 = personEthnicity35.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person37 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity38 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity39 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person37, ethnicity38);
        java.util.Date date40 = personEthnicity39.getLastUpdatedTime();
        boolean boolean41 = personEthnicity35.equals((java.lang.Object) personEthnicity39);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity45 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity35.setEthnicity(ethnicity45);
        java.util.Date date47 = personEthnicity35.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship48 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date26, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date47);
        java.lang.String str49 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date26);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity54 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType56 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role57 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity58 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean59 = participantEntity58.getProbationYouth();
        participantEntity58.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity58.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray64 = participantEntity58.getLanguages();
        java.lang.Object obj65 = stringArrayType56.assemble((java.io.Serializable) role57, (java.lang.Object) strArray64);
        java.lang.Class<java.lang.String[]> strArrayClass66 = stringArrayType56.returnedClass();
        java.sql.ResultSet resultSet67 = null;
        java.lang.String[] strArray73 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor74 = null;
        java.lang.Object obj76 = stringArrayType56.nullSafeGet(resultSet67, strArray73, sharedSessionContractImplementor74, (java.lang.Object) 1);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity77 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean78 = participantEntity77.getProbationYouth();
        participantEntity77.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity77.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray83 = participantEntity77.getLanguages();
        java.lang.String[] strArray84 = participantEntity77.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity96 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("hi!", date19, date26, "2019-09-03-15.53.07.205", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.05.703", "yyyy-MM-dd-HH.mm.ss.SSS", screeningEntity54, "yyyy-MM-dd HH:mm:ss.SSS", strArray73, strArray84, "", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:08.733-0700", "", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", (java.lang.Boolean) false, (java.lang.Boolean) false, (java.lang.Boolean) true, "2019-09-03T15:53:08.733-0700", "15:53:08", (java.lang.Boolean) true);
        participantEntity0.setDateOfBirth(date26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date18);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date19);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str20 + "' != '" + "2019-09-03T15:53:48.444Z" + "'", str20.equals("2019-09-03T15:53:48.444Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "2019-09-03" + "'", str27.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "2019-09-03" + "'", str28.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date40);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date47);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "2019-09-03" + "'", str49.equals("2019-09-03"));
        org.junit.Assert.assertTrue("'" + role57 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role57.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj65.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray84);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.lang.String str4 = participantEntity0.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        java.lang.String str2 = participantEntity0.getNameSuffix();
        participantEntity0.setGender("2019-09-03T15:53:23.114Z");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity5 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        java.lang.String str6 = safelySurrenderedBabiesEntity5.getComments();
        safelySurrenderedBabiesEntity5.setBraceletId("2019-09-03-15.53.08.988");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity9 = safelySurrenderedBabiesEntity5.getParticipantEntity();
        safelySurrenderedBabiesEntity5.setSurrenderedBy("2019-09-03T15:53:04.984-0700");
        safelySurrenderedBabiesEntity5.setBraceletId("2019-09-03-15.53.08.733");
        participantEntity0.setSafelySurrenderedBabies(safelySurrenderedBabiesEntity5);
        participantEntity0.setLegacyId("2019-09-03T15:53:43.357Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(participantEntity9);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        safelySurrenderedBabiesEntity0.setSurrenderedBy("00010");
        java.lang.String str3 = safelySurrenderedBabiesEntity0.getParentGuardProvMedQuestion();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getRaces();
        java.lang.Boolean boolean2 = participantEntity0.getSealed();
        participantEntity0.setLegacyId("2019-09-03T15:53:25.974Z");
        java.lang.Boolean boolean5 = participantEntity0.getSensitive();
        java.util.Date date6 = participantEntity0.getDateOfDeath();
        java.lang.Boolean boolean7 = participantEntity0.getSealed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage5 = null;
        phoneNumber4.addMessage(errorMessage5);
        java.lang.Long long7 = phoneNumber4.getId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor20 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor20.setId("2019-09-03-15.52.55.282");
        java.lang.String str23 = legacyDescriptor20.getUiId();
        java.lang.String str24 = legacyDescriptor20.getUiId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter25 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role15, "HH:mm:ss", "Y", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.02.984", legacyDescriptor20);
        hOIReporter25.setLastName("{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        boolean boolean28 = phoneNumber4.equals((java.lang.Object) "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity31 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList32 = ethnicity31.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity35 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity31, "Anonymous Reporter", "N");
        java.lang.String str36 = ethnicity35.getSubEthnicity();
        java.util.Date date37 = ethnicity35.getLastUpdatedTime();
        java.lang.String str38 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date37);
        boolean boolean39 = phoneNumber4.equals((java.lang.Object) str38);
        gov.ca.cwds.rest.api.domain.error.ErrorMessage[] errorMessageArray40 = new gov.ca.cwds.rest.api.domain.error.ErrorMessage[] {};
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList41 = new java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.error.ErrorMessage>) errorMessageList41, errorMessageArray40);
        phoneNumber4.setMessages(errorMessageList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7.equals(0L));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str36.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str38 + "' != '" + "2019-09-03T15:53:48.558Z" + "'", str38.equals("2019-09-03T15:53:48.558Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person13, ethnicity14);
        java.util.Date date16 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        boolean boolean21 = personEthnicity15.equals((java.lang.Object) personEthnicity19);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity15.setEthnicity(ethnicity25);
        java.util.Date date27 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship28 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date6, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date27);
        gov.ca.cwds.data.persistence.ns.Person person30 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity32 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person30, ethnicity31);
        java.util.Date date33 = personEthnicity32.getLastUpdatedTime();
        java.util.Date date34 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date34);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date34);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity41 = null;
        java.lang.String[] strArray46 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity47 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean48 = participantEntity47.getProbationYouth();
        participantEntity47.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity47.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray53 = participantEntity47.getLanguages();
        java.lang.String[] strArray54 = participantEntity47.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity66 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date27, date34, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity41, "2019-09-03-15.52.58.871", strArray46, strArray54, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity67 = participantEntity66.getScreening();
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity68 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship69 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship69.setLastUpdatedId("");
        java.lang.String str72 = clientRelationship69.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship73 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date74 = clientRelationship73.getLastUpdatedTime();
        boolean boolean75 = clientRelationship69.equals((java.lang.Object) date74);
        java.util.Date date76 = clientRelationship69.getLastUpdatedTime();
        java.util.Date date77 = clientRelationship69.getEndDate();
        java.lang.String str78 = clientRelationship69.getLastUpdatedId();
        boolean boolean79 = safelySurrenderedBabiesEntity68.equals((java.lang.Object) clientRelationship69);
        participantEntity66.setSafelySurrenderedBabies(safelySurrenderedBabiesEntity68);
        safelySurrenderedBabiesEntity68.setBraceletId("2019-09-03-15.53.25.802");
        java.lang.String str83 = safelySurrenderedBabiesEntity68.getParticipantId();
        safelySurrenderedBabiesEntity68.setBraceletId("15:53:21");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str29 + "' != '" + "2019-09-03T15:53:48.592-0700" + "'", str29.equals("2019-09-03T15:53:48.592-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:48 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str35 + "' != '" + "15:53:48" + "'", str35.equals("15:53:48"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "2019-09-03T15:53:48.593-0700" + "'", str36.equals("2019-09-03T15:53:48.593-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "" + "'", str78.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        java.lang.String str3 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor4 = hOIReporter0.getLegacyDescriptor();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = hOIReporter0.getLegacyDescriptor();
        hOIReporter0.setId("2019-09-03T15:53:08.868Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str3.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor5);
    }
}
