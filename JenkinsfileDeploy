import groovy.transform.Field
@Library('jenkins-pipeline-utils') _

@Field
def githubCredentialsId = '433ac100-b3c2-4519-b4d6-207c029a103b'
@Field
def deAnsibleGithubUrl = 'git@github.com:ca-cwds/de-ansible.git'

releasePipeline();

def releasePipeline() {
  try {
    deployWithSmoke('preint')
    deployWithSmoke('integration')
  } catch(Exception exception) {
    currentBuild.result = "FAILURE"
    throw exception
  }
}

def checkoutStage() {
  stage('Checkout') {
    deleteDir()
    checkout scm
   }
}

def deployWithSmoke(environment) {
  node(environment) {
    checkoutStage()
    deployToStage(environment, env.version)
    updateManifestStage(environment, env.version)
    buildDockerImageForTestStage()
    miniIntegrationTestStage()
    cleanWs()
  }
}

def deployToStage(environment, version) {
  stage("Deploy to $environment") {
    ws {
      git branch: "master", credentialsId: githubCredentialsId, url: deAnsibleGithubUrl
      sh "ansible-playbook -e NEW_RELIC_AGENT=true -e API_APP_VERSION=$version -i inventories/$environment/hosts.yml deploy-ferb-api.yml --vault-password-file ~/.ssh/vault.txt "
    }
  }
}

def updateManifestStage(environment, version) {
  stage('Update Manifest Version $environment') {
    updateManifest("api", environment, githubCredentialsId, version)
  }
}
  
def buildDockerImageForTestStage() {
  stage('Build Docker Image for Test') {
        sh "docker build --file docker/DockerfileIntegrationTest -t testferb ."
        }
}

def miniIntegrationTestStage() {
  stage('Smoke Test') {
    if (environment == 'integration') {
     withCredentials([
         string(credentialsId: 'cals-app-smoke-email', variable: 'SMOKE_TEST_USER'),
         string(credentialsId: 'cals-app-smoke-password', variable: 'SMOKE_TEST_PASSWORD'),
         string(credentialsId: 'cals-app-smoke-verification-code', variable: 'SMOKE_VERIFICATION_CODE')
       ]){
      sh "docker run \
        -e SMOKE_TEST_USER=$SMOKE_TEST_USER  \
        -e SMOKE_TEST_PASSWORD=$SMOKE_TEST_PASSWORD \
        -e SMOKE_VERIFICATION_CODE=$SMOKE_VERIFICATION_CODE \
        -e TEST_FILE_PATH=/api/docker/ferb-test/config/testConfig.yml \
        -e AUTH_MODE=integration \
        -e BASE_URL=https://ferbapi.integration.cwds.io/api/v1/ \
        -e PERRY_LOGIN_URL=https://web.integration.cwds.io/perry/login \
        -e AUTH_LOGIN_URL=https://web.integration.cwds.io/perry/authn/login \
        -e TOKEN_URL=https://web.integration.cwds.io/perry/authn/token \
        -e VALIDATE_URL=https://web.integration.cwds.io/perry/authn/validate \
           testferb:latest"
        }
     } else {
       environment {
            TEST_FILE_PATH=/api/docker/ferb-test/config/testConfig.yml
            AUTH_MODE=TEST
            BASE_URL="https://ferbapi.preint.cwds.io"
            PERRY_LOGIN_URL="https://web.preint.cwds.io/perry/login"
            AUTH_LOGIN_URL="https://web.preint.cwds.io/perry/authn/login"
            TOKEN_URL="https://web.preint.cwds.io/perry/authn/token"
            VALIDATE_URL="https://web.preint.cwds.io/perry/authn/validate"
        }
        def serverArti = Artifactory.newServer url: 'http://pr.dev.cwds.io/artifactory'
        def rtGradle = Artifactory.newGradleBuild()
        rtGradle.tool = "Gradle_35"
        rtGradle.resolver server: serverArti
        rtGradle.useWrapper = true
        def buildInfo = rtGradle.run buildFile: 'build.gradle', tasks: 'clean smokeTest'
        publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'build/reports/tests/integrationTest', reportFiles: 'index.html', reportName: 'Pre Integration Test Report', reportTitles: ''])
        }
    }
 }

