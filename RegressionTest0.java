import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.lang.String str0 = gov.ca.cwds.data.persistence.cms.ClientRelationship.FIND_CLIENT_RELATIONSHIPS_BY_SECONDARY_CLIENT_IDS;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str0.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.lang.String str0 = gov.ca.cwds.data.persistence.ns.ParticipantEntity.FIND_BY_SCREENING_ID_AND_LEGACY_ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId" + "'", str0.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId"));
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        gov.ca.cwds.rest.api.domain.Race race0 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race(race0, "", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        java.lang.String str0 = gov.ca.cwds.rest.api.domain.LegacyDescriptor.DATETIME_FORMAT;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str0.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookStrictTimestampString("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.lang.String str0 = gov.ca.cwds.rest.api.domain.DomainChef.TIMESTAMP_ISO8601_FORMAT;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str0.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.lang.String str0 = gov.ca.cwds.data.persistence.ns.ParticipantEntity.DELETE_PARTICIPANTS_BY_RELATED_SCREENING_ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str0.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        java.lang.String str0 = gov.ca.cwds.data.persistence.ns.ParticipantEntity.FIND_PARTICIPANTS_BY_RELATED_SCREENING_ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str0.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        java.lang.String str0 = gov.ca.cwds.data.ns.NsPersistentObject.getTimestampFormat();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str0.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.lang.String str0 = gov.ca.cwds.data.persistence.ns.ParticipantEntity.FIND_BY_RELATED_SCREENING_ID_AND_PARTICIPANT_ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId" + "'", str0.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId"));
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        java.lang.String str0 = gov.ca.cwds.data.persistence.ns.ParticipantEntity.FIND_PARTICIPANTS_BY_SCREENING_IDS;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds" + "'", str0.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds"));
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.lang.String str0 = gov.ca.cwds.rest.api.domain.DomainChef.LEGACY_TIMESTAMP_FORMAT;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str0.equals("yyyy-MM-dd HH:mm:ss.SSS"));
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.Class<?> wildcardClass26 = raceSet17.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        java.lang.String str0 = gov.ca.cwds.rest.api.domain.DomainObject.TIME_FORMAT;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "HH:mm:ss" + "'", str0.equals("HH:mm:ss"));
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookLocalDateString("yyyy-MM-dd HH:mm:ss.SSS");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.time.format.DateTimeParseException: Text 'yyyy-MM-dd HH:mm:ss.SSS' could not be parsed at index 0");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        java.time.LocalDate localDate0 = null;
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.cookLocalDate(localDate0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.cookBoolean((java.lang.Boolean) false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "N" + "'", str1.equals("N"));
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        gov.ca.cwds.rest.api.domain.ParticipantIntakeApi participantIntakeApi0 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity1 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity(participantIntakeApi0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Integer int1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookZipcodeString("HH:mm:ss");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: Unable to uncook zipcode string {0} = HH:mm:ss");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.lang.String str0 = gov.ca.cwds.data.persistence.ns.ParticipantEntity.FIND_PARTICIPANT_BY_RELATED_SCREENING_ID_AND_LEGACY_ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId" + "'", str0.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId"));
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        java.lang.String str0 = gov.ca.cwds.data.persistence.cms.ClientRelationship.FIND_CLIENT_RELATIONSHIPS_BY_PRIMARY_CLIENT_IDS;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds" + "'", str0.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds"));
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        gov.ca.cwds.data.persistence.ns.PhoneNumbers phoneNumbers0 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber1 = new gov.ca.cwds.rest.api.domain.PhoneNumber(phoneNumbers0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookISO8601Timestamp("yyyy-MM-dd-HH.mm.ss.SSS");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"yyyy-MM-dd-HH.mm.ss.SSS\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookStrictTimestampString("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.fromString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity9 = personEthnicity6.getEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:52:54 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:52:54 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ethnicity9);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.camelCaseToLowerUnderscore("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'" + "'", str1.equals("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'"));
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        clientRelationship0.setLastUpdatedId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        java.util.Date date5 = clientRelationship0.getLastUpdatedTime();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date5);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.fromString("2019-09-03");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.lang.String str0 = gov.ca.cwds.data.persistence.cms.ClientRelationship.FIND_CLIENT_RELATIONSHIP_BY_PRIMARY_CLIENT_ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId" + "'", str0.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId"));
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.lang.String str0 = gov.ca.cwds.data.persistence.ns.ParticipantEntity.FIND_PARTICIPANTS_BY_PARTICIPANT_IDS;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId" + "'", str0.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId"));
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        java.sql.PreparedStatement preparedStatement2 = null;
        gov.ca.cwds.data.persistence.ns.Race race6 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race7 = new gov.ca.cwds.rest.api.domain.Race(race6);
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringJsonUserType0.nullSafeSet(preparedStatement2, (java.lang.Object) race7, (int) (short) -1, sharedSessionContractImplementor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.fromString("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        java.lang.String str0 = gov.ca.cwds.rest.api.domain.DomainChef.TIMESTAMP_STRICT_FORMAT;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str0.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race4 = new gov.ca.cwds.rest.api.domain.Race(race3);
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonRace> personRaceSet5 = race3.getPersonRace();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personRaceSet5);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.SELF_REPORTER;
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.SELF_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.SELF_REPORTER));
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        java.lang.String str0 = gov.ca.cwds.rest.api.domain.DomainChef.TIMESTAMP_FORMAT;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str0.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.camelCaseToLowerUnderscore("yyyy-MM-dd HH:mm:ss.SSS");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "yyyy-_m_m-dd _h_h:mm:ss._s_s_s" + "'", str1.equals("yyyy-_m_m-dd _h_h:mm:ss._s_s_s"));
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        int int0 = gov.ca.cwds.data.persistence.cms.CmsPersistentObject.CMS_ID_LEN;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 10 + "'", int0 == 10);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        gov.ca.cwds.data.persistence.ns.PhoneNumber phoneNumber0 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber1 = new gov.ca.cwds.rest.api.domain.PhoneNumber(phoneNumber0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookStrictTimestampString("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        java.lang.String str4 = personEthnicity2.getCreateUserId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:52:57 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role4 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean5 = stringJsonUserType0.equals((java.lang.Object) "", (java.lang.Object) role4);
        java.sql.ResultSet resultSet6 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "yyyy-_m_m-dd _h_h:mm:ss._s_s_s", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor10 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity13 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = stringJsonUserType0.nullSafeGet(resultSet6, strArray9, sharedSessionContractImplementor10, (java.lang.Object) "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + role4 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role4.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship3 = null;
        boolean boolean4 = clientRelationship0.relatedTo(clientRelationship3);
        java.util.Date date5 = clientRelationship0.getStartDate();
        java.util.Date date6 = clientRelationship0.getEndDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        java.lang.String str3 = clientRelationship0.getSameHomeCode();
        java.lang.String str4 = clientRelationship0.getLastUpdatedId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimeString("Anonymous Reporter");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"Anonymous Reporter\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimestampString("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        java.lang.String str0 = gov.ca.cwds.data.persistence.ns.ParticipantEntity.FIND_LEGACY_ID_LIST_BY_SCREENING_ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId" + "'", str0.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId"));
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.hibernate.SessionFactory sessionFactory0 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.ns.ParticipantDao participantDao1 = new gov.ca.cwds.data.ns.ParticipantDao(sessionFactory0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor0.setId("2019-09-03-15.52.55.282");
        java.lang.String str3 = legacyDescriptor0.getUiId();
        legacyDescriptor0.setUiId("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.cookZipcodeNumber((java.lang.Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "" + "'", str1.equals(""));
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.lang.String str37 = person25.getSsn();
        java.lang.String str38 = person25.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:52:58 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:52:58 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str37.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId" + "'", str38.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId"));
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.camelCaseToLowerUnderscore("N");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "_n" + "'", str1.equals("_n"));
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role29 = hOIReporter0.getRole();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role29);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.fromString("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity2.setEthnicity(ethnicity12);
        java.lang.String str14 = personEthnicity2.getLastUpdatedId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:52:58 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:52:58 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getSensitive();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        java.lang.String str0 = gov.ca.cwds.rest.api.domain.DomainObject.DATE_FORMAT;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "yyyy-MM-dd" + "'", str0.equals("yyyy-MM-dd"));
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        java.lang.String str0 = gov.ca.cwds.rest.api.domain.DomainChef.DATE_FORMAT;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "yyyy-MM-dd" + "'", str0.equals("yyyy-MM-dd"));
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race4 = new gov.ca.cwds.rest.api.domain.Race(race3);
        boolean boolean6 = race4.equals((java.lang.Object) 100L);
        java.lang.String str7 = race4.getSubRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.cookZipcodeNumber((java.lang.Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00001" + "'", str1.equals("00001"));
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) (-1L), "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", "");
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.lang.String str37 = person25.getLastName();
        java.lang.String str38 = person25.getSsn();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:52:59 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:52:59 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str37.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str38.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        java.sql.PreparedStatement preparedStatement39 = null;
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringJsonUserType0.nullSafeSet(preparedStatement39, (java.lang.Object) (short) 0, 0, sharedSessionContractImplementor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookStrictTimestampString("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"yyyy-MM-dd'T'HH:mm:ss.SSSZZ\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        java.lang.Boolean boolean6 = participantEntity0.getProbationYouth();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean6);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str4 = ethnicity3.getEthnicityType();
        java.lang.Long long5 = ethnicity3.getId();
        java.lang.Long long6 = ethnicity3.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6.equals(1L));
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId9 = personEthnicity6.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person10 = personEthnicityId9.getPerson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:01 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:01 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person10);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.cookBoolean((java.lang.Boolean) true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Y" + "'", str1.equals("Y"));
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.toJson();
        java.lang.String str30 = hOIReporter0.getId();
        java.lang.String str31 = hOIReporter0.getLastName();
        hOIReporter0.setFirstName("2019-09-03T15:52:58.300-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str29.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Integer int1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookZipcodeString("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: Unable to uncook zipcode string {0} = gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        gov.ca.cwds.rest.api.domain.cms.ClientRelationship clientRelationship1 = null;
        gov.ca.cwds.data.persistence.ns.Person person5 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity7 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person5, ethnicity6);
        java.util.Date date8 = personEthnicity7.getLastUpdatedTime();
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date8);
        java.lang.String str10 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date8);
        gov.ca.cwds.data.persistence.ns.Person person15 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity16 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity17 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person15, ethnicity16);
        java.util.Date date18 = personEthnicity17.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        boolean boolean23 = personEthnicity17.equals((java.lang.Object) personEthnicity21);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity27 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity17.setEthnicity(ethnicity27);
        java.util.Date date29 = personEthnicity17.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship30 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date8, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date29);
        java.lang.String str31 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date8);
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship32 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", clientRelationship1, "2019-09-03T15:52:58.300-0700", date8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date8);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Sep 03 15:53:01 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "2019-09-03" + "'", str9.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "2019-09-03" + "'", str10.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date18);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Sep 03 15:53:01 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:01 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date29);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Sep 03 15:53:01 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str31 + "' != '" + "2019-09-03T15:53:01.637Z" + "'", str31.equals("2019-09-03T15:53:01.637Z"));
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        java.lang.String str21 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date20);
        java.lang.String str22 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = stringArrayType0.deepCopy((java.lang.Object) date20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Date cannot be cast to [Ljava.lang.String;");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:01 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "2019-09-03" + "'", str21.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "2019-09-03" + "'", str22.equals("2019-09-03"));
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.cookZipcodeNumber((java.lang.Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "" + "'", str1.equals(""));
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.camelCaseToLowerUnderscore("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s_z" + "'", str1.equals("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s_z"));
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        java.lang.Class class39 = stringJsonUserType0.returnedClass();
        boolean boolean40 = stringJsonUserType0.isMutable();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", "2019-09-03");
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        java.lang.String str0 = gov.ca.cwds.rest.api.domain.DomainChef.TIME_FORMAT;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "HH:mm:ss" + "'", str0.equals("HH:mm:ss"));
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-_m_m-dd _h_h:mm:ss._s_s_s", "2019-09-03-15.53.00.269");
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setFirstName("2019-09-03-15.52.55.282");
        java.lang.String str9 = participantEntity0.getRelatedScreeningId();
        java.lang.Boolean boolean10 = participantEntity0.getSensitive();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        java.util.Date date0 = null;
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookStrictTimestampString("yyyy-MM-dd-HH.mm.ss.SSS");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"yyyy-MM-dd-HH.mm.ss.SSS\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "2019-09-03T15:52:58.300-0700", "yyyy-_m_m-dd _h_h:mm:ss._s_s_s");
        java.lang.String str4 = phoneNumber3.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "yyyy-_m_m-dd _h_h:mm:ss._s_s_s" + "'", str4.equals("yyyy-_m_m-dd _h_h:mm:ss._s_s_s"));
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        gov.ca.cwds.data.persistence.ns.Address address0 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.rest.api.domain.Address address1 = new gov.ca.cwds.rest.api.domain.Address(address0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        boolean boolean7 = participantEntity0.equals((java.lang.Object) '4');
        java.lang.String[] strArray8 = participantEntity0.getLanguages();
        gov.ca.cwds.rest.api.domain.ParticipantIntakeApi participantIntakeApi9 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity10 = participantEntity0.updateFrom(participantIntakeApi9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.lang.String str37 = person25.getSsn();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet38 = person25.getPhoneNumber();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:02 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:02 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str37.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet38);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimestampString("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity3 = null;
        participantEntity0.setScreeningEntity(screeningEntity3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        gov.ca.cwds.data.persistence.ns.LegacyDescriptorEntity legacyDescriptorEntity0 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor1 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor(legacyDescriptorEntity0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        java.sql.PreparedStatement preparedStatement1 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter2 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray10 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet11, addressArray10);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray13 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet14, phoneNumberArray13);
        gov.ca.cwds.rest.api.domain.Language[] languageArray16 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet17, languageArray16);
        gov.ca.cwds.rest.api.domain.Race[] raceArray19 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet20 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet20, raceArray19);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity24 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray25 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity24 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet26 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet26, ethnicityArray25);
        gov.ca.cwds.rest.api.domain.Person person28 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet20, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet26);
        boolean boolean29 = hOIReporter2.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str30 = hOIReporter2.getLastName();
        java.lang.String str31 = hOIReporter2.toJson();
        java.lang.String str32 = hOIReporter2.getId();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringJsonUserType0.nullSafeSet(preparedStatement1, (java.lang.Object) str32, 100, sharedSessionContractImplementor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str31.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity2.setEthnicity(ethnicity12);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity14 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity12);
        boolean boolean16 = ethnicity14.equals((java.lang.Object) "N");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:04 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:04 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getNameSuffix();
        java.util.Set<gov.ca.cwds.rest.api.domain.Race> raceSet30 = person25.getRace();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceSet30);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.rest.api.domain.Person person1 = new gov.ca.cwds.rest.api.domain.Person(person0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType39 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship40 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship40.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role43 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean44 = stringJsonUserType39.equals((java.lang.Object) "", (java.lang.Object) role43);
        boolean boolean46 = stringJsonUserType0.equals((java.lang.Object) boolean44, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        java.sql.ResultSet resultSet47 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType48 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role49 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity50 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean51 = participantEntity50.getProbationYouth();
        participantEntity50.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity50.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray56 = participantEntity50.getLanguages();
        java.lang.Object obj57 = stringArrayType48.assemble((java.io.Serializable) role49, (java.lang.Object) strArray56);
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj60 = stringJsonUserType0.nullSafeGet(resultSet47, strArray56, sharedSessionContractImplementor58, (java.lang.Object) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        org.junit.Assert.assertTrue("'" + role43 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role43.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + role49 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role49.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj57.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "15:52:54", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber("Y", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "");
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookISO8601Timestamp("2019-09-03-15.52.58.871");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03-15.52.58.871\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        address8.setLegacySourceTable("HH:mm:ss");
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.fromString("_n");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookBooleanString("_n");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unable to generate boolean");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getId();
        gov.ca.cwds.rest.api.domain.ParticipantIntakeApi participantIntakeApi9 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity10 = participantEntity0.updateFrom(participantIntakeApi9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookDateString("15:53:04");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"15:53:04\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        java.lang.String str27 = person26.getMiddleName();
        java.lang.String str28 = person26.getNameSuffix();
        java.lang.String str29 = person26.getGender();
        java.lang.String str30 = person26.getNameSuffix();
        java.lang.Object obj32 = stringJsonUserType0.assemble((java.io.Serializable) str30, (java.lang.Object) "yyyy-MM-dd HH:mm:ss.SSS");
        gov.ca.cwds.rest.api.domain.Address[] addressArray40 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet41 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet41, addressArray40);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray43 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet44, phoneNumberArray43);
        gov.ca.cwds.rest.api.domain.Language[] languageArray46 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet47 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet47, languageArray46);
        gov.ca.cwds.rest.api.domain.Race[] raceArray49 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet50 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet50, raceArray49);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity54 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray55 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity54 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet56 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet56, ethnicityArray55);
        gov.ca.cwds.rest.api.domain.Person person58 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet41, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet44, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet47, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet50, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet56);
        gov.ca.cwds.rest.api.domain.Address[] addressArray66 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet67 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet67, addressArray66);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray69 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet70 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet70, phoneNumberArray69);
        gov.ca.cwds.rest.api.domain.Language[] languageArray72 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet73 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet73, languageArray72);
        gov.ca.cwds.rest.api.domain.Race[] raceArray75 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet76 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet76, raceArray75);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity80 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray81 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity80 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet82 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet82, ethnicityArray81);
        gov.ca.cwds.rest.api.domain.Person person84 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet67, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet70, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet73, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet76, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet82);
        java.lang.String str85 = person84.getLastName();
        java.lang.Object obj86 = stringJsonUserType0.assemble((java.io.Serializable) "yyyy-MM-dd-HH.mm.ss.SSS", (java.lang.Object) str85);
        gov.ca.cwds.data.persistence.ns.Race race90 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        java.lang.Long long91 = race90.getPrimaryKey();
        java.lang.String str92 = race90.getSubRaceType();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable93 = stringJsonUserType0.disassemble((java.lang.Object) race90);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: gov.ca.cwds.data.persistence.ns.Race cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str27.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "" + "'", str28.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "hi!" + "'", str29.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "" + "'", obj32.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str85.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj86 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", obj86.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str92 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str92.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.camelCaseToLowerUnderscore("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'" + "'", str1.equals("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'"));
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        clientRelationship0.setLastUpdatedId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        java.lang.String str5 = clientRelationship0.getSameHomeCode();
        java.lang.String str6 = clientRelationship0.getAbsentParentCode();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter0.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        java.lang.String str30 = hOIReporter0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'" + "'", str30.equals("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'"));
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        java.lang.String str0 = gov.ca.cwds.data.persistence.cms.ClientRelationship.FIND_CLIENT_RELATIONSHIP_BY_SECONDARY_CLIENT_ID;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId" + "'", str0.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId"));
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookLocalDateString("2019-09-03-15.53.05.703");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.time.format.DateTimeParseException: Text '2019-09-03-15.53.05.703' could not be parsed, unparsed text found at index 10");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter30 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray38 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet39 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet39, addressArray38);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray41 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet42 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, phoneNumberArray41);
        gov.ca.cwds.rest.api.domain.Language[] languageArray44 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet45 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet45, languageArray44);
        gov.ca.cwds.rest.api.domain.Race[] raceArray47 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet48 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet48, raceArray47);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity52 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray53 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity52 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet54 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54, ethnicityArray53);
        gov.ca.cwds.rest.api.domain.Person person56 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet39, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet45, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet48, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54);
        boolean boolean57 = hOIReporter30.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str58 = hOIReporter30.getLastName();
        java.lang.String str59 = hOIReporter30.getFirstName();
        hOIReporter30.setId("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType62 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship63 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship63.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role66 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean67 = stringJsonUserType62.equals((java.lang.Object) "", (java.lang.Object) role66);
        hOIReporter30.setRole(role66);
        hOIReporter0.setRole(role66);
        java.lang.String str70 = hOIReporter0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str29.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + role66 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role66.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        java.lang.Boolean boolean10 = participantEntity0.getEstimatedDob();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        java.lang.String str1 = role0.toString();
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Non-mandated Reporter" + "'", str1.equals("Non-mandated Reporter"));
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor0.setId("2019-09-03-15.52.55.282");
        java.lang.String str3 = legacyDescriptor0.getUiId();
        java.lang.String str4 = legacyDescriptor0.getUiId();
        org.joda.time.DateTime dateTime5 = null;
        legacyDescriptor0.setLastUpdated(dateTime5);
        legacyDescriptor0.setTableDescription("Anonymous Reporter");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getId();
        participantEntity0.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimestampString("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity2.setEthnicity(ethnicity12);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity14 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity12);
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage15 = null;
        ethnicity14.addMessage(errorMessage15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:06 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:06 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        java.lang.String str1 = legacyDescriptor0.getUiId();
        java.lang.String str2 = legacyDescriptor0.getUiId();
        java.lang.String str3 = legacyDescriptor0.getId();
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType4 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role5 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity6 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean7 = participantEntity6.getProbationYouth();
        participantEntity6.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity6.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray12 = participantEntity6.getLanguages();
        java.lang.Object obj13 = stringArrayType4.assemble((java.io.Serializable) role5, (java.lang.Object) strArray12);
        boolean boolean14 = legacyDescriptor0.equals((java.lang.Object) role5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + role5 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role5.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj13.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        java.lang.String str1 = legacyDescriptor0.getId();
        legacyDescriptor0.setId("00001");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str3 = participantEntity0.getPrimaryKey();
        java.lang.Boolean boolean4 = participantEntity0.getSealed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean4);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        participantEntity0.setMiddleName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        java.lang.Class class39 = stringJsonUserType0.returnedClass();
        java.sql.PreparedStatement preparedStatement40 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter41 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role42 = hOIReporter41.getRole();
        java.lang.String str43 = hOIReporter41.getId();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor44 = hOIReporter41.getLegacyDescriptor();
        java.lang.String str45 = hOIReporter41.getNameSuffix();
        hOIReporter41.setNameSuffix("2019-09-03T15:53:03.344Z");
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor49 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringJsonUserType0.nullSafeSet(preparedStatement40, (java.lang.Object) hOIReporter41, 10, sharedSessionContractImplementor49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor6 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter7 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role1, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor6);
        java.lang.String str8 = hOIReporter7.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role9 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter15 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role9, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor14);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role16 = hOIReporter15.getRole();
        boolean boolean17 = hOIReporter7.equals((java.lang.Object) hOIReporter15);
        boolean boolean18 = csecEntity0.equals((java.lang.Object) hOIReporter15);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor19 = hOIReporter15.getLegacyDescriptor();
        hOIReporter15.setId("2019-09-03T15:53:05.518-0700");
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03-15.52.55.282" + "'", str8.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role16 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role16.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(legacyDescriptor19);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        java.sql.ResultSet resultSet2 = null;
        gov.ca.cwds.data.persistence.ns.Person person6 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity7 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity8 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person6, ethnicity7);
        java.util.Date date9 = personEthnicity8.getLastUpdatedTime();
        java.lang.String str10 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date9);
        java.lang.String str11 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date9);
        gov.ca.cwds.data.persistence.ns.Person person16 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity17 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity18 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person16, ethnicity17);
        java.util.Date date19 = personEthnicity18.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person20 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity21 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity22 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person20, ethnicity21);
        java.util.Date date23 = personEthnicity22.getLastUpdatedTime();
        boolean boolean24 = personEthnicity18.equals((java.lang.Object) personEthnicity22);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity18.setEthnicity(ethnicity28);
        java.util.Date date30 = personEthnicity18.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship31 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date9, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date30);
        java.lang.String str32 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date30);
        gov.ca.cwds.data.persistence.ns.Person person33 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity34 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity35 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person33, ethnicity34);
        java.util.Date date36 = personEthnicity35.getLastUpdatedTime();
        java.util.Date date37 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date36);
        java.lang.String str38 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date37);
        java.lang.String str39 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date37);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity44 = null;
        java.lang.String[] strArray49 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity50 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean51 = participantEntity50.getProbationYouth();
        participantEntity50.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity50.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray56 = participantEntity50.getLanguages();
        java.lang.String[] strArray57 = participantEntity50.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity69 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date30, date37, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity44, "2019-09-03-15.52.58.871", strArray49, strArray57, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor70 = null;
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship71 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date72 = clientRelationship71.getLastUpdatedTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj73 = stringJsonUserType0.nullSafeGet(resultSet2, strArray57, sharedSessionContractImplementor70, (java.lang.Object) clientRelationship71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date9);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Sep 03 15:53:07 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "2019-09-03" + "'", str10.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "2019-09-03" + "'", str11.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date19);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Sep 03 15:53:07 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date23);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Sep 03 15:53:07 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:07 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str32 + "' != '" + "2019-09-03T15:53:07.484-0700" + "'", str32.equals("2019-09-03T15:53:07.484-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Sep 03 15:53:07 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Sep 03 15:53:07 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str38 + "' != '" + "15:53:07" + "'", str38.equals("15:53:07"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str39 + "' != '" + "2019-09-03T15:53:07.485-0700" + "'", str39.equals("2019-09-03T15:53:07.485-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date72);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage5 = null;
        phoneNumber4.addMessage(errorMessage5);
        java.lang.String str7 = phoneNumber4.getNumber();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId" + "'", str7.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId"));
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookDateString("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        java.lang.String str0 = gov.ca.cwds.rest.api.domain.DomainObject.TIMESTAMP_ISO8601_FORMAT;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str0 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str0.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getLastName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = person25.getPhoneNumber();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList29 = person25.getMessages();
        java.lang.String str30 = person25.getSsn();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str27.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str30.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimestampString("2019-09-03T15:53:05.703Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03T15:53:05.703Z\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor5);
        java.lang.String str7 = hOIReporter6.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        boolean boolean16 = hOIReporter6.equals((java.lang.Object) hOIReporter14);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role17 = hOIReporter6.getRole();
        java.lang.String str18 = role17.toString();
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03-15.52.55.282" + "'", str7.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + role17 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role17.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Anonymous Reporter" + "'", str18.equals("Anonymous Reporter"));
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        gov.ca.cwds.rest.api.domain.cms.ClientRelationship clientRelationship1 = null;
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.util.Date date7 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date6);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date6);
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.util.Date date10 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date6);
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship11 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("2019-09-03-15.52.55.282", clientRelationship1, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", date10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:08 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:08 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03-15.53.08.062" + "'", str8.equals("2019-09-03-15.53.08.062"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "2019-09-03" + "'", str9.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:08 PDT 2019");
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        gov.ca.cwds.rest.api.domain.cms.ClientRelationship clientRelationship1 = null;
        java.util.Date date3 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", clientRelationship1, "Y", date3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber33 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 1L, "yyyy-MM-dd-HH.mm.ss.SSS", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity34 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean35 = participantEntity34.getProbationYouth();
        participantEntity34.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity34.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray40 = participantEntity34.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity41 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean42 = participantEntity41.getProbationYouth();
        participantEntity41.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date45 = null;
        participantEntity41.setDateOfBirth(date45);
        participantEntity41.setId("_n");
        boolean boolean49 = participantEntity34.equals((java.lang.Object) "_n");
        boolean boolean50 = phoneNumber33.equals((java.lang.Object) boolean49);
        gov.ca.cwds.rest.api.domain.Address[] addressArray58 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet59 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet59, addressArray58);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray61 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet62 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet62, phoneNumberArray61);
        gov.ca.cwds.rest.api.domain.Language[] languageArray64 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet65 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet65, languageArray64);
        gov.ca.cwds.rest.api.domain.Race[] raceArray67 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet68 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet68, raceArray67);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity72 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray73 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity72 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet74 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet74, ethnicityArray73);
        gov.ca.cwds.rest.api.domain.Person person76 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet59, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet62, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet65, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet68, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet74);
        java.lang.String str77 = person76.getMiddleName();
        java.lang.String str78 = person76.getLastName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet79 = person76.getPhoneNumber();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList80 = person76.getMessages();
        phoneNumber33.setMessages(errorMessageList80);
        person25.setMessages(errorMessageList80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str77.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str78.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList80);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage5 = null;
        phoneNumber4.addMessage(errorMessage5);
        phoneNumber4.setId((java.lang.Long) 10L);
        java.lang.String str9 = phoneNumber4.getNumber();
        java.lang.String str10 = phoneNumber4.getNumber();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId" + "'", str9.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId" + "'", str10.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId"));
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId9 = personEthnicity6.getPrimaryKey();
        java.io.Serializable serializable10 = personEthnicityId9.getPrimaryKey();
        java.io.Serializable serializable11 = personEthnicityId9.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person12 = personEthnicityId9.getPerson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:08 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:08 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person12);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId9 = personEthnicity6.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity11 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity12 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity11);
        java.util.Date date13 = personEthnicity12.getLastUpdatedTime();
        java.util.Date date14 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date13);
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date13);
        java.lang.String str16 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date13);
        boolean boolean17 = personEthnicityId9.equals((java.lang.Object) date13);
        gov.ca.cwds.data.persistence.ns.Person person18 = personEthnicityId9.getPerson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:08 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:08 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:08 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:08 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03-15.53.08.519" + "'", str15.equals("2019-09-03-15.53.08.519"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "2019-09-03" + "'", str16.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person18);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimestampString("2019-09-03T15:53:08.732Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03T15:53:08.732Z\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.util.Date date2 = participantEntity0.getDateOfBirth();
        gov.ca.cwds.rest.api.domain.ParticipantIntakeApi participantIntakeApi3 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity4 = participantEntity0.updateFrom(participantIntakeApi3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date2);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor5);
        java.lang.String str7 = hOIReporter6.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        boolean boolean16 = hOIReporter6.equals((java.lang.Object) hOIReporter14);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role17 = hOIReporter6.getRole();
        hOIReporter6.setId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId");
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03-15.52.55.282" + "'", str7.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + role17 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role17.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor10 = address8.getLegacyDescriptor();
        java.lang.String str11 = address8.getStreetAddress();
        gov.ca.cwds.data.persistence.ns.Race race15 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) (-1L), "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS");
        boolean boolean16 = address8.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str11.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId");
        java.lang.String str4 = ethnicity3.getCreateUserId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "2019-09-03T15:52:58.300-0700", "yyyy-_m_m-dd _h_h:mm:ss._s_s_s");
        java.lang.Long long4 = phoneNumber3.getId();
        java.lang.String str5 = phoneNumber3.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "yyyy-_m_m-dd _h_h:mm:ss._s_s_s" + "'", str5.equals("yyyy-_m_m-dd _h_h:mm:ss._s_s_s"));
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Integer int1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookZipcodeString("2019-09-03-15.53.05.467");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: Unable to uncook zipcode string {0} = 2019-09-03-15.53.05.467");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookStrictTimestampString("_n");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"_n\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.joda.time.DateTime dateTime2 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor("2019-09-03T15:53:08.732Z", "2019-09-03T15:53:03.344Z", dateTime2, "15:53:06", "2019-09-03-15.53.07.205");
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setScreeningId("00001");
        java.lang.Boolean boolean10 = participantEntity0.getSealed();
        gov.ca.cwds.rest.api.domain.Address[] addressArray18 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet19, addressArray18);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray21 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet22, phoneNumberArray21);
        gov.ca.cwds.rest.api.domain.Language[] languageArray24 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet25, languageArray24);
        gov.ca.cwds.rest.api.domain.Race[] raceArray27 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet28, raceArray27);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity32 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray33 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity32 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet34, ethnicityArray33);
        gov.ca.cwds.rest.api.domain.Person person36 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet34);
        java.lang.String str37 = person36.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person38 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity39 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity40 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person38, ethnicity39);
        java.util.Date date41 = personEthnicity40.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person42 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity43 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity44 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person42, ethnicity43);
        java.util.Date date45 = personEthnicity44.getLastUpdatedTime();
        boolean boolean46 = personEthnicity40.equals((java.lang.Object) personEthnicity44);
        boolean boolean47 = person36.equals((java.lang.Object) boolean46);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet48 = person36.getPhoneNumber();
        boolean boolean49 = participantEntity0.equals((java.lang.Object) person36);
        java.util.Set<gov.ca.cwds.rest.api.domain.Language> languageSet50 = person36.getLanguage();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str37.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date41);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Sep 03 15:53:10 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date45);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Sep 03 15:53:10 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageSet50);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId11 = personEthnicity2.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person12 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity16 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity17 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person12, ethnicity16);
        personEthnicityId11.setEthnicity(ethnicity16);
        java.util.Date date19 = ethnicity16.getCreateDateTime();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:10 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:10 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date19);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        gov.ca.cwds.data.persistence.ns.Language language0 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.rest.api.domain.Language language1 = new gov.ca.cwds.rest.api.domain.Language(language0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookBooleanString("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unable to generate boolean");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        address8.setLegacyId("");
        java.lang.String str12 = address8.getLegacyId();
        java.lang.Integer int13 = address8.getState();
        java.lang.String str14 = address8.getLegacyId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13.equals(100));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        java.lang.String str27 = person26.getMiddleName();
        java.lang.String str28 = person26.getNameSuffix();
        java.lang.String str29 = person26.getGender();
        java.lang.String str30 = person26.getNameSuffix();
        java.lang.Object obj32 = stringJsonUserType0.assemble((java.io.Serializable) str30, (java.lang.Object) "yyyy-MM-dd HH:mm:ss.SSS");
        java.sql.PreparedStatement preparedStatement33 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor41 = null;
        gov.ca.cwds.rest.api.domain.Address address42 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor41);
        java.lang.String str43 = address42.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor44 = address42.getLegacyDescriptor();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringJsonUserType0.nullSafeSet(preparedStatement33, (java.lang.Object) address42, (int) (byte) -1, sharedSessionContractImplementor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str27.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "" + "'", str28.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "hi!" + "'", str29.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "" + "'", obj32.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str43.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor44);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getBirthDate();
        java.util.Set<gov.ca.cwds.rest.api.domain.Language> languageSet29 = person25.getLanguage();
        java.util.Set<gov.ca.cwds.rest.api.domain.Language> languageSet30 = person25.getLanguage();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId" + "'", str28.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageSet29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageSet30);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        address8.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        boolean boolean13 = address8.hasMessages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookLocalDateString("2019-09-03-15.53.08.988");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.time.format.DateTimeParseException: Text '2019-09-03-15.53.08.988' could not be parsed, unparsed text found at index 10");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor47 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor47.setId("2019-09-03-15.52.55.282");
        java.lang.String str50 = legacyDescriptor47.getUiId();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj51 = stringArrayType0.deepCopy((java.lang.Object) legacyDescriptor47);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: gov.ca.cwds.rest.api.domain.LegacyDescriptor cannot be cast to [Ljava.lang.String;");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber14 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage15 = null;
        phoneNumber14.addMessage(errorMessage15);
        phoneNumber14.setId((java.lang.Long) 10L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = stringJsonUserType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str4 = ethnicity3.getEthnicityType();
        java.lang.Long long5 = ethnicity3.getId();
        java.lang.String str6 = ethnicity3.getSubEthnicity();
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet7 = ethnicity3.getPersonEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet7);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.lang.String str4 = participantEntity0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet27 = person25.getPhoneNumber();
        java.util.Set<gov.ca.cwds.rest.api.domain.Address> addressSet28 = person25.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressSet28);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person13, ethnicity14);
        java.util.Date date16 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        boolean boolean21 = personEthnicity15.equals((java.lang.Object) personEthnicity19);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity15.setEthnicity(ethnicity25);
        java.util.Date date27 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship28 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date6, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date27);
        gov.ca.cwds.data.persistence.ns.Person person30 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity32 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person30, ethnicity31);
        java.util.Date date33 = personEthnicity32.getLastUpdatedTime();
        java.util.Date date34 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date34);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date34);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity41 = null;
        java.lang.String[] strArray46 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity47 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean48 = participantEntity47.getProbationYouth();
        participantEntity47.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity47.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray53 = participantEntity47.getLanguages();
        java.lang.String[] strArray54 = participantEntity47.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity66 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date27, date34, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity41, "2019-09-03-15.52.58.871", strArray46, strArray54, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        java.lang.String str67 = participantEntity66.getApproximateAge();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:11 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:11 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:11 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:11 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str29 + "' != '" + "2019-09-03T15:53:11.912-0700" + "'", str29.equals("2019-09-03T15:53:11.912-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:11 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:11 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str35 + "' != '" + "15:53:11" + "'", str35.equals("15:53:11"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "2019-09-03T15:53:11.912-0700" + "'", str36.equals("2019-09-03T15:53:11.912-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds" + "'", str67.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds"));
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String str6 = participantEntity0.getGender();
        java.lang.String str7 = participantEntity0.getSsn();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity40 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType42 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role43 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity44 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean45 = participantEntity44.getProbationYouth();
        participantEntity44.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity44.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray50 = participantEntity44.getLanguages();
        java.lang.Object obj51 = stringArrayType42.assemble((java.io.Serializable) role43, (java.lang.Object) strArray50);
        java.lang.Class<java.lang.String[]> strArrayClass52 = stringArrayType42.returnedClass();
        java.sql.ResultSet resultSet53 = null;
        java.lang.String[] strArray59 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor60 = null;
        java.lang.Object obj62 = stringArrayType42.nullSafeGet(resultSet53, strArray59, sharedSessionContractImplementor60, (java.lang.Object) 1);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity63 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean64 = participantEntity63.getProbationYouth();
        participantEntity63.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity63.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray69 = participantEntity63.getLanguages();
        java.lang.String[] strArray70 = participantEntity63.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity82 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("hi!", date5, date12, "2019-09-03-15.53.07.205", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.05.703", "yyyy-MM-dd-HH.mm.ss.SSS", screeningEntity40, "yyyy-MM-dd HH:mm:ss.SSS", strArray59, strArray70, "", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:08.733-0700", "", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", (java.lang.Boolean) false, (java.lang.Boolean) false, (java.lang.Boolean) true, "2019-09-03T15:53:08.733-0700", "15:53:08", (java.lang.Boolean) true);
        java.lang.String str83 = participantEntity82.getGender();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:12 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:12 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:12.022Z" + "'", str6.equals("2019-09-03T15:53:12.022Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:12 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:12 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:12 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:12 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "2019-09-03" + "'", str35.equals("2019-09-03"));
        org.junit.Assert.assertTrue("'" + role43 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role43.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj51.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str83 + "' != '" + "2019-09-03T15:53:03.344Z" + "'", str83.equals("2019-09-03T15:53:03.344Z"));
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race4 = new gov.ca.cwds.rest.api.domain.Race(race3);
        java.lang.String str5 = race4.getRaceType();
        race4.setRaceType("15:52:59");
        boolean boolean9 = race4.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str5.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        java.lang.String str12 = participantEntity0.getScreeningId();
        java.lang.String str13 = participantEntity0.getLegacySourceTable();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Integer int1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookZipcodeString("N");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: Unable to uncook zipcode string {0} = N");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.fromString("2019-09-03-15.53.08.285");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.fromString("2019-09-03T15:53:05.703Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId11 = personEthnicity2.getPrimaryKey();
        java.io.Serializable serializable12 = personEthnicityId11.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = personEthnicityId11.getEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:12 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:12 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ethnicity13);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        address8.setLegacyId("");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage12 = null;
        address8.addMessage(errorMessage12);
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList14 = address8.getMessages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList14);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String str3 = race2.getRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str3.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        java.lang.String str27 = person26.getMiddleName();
        java.lang.String str28 = person26.getNameSuffix();
        java.lang.String str29 = person26.getGender();
        java.lang.String str30 = person26.getNameSuffix();
        java.lang.Object obj32 = stringJsonUserType0.assemble((java.io.Serializable) str30, (java.lang.Object) "yyyy-MM-dd HH:mm:ss.SSS");
        gov.ca.cwds.rest.api.domain.Address[] addressArray40 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet41 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet41, addressArray40);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray43 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet44, phoneNumberArray43);
        gov.ca.cwds.rest.api.domain.Language[] languageArray46 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet47 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet47, languageArray46);
        gov.ca.cwds.rest.api.domain.Race[] raceArray49 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet50 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet50, raceArray49);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity54 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray55 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity54 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet56 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet56, ethnicityArray55);
        gov.ca.cwds.rest.api.domain.Person person58 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet41, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet44, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet47, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet50, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet56);
        gov.ca.cwds.rest.api.domain.Address[] addressArray66 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet67 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet67, addressArray66);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray69 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet70 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet70, phoneNumberArray69);
        gov.ca.cwds.rest.api.domain.Language[] languageArray72 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet73 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet73, languageArray72);
        gov.ca.cwds.rest.api.domain.Race[] raceArray75 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet76 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet76, raceArray75);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity80 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray81 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity80 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet82 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet82, ethnicityArray81);
        gov.ca.cwds.rest.api.domain.Person person84 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet67, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet70, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet73, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet76, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet82);
        java.lang.String str85 = person84.getLastName();
        java.lang.Object obj86 = stringJsonUserType0.assemble((java.io.Serializable) "yyyy-MM-dd-HH.mm.ss.SSS", (java.lang.Object) str85);
        boolean boolean87 = stringJsonUserType0.isMutable();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str27.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "" + "'", str28.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "hi!" + "'", str29.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "" + "'", obj32.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str85.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj86 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", obj86.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setScreeningId("00001");
        java.lang.Boolean boolean10 = participantEntity0.getSealed();
        java.lang.String str11 = participantEntity0.getSsn();
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity12 = null;
        participantEntity0.setSafelySurrenderedBabies(safelySurrenderedBabiesEntity12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor7);
        java.lang.String str9 = address8.getStreetAddress();
        java.lang.Integer int10 = address8.getType();
        java.lang.String str11 = address8.getLegacySourceTable();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str9.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10.equals(10));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId" + "'", str11.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId"));
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s_z", "2019-09-03T15:53:10.189Z", "2019-09-03T15:53:10.189-0700");
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("_n", "");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor10 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address11 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor10);
        java.lang.String str12 = address11.getStreetAddress();
        boolean boolean13 = race2.equals((java.lang.Object) str12);
        race2.setSubRaceType("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage[] errorMessageArray16 = new gov.ca.cwds.rest.api.domain.error.ErrorMessage[] {};
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList17 = new java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.error.ErrorMessage>) errorMessageList17, errorMessageArray16);
        race2.setMessages(errorMessageList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str12.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("2019-09-03T15:53:12.022Z", "2019-09-03-15.52.58.871", "2019-09-03T15:53:10.356Z", "2019-09-03T15:53:11.317Z", (java.lang.Integer) 100, "2019-09-03T15:53:09.087Z", (java.lang.Integer) 10, legacyDescriptor7);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person13, ethnicity14);
        java.util.Date date16 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        boolean boolean21 = personEthnicity15.equals((java.lang.Object) personEthnicity19);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity15.setEthnicity(ethnicity25);
        java.util.Date date27 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship28 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date6, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date27);
        gov.ca.cwds.data.persistence.ns.Person person30 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity32 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person30, ethnicity31);
        java.util.Date date33 = personEthnicity32.getLastUpdatedTime();
        java.util.Date date34 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date34);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date34);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity41 = null;
        java.lang.String[] strArray46 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity47 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean48 = participantEntity47.getProbationYouth();
        participantEntity47.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity47.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray53 = participantEntity47.getLanguages();
        java.lang.String[] strArray54 = participantEntity47.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity66 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date27, date34, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity41, "2019-09-03-15.52.58.871", strArray46, strArray54, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        participantEntity66.setSsn("2019-09-03T15:53:10.189-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str29 + "' != '" + "2019-09-03T15:53:13.008-0700" + "'", str29.equals("2019-09-03T15:53:13.008-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str35 + "' != '" + "15:53:13" + "'", str35.equals("15:53:13"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "2019-09-03T15:53:13.008-0700" + "'", str36.equals("2019-09-03T15:53:13.008-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("15:53:06", "");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber("2019-09-03-15.53.08.733", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "Non-mandated Reporter");
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role4 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean5 = stringJsonUserType0.equals((java.lang.Object) "", (java.lang.Object) role4);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity6 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable7 = stringJsonUserType0.disassemble((java.lang.Object) participantEntity6);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: gov.ca.cwds.data.persistence.ns.ParticipantEntity cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + role4 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role4.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity7 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean8 = participantEntity7.getProbationYouth();
        participantEntity7.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date11 = null;
        participantEntity7.setDateOfBirth(date11);
        participantEntity7.setId("_n");
        boolean boolean15 = participantEntity0.equals((java.lang.Object) "_n");
        java.lang.Boolean boolean16 = participantEntity0.getSealed();
        java.util.Date date17 = participantEntity0.getDateOfBirth();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date17);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.toJson();
        java.lang.String str30 = hOIReporter0.getId();
        java.lang.String str31 = hOIReporter0.getLastName();
        java.lang.String str32 = hOIReporter0.getNameSuffix();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor33 = hOIReporter0.getLegacyDescriptor();
        java.lang.String str34 = legacyDescriptor33.getUiId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str29.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "Anonymous Reporter", "N");
        java.lang.String str7 = ethnicity2.getEthnicityType();
        boolean boolean9 = ethnicity2.equals((java.lang.Object) ' ');
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
        java.lang.String str13 = ethnicity2.getEthnicityType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str7.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str13.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId11 = personEthnicity2.getPrimaryKey();
        boolean boolean13 = personEthnicityId11.equals((java.lang.Object) (-1L));
        java.io.Serializable serializable14 = personEthnicityId11.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable14);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity2.setEthnicity(ethnicity12);
        java.lang.Long long14 = ethnicity12.getId();
        java.lang.String str15 = ethnicity12.getSubEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookISO8601Timestamp("15:53:05");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"15:53:05\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        java.util.Date date4 = personEthnicity2.getCreateDateTime();
        gov.ca.cwds.data.persistence.ns.Person person5 = personEthnicity2.getPerson();
        gov.ca.cwds.data.persistence.ns.Person person6 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person6, ethnicity10);
        personEthnicity2.setEthnicity(ethnicity10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person5);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity10 = participantEntity0.getScreeningEntity();
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity11 = participantEntity0.getSafelySurrenderedBabies();
        participantEntity0.setLegacyId("2019-09-03T15:53:12.022Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(safelySurrenderedBabiesEntity11);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        java.lang.String str11 = personEthnicity2.getCreateUserId();
        gov.ca.cwds.data.persistence.ns.Person person12 = personEthnicity2.getPerson();
        gov.ca.cwds.data.persistence.ns.Person person13 = personEthnicity2.getPerson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person13);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        participantEntity0.setGender("yyyy-MM-dd HH:mm:ss.SSS");
        participantEntity0.setLegacySourceTable("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity11 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity12 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity11);
        java.util.Date date13 = personEthnicity12.getLastUpdatedTime();
        java.util.Date date14 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date13);
        participantEntity0.setDateOfBirth(date13);
        java.lang.String[] strArray16 = participantEntity0.getLanguages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:13 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray16);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Integer int1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookZipcodeString("2019-09-03T15:53:11.912-0700");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: Unable to uncook zipcode string {0} = 2019-09-03T15:53:11.912-0700");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.util.Date date2 = participantEntity0.getDateOfBirth();
        java.lang.Boolean boolean3 = participantEntity0.getEstimatedDob();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity9 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity11 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity12 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity11);
        java.util.Date date13 = personEthnicity12.getLastUpdatedTime();
        java.util.Date date14 = personEthnicity12.getCreateDateTime();
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date14);
        participantEntity9.setDateOfBirth(date14);
        participantEntity0.setDateOfDeath(date14);
        gov.ca.cwds.rest.api.domain.ParticipantIntakeApi participantIntakeApi18 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity19 = participantEntity0.updateFrom(participantIntakeApi18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:14 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:14 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03T15:53:14.137Z" + "'", str15.equals("2019-09-03T15:53:14.137Z"));
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter30 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray38 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet39 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet39, addressArray38);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray41 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet42 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, phoneNumberArray41);
        gov.ca.cwds.rest.api.domain.Language[] languageArray44 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet45 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet45, languageArray44);
        gov.ca.cwds.rest.api.domain.Race[] raceArray47 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet48 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet48, raceArray47);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity52 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray53 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity52 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet54 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54, ethnicityArray53);
        gov.ca.cwds.rest.api.domain.Person person56 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet39, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet45, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet48, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54);
        boolean boolean57 = hOIReporter30.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str58 = hOIReporter30.getLastName();
        java.lang.String str59 = hOIReporter30.getFirstName();
        hOIReporter30.setId("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType62 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship63 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship63.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role66 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean67 = stringJsonUserType62.equals((java.lang.Object) "", (java.lang.Object) role66);
        hOIReporter30.setRole(role66);
        hOIReporter0.setRole(role66);
        java.lang.String str70 = hOIReporter0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str29.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + role66 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role66.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        java.lang.String str3 = clientRelationship0.getLastUpdatedId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship4.setLastUpdatedId("");
        clientRelationship4.setLastUpdatedId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        boolean boolean9 = clientRelationship0.relatedTo(clientRelationship4);
        java.lang.String str10 = clientRelationship0.getPrimaryClientId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.PreparedStatement preparedStatement1 = null;
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringArrayType0.nullSafeSet(preparedStatement1, (java.lang.Object) "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", (int) ' ', sharedSessionContractImplementor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        java.lang.String str12 = participantEntity0.getScreeningId();
        java.lang.String str13 = participantEntity0.getFirstName();
        java.lang.String str14 = participantEntity0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        gov.ca.cwds.data.persistence.ns.Race race0 = new gov.ca.cwds.data.persistence.ns.Race();
        gov.ca.cwds.rest.api.domain.Race race1 = new gov.ca.cwds.rest.api.domain.Race(race0);
        gov.ca.cwds.data.persistence.ns.Race race4 = new gov.ca.cwds.data.persistence.ns.Race(race1, "HH:mm:ss", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        java.lang.Long long5 = race4.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long5);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        java.lang.String str3 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor4 = hOIReporter0.getLegacyDescriptor();
        java.lang.String str5 = hOIReporter0.toJson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str3.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str5.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity4);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        java.lang.String str3 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date5 = clientRelationship4.getLastUpdatedTime();
        boolean boolean6 = clientRelationship0.equals((java.lang.Object) date5);
        java.util.Date date7 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str8 = clientRelationship0.getSameHomeCode();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        java.sql.PreparedStatement preparedStatement2 = null;
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType3 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean4 = stringJsonUserType3.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race8 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race9 = new gov.ca.cwds.rest.api.domain.Race(race8);
        java.lang.String str10 = race9.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray18 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet19, addressArray18);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray21 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet22, phoneNumberArray21);
        gov.ca.cwds.rest.api.domain.Language[] languageArray24 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet25, languageArray24);
        gov.ca.cwds.rest.api.domain.Race[] raceArray27 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet28, raceArray27);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity32 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray33 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity32 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet34, ethnicityArray33);
        gov.ca.cwds.rest.api.domain.Person person36 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet34);
        java.lang.String str37 = person36.getSsn();
        boolean boolean38 = stringJsonUserType3.equals((java.lang.Object) race9, (java.lang.Object) str37);
        java.lang.Object obj41 = stringJsonUserType3.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        int[] intArray42 = stringJsonUserType3.sqlTypes();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor44 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringJsonUserType0.nullSafeSet(preparedStatement2, (java.lang.Object) intArray42, 0, sharedSessionContractImplementor44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str10.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str37.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + '#' + "'", obj41.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray42);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "Anonymous Reporter", "N");
        java.lang.String str7 = ethnicity2.getEthnicityType();
        boolean boolean9 = ethnicity2.equals((java.lang.Object) ' ');
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "15:52:54", "00001");
        java.lang.String str13 = ethnicity2.getEthnicityType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str7.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str13.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        java.lang.String str3 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date5 = clientRelationship4.getLastUpdatedTime();
        boolean boolean6 = clientRelationship0.equals((java.lang.Object) date5);
        java.lang.String str7 = clientRelationship0.getSameHomeCode();
        java.util.Date date8 = clientRelationship0.getEndDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        csecEntity0.setParticipantId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds");
        csecEntity0.setParticipantId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity4);
        java.lang.String str6 = ethnicity4.getEthnicityType();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity7 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity4);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity8 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity4);
        java.lang.String str9 = ethnicity8.getEthnicityType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setSealed((java.lang.Boolean) true);
        java.lang.Boolean boolean10 = participantEntity0.getSensitive();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId11 = personEthnicity2.getPrimaryKey();
        java.io.Serializable serializable12 = personEthnicityId11.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        personEthnicityId11.setPerson(person13);
        java.io.Serializable serializable15 = personEthnicityId11.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:15 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:15 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable15);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType17 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity21 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str22 = ethnicity21.getEthnicityType();
        java.lang.Long long23 = ethnicity21.getId();
        gov.ca.cwds.data.persistence.ns.Person person24 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity26 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person24, ethnicity25);
        java.util.Date date27 = personEthnicity26.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person28 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity29 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity30 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person28, ethnicity29);
        java.util.Date date31 = personEthnicity30.getLastUpdatedTime();
        boolean boolean32 = personEthnicity26.equals((java.lang.Object) personEthnicity30);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId33 = personEthnicity30.getPrimaryKey();
        java.io.Serializable serializable34 = personEthnicityId33.getPrimaryKey();
        boolean boolean35 = stringArrayType17.equals((java.lang.Object) long23, (java.lang.Object) personEthnicityId33);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity39 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 100L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId");
        boolean boolean40 = stringArrayType0.equals((java.lang.Object) stringArrayType17, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId");
        java.sql.PreparedStatement preparedStatement41 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity42 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor44 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringArrayType17.nullSafeSet(preparedStatement41, (java.lang.Object) personEthnicity42, (int) 'a', sharedSessionContractImplementor44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "hi!" + "'", str22.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:15 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date31);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Sep 03 15:53:15 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor6 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter7 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role1, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor6);
        java.lang.String str8 = hOIReporter7.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role9 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter15 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role9, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor14);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role16 = hOIReporter15.getRole();
        boolean boolean17 = hOIReporter7.equals((java.lang.Object) hOIReporter15);
        boolean boolean18 = csecEntity0.equals((java.lang.Object) hOIReporter15);
        java.time.LocalDate localDate19 = csecEntity0.getEndDate();
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03-15.52.55.282" + "'", str8.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role16 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role16.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId11 = personEthnicity2.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = personEthnicity2.getEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:15 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:15 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ethnicity12);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        int[] intArray39 = stringJsonUserType0.sqlTypes();
        int[] intArray40 = stringJsonUserType0.sqlTypes();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray40);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        java.lang.String str11 = address8.getStreetAddress();
        java.lang.String str12 = address8.getStreetAddress();
        java.lang.String str13 = address8.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str11.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str12.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str13.equals("yyyy-MM-dd HH:mm:ss.SSS"));
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        java.lang.Object obj9 = stringArrayType0.assemble((java.io.Serializable) role1, (java.lang.Object) strArray8);
        java.lang.Class<java.lang.String[]> strArrayClass10 = stringArrayType0.returnedClass();
        java.sql.ResultSet resultSet11 = null;
        java.lang.String[] strArray17 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor18 = null;
        java.lang.Object obj20 = stringArrayType0.nullSafeGet(resultSet11, strArray17, sharedSessionContractImplementor18, (java.lang.Object) 1);
        java.lang.Object obj21 = null;
        java.lang.Object obj22 = stringArrayType0.deepCopy(obj21);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity23 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean24 = participantEntity23.getProbationYouth();
        participantEntity23.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity23.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray29 = participantEntity23.getLanguages();
        participantEntity23.setFirstName("2019-09-03-15.52.55.282");
        java.lang.Boolean boolean32 = participantEntity23.getSensitive();
        java.lang.String str33 = participantEntity23.getApproximateAgeUnits();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = stringArrayType0.deepCopy((java.lang.Object) str33);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to [Ljava.lang.String;");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str33.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("2019-09-03T15:53:11.857-0700", "15:53:08");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 1L, "yyyy-_m_m-dd _h_h:mm:ss._s_s_s", "2019-09-03", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId");
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.util.Set<gov.ca.cwds.rest.api.domain.Language> languageSet28 = person25.getLanguage();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship29 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date30 = clientRelationship29.getLastUpdatedTime();
        java.lang.String str31 = clientRelationship29.getSecondaryClientId();
        java.lang.String str32 = clientRelationship29.getLastUpdatedId();
        boolean boolean33 = person25.equals((java.lang.Object) clientRelationship29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageSet28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Class class36 = stringJsonUserType0.returnedClass();
        gov.ca.cwds.data.persistence.ns.Person person37 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity41 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity42 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person37, ethnicity41);
        java.lang.String str43 = ethnicity41.getEthnicityType();
        gov.ca.cwds.data.persistence.ns.Race race47 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) (-1L), "2019-09-03T15:53:11.506Z", "2019-09-03-15.53.08.216");
        boolean boolean48 = stringJsonUserType0.equals((java.lang.Object) ethnicity41, (java.lang.Object) race47);
        java.util.Date date49 = race47.getLastUpdatedTime();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "hi!" + "'", str43.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date49);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId11 = personEthnicity2.getPrimaryKey();
        java.io.Serializable serializable12 = personEthnicityId11.getPrimaryKey();
        boolean boolean14 = personEthnicityId11.equals((java.lang.Object) "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.data.persistence.ns.Person person15 = null;
        personEthnicityId11.setPerson(person15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:15 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:15 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setScreeningId("00001");
        java.lang.Boolean boolean10 = participantEntity0.getSealed();
        java.lang.String str11 = participantEntity0.getSsn();
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity12 = participantEntity0.getSafelySurrenderedBabies();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(safelySurrenderedBabiesEntity12);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId11 = personEthnicity2.getPrimaryKey();
        java.io.Serializable serializable12 = personEthnicityId11.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        personEthnicityId11.setPerson(person13);
        boolean boolean16 = personEthnicityId11.equals((java.lang.Object) "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:16 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:16 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 10L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "2019-09-03T15:53:08.285-0700", "2019-09-03T15:53:10.189Z");
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.camelCaseToLowerUnderscore("15:53:10");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "15:53:10" + "'", str1.equals("15:53:10"));
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        participantEntity0.setDateOfBirth(date33);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:16 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:16 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:16 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:16 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "15:53:16" + "'", str36.equals("15:53:16"));
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        java.lang.String[] strArray2 = participantEntity0.getRoles();
        java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = participantEntity0.getCsecs();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity4 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity5 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int6 = csecEntity5.getId();
        java.lang.String str7 = csecEntity5.getParticipantId();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity8 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        csecEntity8.setParticipantId("Y");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity11 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity12 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int13 = csecEntity12.getId();
        csecEntity12.setParticipantId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity16 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role17 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor22 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter23 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role17, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor22);
        java.lang.String str24 = hOIReporter23.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role25 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor30 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter31 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role25, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor30);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role32 = hOIReporter31.getRole();
        boolean boolean33 = hOIReporter23.equals((java.lang.Object) hOIReporter31);
        boolean boolean34 = csecEntity16.equals((java.lang.Object) hOIReporter31);
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity35 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int36 = csecEntity35.getId();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity37 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int38 = csecEntity37.getId();
        csecEntity37.setParticipantId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds");
        java.lang.String str41 = csecEntity37.getCsecCodeId();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray42 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] { csecEntity4, csecEntity5, csecEntity8, csecEntity11, csecEntity12, csecEntity16, csecEntity35, csecEntity37 };
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList43 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList43, csecEntityArray42);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList43);
        java.lang.String str46 = participantEntity0.getSsn();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertTrue("'" + role17 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role17.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "2019-09-03-15.52.55.282" + "'", str24.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role25 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role25.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role32 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role32.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        int[] intArray2 = stringJsonUserType0.sqlTypes();
        boolean boolean3 = stringJsonUserType0.isMutable();
        java.sql.PreparedStatement preparedStatement4 = null;
        gov.ca.cwds.rest.api.domain.Race race7 = new gov.ca.cwds.rest.api.domain.Race("2019-09-03-15.53.05.703", "yyyy-MM-dd HH:mm:ss.SSS");
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringJsonUserType0.nullSafeSet(preparedStatement4, (java.lang.Object) race7, (int) (byte) 100, sharedSessionContractImplementor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        java.lang.String str4 = race3.getRaceType();
        java.lang.Long long5 = race3.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str4.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5.equals(0L));
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str29.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "Anonymous Reporter", "N");
        java.lang.String str7 = ethnicity2.getEthnicityType();
        boolean boolean9 = ethnicity2.equals((java.lang.Object) ' ');
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
        java.lang.String str13 = ethnicity2.getSubEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str7.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str13.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        address8.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter13 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray21 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet22, addressArray21);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray24 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, phoneNumberArray24);
        gov.ca.cwds.rest.api.domain.Language[] languageArray27 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet28, languageArray27);
        gov.ca.cwds.rest.api.domain.Race[] raceArray30 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet31, raceArray30);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity35 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray36 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity35 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet37 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37, ethnicityArray36);
        gov.ca.cwds.rest.api.domain.Person person39 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37);
        boolean boolean40 = hOIReporter13.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter13.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor50 = null;
        gov.ca.cwds.rest.api.domain.Address address51 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor50);
        java.lang.String str52 = address51.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor53 = address51.getLegacyDescriptor();
        hOIReporter13.setLegacyDescriptor(legacyDescriptor53);
        org.joda.time.DateTime dateTime55 = null;
        legacyDescriptor53.setLastUpdated(dateTime55);
        address8.setLegacyDescriptor(legacyDescriptor53);
        java.lang.Integer int58 = address8.getState();
        java.lang.String str59 = address8.getLegacySourceTable();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str52.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58.equals(100));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str59.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        participantEntity0.setSsn("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        java.lang.String str8 = participantEntity0.getApproximateAgeUnits();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str8.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.fromString("15:52:54");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity40 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType42 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role43 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity44 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean45 = participantEntity44.getProbationYouth();
        participantEntity44.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity44.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray50 = participantEntity44.getLanguages();
        java.lang.Object obj51 = stringArrayType42.assemble((java.io.Serializable) role43, (java.lang.Object) strArray50);
        java.lang.Class<java.lang.String[]> strArrayClass52 = stringArrayType42.returnedClass();
        java.sql.ResultSet resultSet53 = null;
        java.lang.String[] strArray59 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor60 = null;
        java.lang.Object obj62 = stringArrayType42.nullSafeGet(resultSet53, strArray59, sharedSessionContractImplementor60, (java.lang.Object) 1);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity63 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean64 = participantEntity63.getProbationYouth();
        participantEntity63.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity63.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray69 = participantEntity63.getLanguages();
        java.lang.String[] strArray70 = participantEntity63.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity82 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("hi!", date5, date12, "2019-09-03-15.53.07.205", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.05.703", "yyyy-MM-dd-HH.mm.ss.SSS", screeningEntity40, "yyyy-MM-dd HH:mm:ss.SSS", strArray59, strArray70, "", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:08.733-0700", "", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", (java.lang.Boolean) false, (java.lang.Boolean) false, (java.lang.Boolean) true, "2019-09-03T15:53:08.733-0700", "15:53:08", (java.lang.Boolean) true);
        gov.ca.cwds.data.persistence.ns.Person person83 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity84 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity85 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person83, ethnicity84);
        java.util.Date date86 = personEthnicity85.getLastUpdatedTime();
        java.util.Date date87 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date86);
        java.lang.String str88 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date87);
        java.lang.String str89 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date87);
        participantEntity82.setDateOfBirth(date87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:17 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:17 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:17.174Z" + "'", str6.equals("2019-09-03T15:53:17.174Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:17 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:17 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:17 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:17 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "2019-09-03" + "'", str35.equals("2019-09-03"));
        org.junit.Assert.assertTrue("'" + role43 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role43.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj51.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date86);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date86.toString(), "Tue Sep 03 15:53:17 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date87);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date87.toString(), "Tue Sep 03 15:53:17 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str88 + "' != '" + "15:53:17" + "'", str88.equals("15:53:17"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str89 + "' != '" + "2019-09-03T15:53:17.177-0700" + "'", str89.equals("2019-09-03T15:53:17.177-0700"));
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        gov.ca.cwds.rest.api.domain.Language language1 = new gov.ca.cwds.rest.api.domain.Language("2019-09-03T15:53:04.320-0700");
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor10 = address8.getLegacyDescriptor();
        java.lang.String str11 = legacyDescriptor10.getTableName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getLastName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.Race> raceSet29 = person25.getRace();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str26.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str28.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceSet29);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity12 = null;
        participantEntity0.setSafelySurrenderedBabies(safelySurrenderedBabiesEntity12);
        java.lang.Boolean boolean14 = participantEntity0.getSensitive();
        gov.ca.cwds.rest.api.domain.ParticipantIntakeApi participantIntakeApi15 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity16 = participantEntity0.updateFrom(participantIntakeApi15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean14);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor7);
        java.lang.String str9 = address8.getLegacyId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds" + "'", str9.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds"));
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity3 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean4 = participantEntity3.getProbationYouth();
        participantEntity3.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity3.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray9 = participantEntity3.getLanguages();
        java.lang.String[] strArray10 = participantEntity3.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person14 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity15 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity16 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person14, ethnicity15);
        java.util.Date date17 = personEthnicity16.getLastUpdatedTime();
        java.lang.String str18 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date17);
        java.lang.String str19 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date17);
        gov.ca.cwds.data.persistence.ns.Person person24 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity26 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person24, ethnicity25);
        java.util.Date date27 = personEthnicity26.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person28 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity29 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity30 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person28, ethnicity29);
        java.util.Date date31 = personEthnicity30.getLastUpdatedTime();
        boolean boolean32 = personEthnicity26.equals((java.lang.Object) personEthnicity30);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity36 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity26.setEthnicity(ethnicity36);
        java.util.Date date38 = personEthnicity26.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship39 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date17, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date38);
        java.lang.String str40 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date38);
        gov.ca.cwds.data.persistence.ns.Person person41 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity42 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity43 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person41, ethnicity42);
        java.util.Date date44 = personEthnicity43.getLastUpdatedTime();
        java.util.Date date45 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date44);
        java.lang.String str46 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date45);
        java.lang.String str47 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date45);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity52 = null;
        java.lang.String[] strArray57 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity58 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean59 = participantEntity58.getProbationYouth();
        participantEntity58.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity58.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray64 = participantEntity58.getLanguages();
        java.lang.String[] strArray65 = participantEntity58.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity77 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date38, date45, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity52, "2019-09-03-15.52.58.871", strArray57, strArray65, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        participantEntity3.setDateOfBirth(date38);
        participantEntity0.setDateOfDeath(date38);
        java.lang.String str80 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date17);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "2019-09-03" + "'", str18.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "2019-09-03" + "'", str19.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date31);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date38);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str40 + "' != '" + "2019-09-03T15:53:18.111-0700" + "'", str40.equals("2019-09-03T15:53:18.111-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date44);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date45);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str46 + "' != '" + "15:53:18" + "'", str46.equals("15:53:18"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str47 + "' != '" + "2019-09-03T15:53:18.111-0700" + "'", str47.equals("2019-09-03T15:53:18.111-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "2019-09-03" + "'", str80.equals("2019-09-03"));
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        participantEntity0.setEthnicity("N");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        participantEntity0.setSealed((java.lang.Boolean) false);
        participantEntity0.setNameSuffix("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
        participantEntity0.setApproximateAgeUnits("15:53:15");
        gov.ca.cwds.rest.api.domain.ParticipantIntakeApi participantIntakeApi17 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity18 = participantEntity0.updateFrom(participantIntakeApi17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.camelCaseToLowerUnderscore("2019-09-03T15:53:04.984-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "2019-09-03_t15:53:04.984-0700" + "'", str1.equals("2019-09-03_t15:53:04.984-0700"));
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookBooleanString("2019-09-03-15.53.00.269");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unable to generate boolean");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        java.lang.Boolean boolean3 = participantEntity0.getProbationYouth();
        gov.ca.cwds.rest.api.domain.ParticipantIntakeApi participantIntakeApi4 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity5 = participantEntity0.updateFrom(participantIntakeApi4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        java.lang.String str4 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date3);
        java.lang.String str5 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "2019-09-03" + "'", str4.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str5 + "' != '" + "2019-09-03-15.53.18.535" + "'", str5.equals("2019-09-03-15.53.18.535"));
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        participantEntity0.setFirstName("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId");
        participantEntity0.setProbationYouth((java.lang.Boolean) true);
        participantEntity0.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str5 = ethnicity4.getEthnicityType();
        java.lang.Long long6 = ethnicity4.getId();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        boolean boolean15 = personEthnicity9.equals((java.lang.Object) personEthnicity13);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId16 = personEthnicity13.getPrimaryKey();
        java.io.Serializable serializable17 = personEthnicityId16.getPrimaryKey();
        boolean boolean18 = stringArrayType0.equals((java.lang.Object) long6, (java.lang.Object) personEthnicityId16);
        java.sql.ResultSet resultSet19 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType20 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role21 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity22 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean23 = participantEntity22.getProbationYouth();
        participantEntity22.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity22.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray28 = participantEntity22.getLanguages();
        java.lang.Object obj29 = stringArrayType20.assemble((java.io.Serializable) role21, (java.lang.Object) strArray28);
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor30 = null;
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person35 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity36 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity37 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person35, ethnicity36);
        java.util.Date date38 = personEthnicity37.getLastUpdatedTime();
        boolean boolean39 = personEthnicity33.equals((java.lang.Object) personEthnicity37);
        boolean boolean41 = personEthnicity33.equals((java.lang.Object) (-1.0f));
        java.lang.Object obj42 = stringArrayType0.nullSafeGet(resultSet19, strArray28, sharedSessionContractImplementor30, (java.lang.Object) (-1.0f));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + role21 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role21.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj29.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date38);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj42);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getFirstName();
        hOIReporter0.setLastName("2019-09-03T15:53:04.984-0700");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor31 = hOIReporter0.getLegacyDescriptor();
        java.lang.String str32 = legacyDescriptor31.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookLocalDateString("2019-09-03T15:53:05.518-0700");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.time.format.DateTimeParseException: Text '2019-09-03T15:53:05.518-0700' could not be parsed, unparsed text found at index 10");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = null;
        gov.ca.cwds.rest.api.domain.Address address15 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor14);
        java.lang.String str16 = address15.getCity();
        java.lang.Integer int17 = address15.getType();
        java.lang.String str18 = address15.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter19 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        boolean boolean20 = address15.equals((java.lang.Object) hOIReporter19);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor21 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor21.setId("2019-09-03-15.52.55.282");
        hOIReporter19.setLegacyDescriptor(legacyDescriptor21);
        gov.ca.cwds.rest.api.domain.Address address25 = new gov.ca.cwds.rest.api.domain.Address("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s_z", "2019-09-03T15:53:10.356Z", "2019-09-03T15:53:10.585-0700", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) (-1), "2019-09-03T15:53:14.005-0700", (java.lang.Integer) 100, legacyDescriptor21);
        java.lang.Integer int26 = address25.getState();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str16.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str18.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26.equals((-1)));
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.toJson();
        hOIReporter0.setLastName("yyyy-_m_m-dd _h_h:mm:ss._s_s_s");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role32 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        hOIReporter0.setRole(role32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str29.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        org.junit.Assert.assertTrue("'" + role32 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role32.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        java.lang.String str3 = clientRelationship0.getLastUpdatedId();
        java.lang.Short short4 = clientRelationship0.getClientRelationshipType();
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity11 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity12 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity11);
        java.util.Date date13 = personEthnicity12.getLastUpdatedTime();
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date13);
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date13);
        gov.ca.cwds.data.persistence.ns.Person person20 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity21 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity22 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person20, ethnicity21);
        java.util.Date date23 = personEthnicity22.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person24 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity26 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person24, ethnicity25);
        java.util.Date date27 = personEthnicity26.getLastUpdatedTime();
        boolean boolean28 = personEthnicity22.equals((java.lang.Object) personEthnicity26);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity22.setEthnicity(ethnicity32);
        java.util.Date date34 = personEthnicity22.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship35 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date13, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date34);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date34);
        gov.ca.cwds.data.persistence.ns.Person person37 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity38 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity39 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person37, ethnicity38);
        java.util.Date date40 = personEthnicity39.getLastUpdatedTime();
        java.util.Date date41 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date40);
        java.lang.String str42 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date41);
        java.lang.String str43 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date41);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity48 = null;
        java.lang.String[] strArray53 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity54 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean55 = participantEntity54.getProbationYouth();
        participantEntity54.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity54.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray60 = participantEntity54.getLanguages();
        java.lang.String[] strArray61 = participantEntity54.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity73 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date34, date41, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity48, "2019-09-03-15.52.58.871", strArray53, strArray61, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        gov.ca.cwds.data.persistence.ns.Person person78 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity79 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity80 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person78, ethnicity79);
        java.util.Date date81 = personEthnicity80.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person82 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity83 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity84 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person82, ethnicity83);
        java.util.Date date85 = personEthnicity84.getLastUpdatedTime();
        boolean boolean86 = personEthnicity80.equals((java.lang.Object) personEthnicity84);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity90 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity80.setEthnicity(ethnicity90);
        java.util.Date date92 = personEthnicity80.getLastUpdatedTime();
        java.lang.String str93 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date92);
        java.lang.String str94 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date92);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship95 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("15:53:05", (java.lang.Short) (short) 1, date34, "2019-09-03T15:52:59.197-0700", "2019-09-03-15.53.05.294", "2019-09-03T15:53:05.518Z", "2019-09-03-15.53.00.269", date92);
        java.lang.String str96 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date34);
        clientRelationship0.setLastUpdatedTime(date34);
        java.lang.String str98 = clientRelationship0.getSecondaryClientId();
        java.lang.String str99 = clientRelationship0.getSecondaryClientId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(short4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03" + "'", str15.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date23);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "2019-09-03T15:53:18.945-0700" + "'", str36.equals("2019-09-03T15:53:18.945-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date40);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date41);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str42 + "' != '" + "15:53:18" + "'", str42.equals("15:53:18"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str43 + "' != '" + "2019-09-03T15:53:18.945-0700" + "'", str43.equals("2019-09-03T15:53:18.945-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date81);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date81.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date85);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date85.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date92);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date92.toString(), "Tue Sep 03 15:53:18 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str93 + "' != '" + "2019-09-03-15.53.18.945" + "'", str93.equals("2019-09-03-15.53.18.945"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str94 + "' != '" + "15:53:18" + "'", str94.equals("15:53:18"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str96 + "' != '" + "2019-09-03T15:53:18.945Z" + "'", str96.equals("2019-09-03T15:53:18.945Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getLastName();
        java.lang.String str28 = person25.getGender();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str27.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.getFirstName();
        hOIReporter0.setId("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType32 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship33 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship33.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role36 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean37 = stringJsonUserType32.equals((java.lang.Object) "", (java.lang.Object) role36);
        hOIReporter0.setRole(role36);
        java.lang.String str39 = hOIReporter0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + role36 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role36.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        java.lang.Boolean boolean11 = participantEntity0.getEstimatedDob();
        participantEntity0.setFirstName("15:53:06");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        gov.ca.cwds.rest.api.domain.Language language1 = new gov.ca.cwds.rest.api.domain.Language("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId");
        java.lang.String str2 = language1.getTheLanguage();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter3 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role4 = hOIReporter3.getRole();
        boolean boolean5 = language1.equals((java.lang.Object) role4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId" + "'", str2.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor0.setId("2019-09-03-15.52.55.282");
        java.lang.String str3 = legacyDescriptor0.getUiId();
        java.lang.String str4 = legacyDescriptor0.getUiId();
        java.lang.String str5 = legacyDescriptor0.getUiId();
        legacyDescriptor0.setUiId("2019-09-03-15.53.08.216");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String str6 = participantEntity0.getGender();
        java.lang.String str7 = participantEntity0.getApproximateAgeUnits();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId11 = personEthnicity2.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person12 = personEthnicity2.getPerson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:19 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:19 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person12);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 10L, "2019-09-03T15:53:10.585-0700", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId");
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity3 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList4 = ethnicity3.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity7 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity3, "Anonymous Reporter", "N");
        java.lang.String str8 = ethnicity7.getSubEthnicity();
        java.util.Date date9 = ethnicity7.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity10 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity7);
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet11 = ethnicity7.getPersonEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str8.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date9);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Sep 03 15:53:19 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet11);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        gov.ca.cwds.rest.api.domain.cms.ClientRelationship clientRelationship1 = null;
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship9 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("2019-09-03T15:53:16.062Z", clientRelationship1, "2019-09-03-15.53.05.703", date6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:19 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("2019-09-03T15:53:11.506Z", "N");
        race2.setRaceType("2019-09-03T15:53:17.753Z");
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        gov.ca.cwds.data.persistence.ns.Race race0 = new gov.ca.cwds.data.persistence.ns.Race();
        java.lang.String str1 = race0.getSubRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor5);
        java.lang.String str7 = hOIReporter6.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        boolean boolean16 = hOIReporter6.equals((java.lang.Object) hOIReporter14);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role17 = hOIReporter6.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor32 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address33 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor32);
        gov.ca.cwds.rest.api.domain.Address address34 = new gov.ca.cwds.rest.api.domain.Address("N", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "2019-09-03T15:52:58.300-0700", (java.lang.Integer) (-1), "00001", (java.lang.Integer) 100, legacyDescriptor32);
        hOIReporter6.setLegacyDescriptor(legacyDescriptor32);
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03-15.52.55.282" + "'", str7.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + role17 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role17.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getMiddleName();
        person25.doSomething();
        java.lang.String str31 = person25.getNameSuffix();
        java.util.Set<gov.ca.cwds.rest.api.domain.Address> addressSet32 = person25.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str29.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "" + "'", str31.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressSet32);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "Anonymous Reporter", "N");
        java.lang.Long long7 = ethnicity6.getPrimaryKey();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity8 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long7);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.util.Set<gov.ca.cwds.rest.api.domain.Language> languageSet28 = person25.getLanguage();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity31 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList32 = ethnicity31.getMessages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity33 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean34 = participantEntity33.getProbationYouth();
        participantEntity33.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date37 = null;
        participantEntity33.setDateOfBirth(date37);
        participantEntity33.setId("_n");
        participantEntity33.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity33.setId("_n");
        java.lang.String str45 = participantEntity33.getScreeningId();
        boolean boolean46 = ethnicity31.equals((java.lang.Object) participantEntity33);
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber51 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId", "2019-09-03-15.52.55.282", "_n");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList52 = phoneNumber51.getMessages();
        ethnicity31.setMessages(errorMessageList52);
        person25.setMessages(errorMessageList52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageSet28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList52);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        java.sql.PreparedStatement preparedStatement1 = null;
        gov.ca.cwds.data.persistence.ns.Person person2 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity7 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person2, ethnicity6);
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet8 = ethnicity6.getPersonEthnicity();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringJsonUserType0.nullSafeSet(preparedStatement1, (java.lang.Object) personEthnicitySet8, (int) 'a', sharedSessionContractImplementor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet8);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getNameSuffix();
        java.lang.String str30 = person25.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str30.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.String str36 = race6.getSubRaceType();
        java.lang.String str37 = race6.getRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str36.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str37.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        java.lang.String str12 = participantEntity0.getScreeningId();
        java.lang.String str13 = participantEntity0.getFirstName();
        java.lang.String str14 = participantEntity0.getEthnicity();
        participantEntity0.setRaces("2019-09-03T15:53:11.506Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'" + "'", str14.equals("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'"));
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getMiddleName();
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber34 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId", "2019-09-03-15.52.55.282", "_n");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList35 = phoneNumber34.getMessages();
        person25.setMessages(errorMessageList35);
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList37 = person25.getMessages();
        java.lang.String str38 = person25.getMiddleName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str29.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str38.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookISO8601Timestamp("2019-09-03T15:53:05.518Z");
        java.lang.String str2 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(date1.toString(), "Tue Sep 03 15:53:05 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "2019-09-03-15.53.05.518" + "'", str2.equals("2019-09-03-15.53.05.518"));
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.lang.String str3 = ethnicity2.getSubEthnicity();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship4.setLastUpdatedId("");
        java.lang.String str7 = clientRelationship4.getSecondaryClientId();
        java.lang.String str8 = clientRelationship4.getAbsentParentCode();
        java.lang.String str9 = clientRelationship4.getSameHomeCode();
        boolean boolean10 = ethnicity2.equals((java.lang.Object) clientRelationship4);
        clientRelationship4.setLastUpdatedId("2019-09-03-15.52.55.282");
        java.lang.String str13 = clientRelationship4.getAbsentParentCode();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str3.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor0 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        java.lang.String str1 = legacyDescriptor0.getId();
        legacyDescriptor0.setTableName("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "Anonymous Reporter", "N");
        java.lang.Long long7 = ethnicity6.getId();
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet8 = ethnicity6.getPersonEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet8);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setFirstName("2019-09-03-15.52.55.282");
        java.lang.Boolean boolean9 = participantEntity0.getSensitive();
        participantEntity0.setProbationYouth((java.lang.Boolean) true);
        java.lang.String str12 = participantEntity0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str12.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter30 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray38 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet39 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet39, addressArray38);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray41 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet42 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, phoneNumberArray41);
        gov.ca.cwds.rest.api.domain.Language[] languageArray44 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet45 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet45, languageArray44);
        gov.ca.cwds.rest.api.domain.Race[] raceArray47 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet48 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet48, raceArray47);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity52 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray53 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity52 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet54 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54, ethnicityArray53);
        gov.ca.cwds.rest.api.domain.Person person56 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet39, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet42, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet45, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet48, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet54);
        boolean boolean57 = hOIReporter30.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str58 = hOIReporter30.getLastName();
        java.lang.String str59 = hOIReporter30.getFirstName();
        hOIReporter30.setId("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType62 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship63 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship63.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role66 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean67 = stringJsonUserType62.equals((java.lang.Object) "", (java.lang.Object) role66);
        hOIReporter30.setRole(role66);
        hOIReporter0.setRole(role66);
        hOIReporter0.setNameSuffix("2019-09-03T15:53:06.452-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str29.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + role66 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role66.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.camelCaseToLowerUnderscore("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "gov.ca.cwds.data.persistence.ns._participant_entity.find_participant_by_related_screening_id_and_legacy_id" + "'", str1.equals("gov.ca.cwds.data.persistence.ns._participant_entity.find_participant_by_related_screening_id_and_legacy_id"));
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor6 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter7 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role1, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor6);
        java.lang.String str8 = hOIReporter7.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role9 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter15 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role9, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor14);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role16 = hOIReporter15.getRole();
        boolean boolean17 = hOIReporter7.equals((java.lang.Object) hOIReporter15);
        boolean boolean18 = csecEntity0.equals((java.lang.Object) hOIReporter15);
        hOIReporter15.setFirstName("2019-09-03T15:53:16.206-0700");
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03-15.52.55.282" + "'", str8.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role16 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role16.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        clientRelationship0.setLastUpdatedTime(date6);
        java.lang.String str10 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:20 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str10 + "' != '" + "2019-09-03T15:53:20.723-0700" + "'", str10.equals("2019-09-03T15:53:20.723-0700"));
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.camelCaseToLowerUnderscore("2019-09-03T15:53:19.034Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "2019-09-03_t15:53:19.034_z" + "'", str1.equals("2019-09-03_t15:53:19.034_z"));
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        phoneNumber4.setId((java.lang.Long) 0L);
        phoneNumber4.setId((java.lang.Long) 10L);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str4 = ethnicity3.getEthnicityType();
        java.lang.Long long5 = ethnicity3.getId();
        java.util.Date date6 = ethnicity3.getLastUpdatedTime();
        java.lang.Long long7 = ethnicity3.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7.equals(1L));
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getLastName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = person25.getPhoneNumber();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList29 = person25.getMessages();
        java.lang.String str30 = person25.getNameSuffix();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str27.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        java.lang.String str1 = role0.getDescription();
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Mandated Reporter" + "'", str1.equals("Mandated Reporter"));
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        java.lang.String str11 = personEthnicity2.getCreateUserId();
        gov.ca.cwds.data.persistence.ns.Person person12 = null;
        personEthnicity2.setPerson(person12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:21 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:21 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        gov.ca.cwds.rest.api.domain.Language language1 = new gov.ca.cwds.rest.api.domain.Language("2019-09-03T15:53:08.732-0700");
        java.lang.String str2 = language1.getTheLanguage();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "2019-09-03T15:53:08.732-0700" + "'", str2.equals("2019-09-03T15:53:08.732-0700"));
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getCsecCodeId();
        csecEntity0.setCsecCodeId("2019-09-03-15.52.59.761");
        csecEntity0.setCsecCodeId("2019-09-03T15:53:18.945-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getLastUpdatedId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        participantEntity0.setSealed((java.lang.Boolean) false);
        java.lang.String str13 = participantEntity0.getScreeningId();
        java.lang.Boolean boolean14 = participantEntity0.getSensitive();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean14);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        java.lang.String str11 = address8.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role12 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        boolean boolean13 = address8.equals((java.lang.Object) role12);
        java.lang.String str14 = role12.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str11.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        org.junit.Assert.assertTrue("'" + role12 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role12.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Anonymous Reporter" + "'", str14.equals("Anonymous Reporter"));
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor2 = hOIReporter0.getLegacyDescriptor();
        java.lang.String str3 = legacyDescriptor2.getTableDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor10 = address8.getLegacyDescriptor();
        java.lang.String str11 = address8.getZip();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor26 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address27 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor26);
        gov.ca.cwds.rest.api.domain.Address address28 = new gov.ca.cwds.rest.api.domain.Address("N", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "2019-09-03T15:52:58.300-0700", (java.lang.Integer) (-1), "00001", (java.lang.Integer) 100, legacyDescriptor26);
        address8.setLegacyDescriptor(legacyDescriptor26);
        legacyDescriptor26.setTableDescription("2019-09-03T15:53:15.986Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "HH:mm:ss" + "'", str11.equals("HH:mm:ss"));
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray47 = stringArrayType0.sqlTypes();
        int[] intArray48 = stringArrayType0.sqlTypes();
        java.lang.Class<java.lang.String[]> strArrayClass49 = stringArrayType0.returnedClass();
        java.lang.Class<?> wildcardClass50 = stringArrayType0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        java.lang.Object obj9 = stringArrayType0.assemble((java.io.Serializable) role1, (java.lang.Object) strArray8);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor17 = null;
        gov.ca.cwds.rest.api.domain.Address address18 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor17);
        java.lang.String str19 = address18.getCity();
        java.lang.Integer int20 = address18.getType();
        address18.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.Object obj23 = null;
        boolean boolean24 = stringArrayType0.equals((java.lang.Object) address18, obj23);
        java.lang.String str25 = address18.getCity();
        java.lang.String str26 = address18.getCity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter27 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray35 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet36 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet36, addressArray35);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray38 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet39 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet39, phoneNumberArray38);
        gov.ca.cwds.rest.api.domain.Language[] languageArray41 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet42 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet42, languageArray41);
        gov.ca.cwds.rest.api.domain.Race[] raceArray44 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet45 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet45, raceArray44);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity49 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray50 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity49 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet51 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet51, ethnicityArray50);
        gov.ca.cwds.rest.api.domain.Person person53 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet36, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet39, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet42, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet45, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet51);
        boolean boolean54 = hOIReporter27.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter27.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor64 = null;
        gov.ca.cwds.rest.api.domain.Address address65 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor64);
        java.lang.String str66 = address65.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor67 = address65.getLegacyDescriptor();
        hOIReporter27.setLegacyDescriptor(legacyDescriptor67);
        address18.setLegacyDescriptor(legacyDescriptor67);
        java.lang.String str70 = address18.getCity();
        java.lang.Integer int71 = address18.getType();
        java.lang.String str72 = address18.getCity();
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str19.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str25.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str26.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str66.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str70.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str72 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str72.equals("yyyy-MM-dd HH:mm:ss.SSS"));
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) (-1L), "yyyy-MM-dd", "2019-09-03T15:53:17.174Z", "yyyy-MM-dd-HH.mm.ss.SSS");
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        csecEntity0.setParticipantId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.time.LocalDate localDate3 = null;
        csecEntity0.setEndDate(localDate3);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity40 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType42 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role43 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity44 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean45 = participantEntity44.getProbationYouth();
        participantEntity44.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity44.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray50 = participantEntity44.getLanguages();
        java.lang.Object obj51 = stringArrayType42.assemble((java.io.Serializable) role43, (java.lang.Object) strArray50);
        java.lang.Class<java.lang.String[]> strArrayClass52 = stringArrayType42.returnedClass();
        java.sql.ResultSet resultSet53 = null;
        java.lang.String[] strArray59 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor60 = null;
        java.lang.Object obj62 = stringArrayType42.nullSafeGet(resultSet53, strArray59, sharedSessionContractImplementor60, (java.lang.Object) 1);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity63 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean64 = participantEntity63.getProbationYouth();
        participantEntity63.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity63.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray69 = participantEntity63.getLanguages();
        java.lang.String[] strArray70 = participantEntity63.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity82 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("hi!", date5, date12, "2019-09-03-15.53.07.205", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.05.703", "yyyy-MM-dd-HH.mm.ss.SSS", screeningEntity40, "yyyy-MM-dd HH:mm:ss.SSS", strArray59, strArray70, "", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:08.733-0700", "", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", (java.lang.Boolean) false, (java.lang.Boolean) false, (java.lang.Boolean) true, "2019-09-03T15:53:08.733-0700", "15:53:08", (java.lang.Boolean) true);
        gov.ca.cwds.data.persistence.ns.Person person83 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity84 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity85 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person83, ethnicity84);
        java.util.Date date86 = personEthnicity85.getLastUpdatedTime();
        java.util.Date date87 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date86);
        java.lang.String str88 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date86);
        java.lang.String str89 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date86);
        java.util.Date date90 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date86);
        java.util.Date date91 = gov.ca.cwds.rest.api.domain.DomainChef.concatenateDateAndTime(date12, date90);
        java.lang.String str92 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:21 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:21 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:21.879Z" + "'", str6.equals("2019-09-03T15:53:21.879Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:21 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:21 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:21 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:21 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "2019-09-03" + "'", str35.equals("2019-09-03"));
        org.junit.Assert.assertTrue("'" + role43 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role43.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj51.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date86);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date86.toString(), "Tue Sep 03 15:53:21 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date87);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date87.toString(), "Tue Sep 03 15:53:21 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str88 + "' != '" + "2019-09-03-15.53.21.883" + "'", str88.equals("2019-09-03-15.53.21.883"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "2019-09-03" + "'", str89.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date90);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date90.toString(), "Tue Sep 03 15:53:21 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date91);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date91.toString(), "Tue Sep 03 15:53:21 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str92 + "' != '" + "2019-09-03T15:53:21.883-0700" + "'", str92.equals("2019-09-03T15:53:21.883-0700"));
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        java.lang.String[] strArray7 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date14);
        java.lang.String str16 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date14);
        gov.ca.cwds.data.persistence.ns.Person person21 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity22 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity23 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person21, ethnicity22);
        java.util.Date date24 = personEthnicity23.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person25 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity27 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person25, ethnicity26);
        java.util.Date date28 = personEthnicity27.getLastUpdatedTime();
        boolean boolean29 = personEthnicity23.equals((java.lang.Object) personEthnicity27);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity33 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity23.setEthnicity(ethnicity33);
        java.util.Date date35 = personEthnicity23.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship36 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date14, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date35);
        java.lang.String str37 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date35);
        gov.ca.cwds.data.persistence.ns.Person person38 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity39 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity40 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person38, ethnicity39);
        java.util.Date date41 = personEthnicity40.getLastUpdatedTime();
        java.util.Date date42 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date41);
        java.lang.String str43 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date42);
        java.lang.String str44 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date42);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity49 = null;
        java.lang.String[] strArray54 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity55 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean56 = participantEntity55.getProbationYouth();
        participantEntity55.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity55.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray61 = participantEntity55.getLanguages();
        java.lang.String[] strArray62 = participantEntity55.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity74 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date35, date42, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity49, "2019-09-03-15.52.58.871", strArray54, strArray62, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        participantEntity0.setDateOfBirth(date35);
        java.lang.Boolean boolean76 = participantEntity0.getSensitive();
        participantEntity0.setApproximateAgeUnits("2019-09-03T15:53:10.189-0700");
        java.lang.Boolean boolean79 = participantEntity0.getEstimatedDob();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03" + "'", str15.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "2019-09-03" + "'", str16.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date24);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date35);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str37 + "' != '" + "2019-09-03T15:53:22.004-0700" + "'", str37.equals("2019-09-03T15:53:22.004-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date41);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date42);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str43 + "' != '" + "15:53:22" + "'", str43.equals("15:53:22"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str44 + "' != '" + "2019-09-03T15:53:22.004-0700" + "'", str44.equals("2019-09-03T15:53:22.004-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean79);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getEndDate();
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.util.Date date7 = personEthnicity5.getCreateDateTime();
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date7);
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date14);
        java.lang.String str16 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date14);
        gov.ca.cwds.data.persistence.ns.Person person21 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity22 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity23 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person21, ethnicity22);
        java.util.Date date24 = personEthnicity23.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person25 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity27 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person25, ethnicity26);
        java.util.Date date28 = personEthnicity27.getLastUpdatedTime();
        boolean boolean29 = personEthnicity23.equals((java.lang.Object) personEthnicity27);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity33 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity23.setEthnicity(ethnicity33);
        java.util.Date date35 = personEthnicity23.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship36 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date14, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date35);
        java.lang.String str37 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date14);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity42 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType44 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role45 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity46 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean47 = participantEntity46.getProbationYouth();
        participantEntity46.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity46.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray52 = participantEntity46.getLanguages();
        java.lang.Object obj53 = stringArrayType44.assemble((java.io.Serializable) role45, (java.lang.Object) strArray52);
        java.lang.Class<java.lang.String[]> strArrayClass54 = stringArrayType44.returnedClass();
        java.sql.ResultSet resultSet55 = null;
        java.lang.String[] strArray61 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor62 = null;
        java.lang.Object obj64 = stringArrayType44.nullSafeGet(resultSet55, strArray61, sharedSessionContractImplementor62, (java.lang.Object) 1);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity65 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean66 = participantEntity65.getProbationYouth();
        participantEntity65.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity65.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray71 = participantEntity65.getLanguages();
        java.lang.String[] strArray72 = participantEntity65.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity84 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("hi!", date7, date14, "2019-09-03-15.53.07.205", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.05.703", "yyyy-MM-dd-HH.mm.ss.SSS", screeningEntity42, "yyyy-MM-dd HH:mm:ss.SSS", strArray61, strArray72, "", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:08.733-0700", "", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", (java.lang.Boolean) false, (java.lang.Boolean) false, (java.lang.Boolean) true, "2019-09-03T15:53:08.733-0700", "15:53:08", (java.lang.Boolean) true);
        boolean boolean85 = clientRelationship0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03T15:53:22.048Z" + "'", str8.equals("2019-09-03T15:53:22.048Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03" + "'", str15.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "2019-09-03" + "'", str16.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date24);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date35);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "2019-09-03" + "'", str37.equals("2019-09-03"));
        org.junit.Assert.assertTrue("'" + role45 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role45.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + obj53 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj53.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor7);
        java.lang.String str9 = address8.getStreetAddress();
        java.lang.Integer int10 = address8.getType();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor18 = null;
        gov.ca.cwds.rest.api.domain.Address address19 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor18);
        java.lang.String str20 = address19.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor21 = address19.getLegacyDescriptor();
        java.lang.Object obj22 = null;
        boolean boolean23 = legacyDescriptor21.equals(obj22);
        address8.setLegacyDescriptor(legacyDescriptor21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str9.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10.equals(10));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str20.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        java.lang.String str4 = race3.getRaceType();
        java.util.Date date5 = race3.getLastUpdatedTime();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str4.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date5);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookISO8601Timestamp("2019-09-03T15:53:16.062Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(date1.toString(), "Tue Sep 03 15:53:16 PDT 2019");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.camelCaseToLowerUnderscore("2019-09-03-15.53.08.285");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "2019-09-03-15.53.08.285" + "'", str1.equals("2019-09-03-15.53.08.285"));
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        boolean boolean7 = participantEntity0.equals((java.lang.Object) '4');
        java.lang.String str8 = participantEntity0.getMiddleName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        csecEntity0.setParticipantId("15:52:54");
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        gov.ca.cwds.rest.api.domain.Language language1 = new gov.ca.cwds.rest.api.domain.Language("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId");
        java.lang.String str2 = language1.getTheLanguage();
        java.lang.String str3 = language1.getTheLanguage();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId" + "'", str2.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId" + "'", str3.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId"));
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        participantEntity0.setRelatedScreeningId("15:52:59");
        java.lang.String[] strArray14 = participantEntity0.getRoles();
        participantEntity0.setSealed((java.lang.Boolean) false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookLocalDateString("2019-09-03T15:53:05.703Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.time.format.DateTimeParseException: Text '2019-09-03T15:53:05.703Z' could not be parsed, unparsed text found at index 10");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId");
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet4 = ethnicity3.getPersonEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet4);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor5);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role7 = hOIReporter6.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor12 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor12.setId("2019-09-03-15.52.55.282");
        java.lang.String str15 = legacyDescriptor12.getUiId();
        java.lang.String str16 = legacyDescriptor12.getUiId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter17 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role7, "HH:mm:ss", "Y", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.02.984", legacyDescriptor12);
        java.lang.String str18 = role7.toString();
        java.lang.String str19 = role7.getDescription();
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role7 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role7.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Anonymous Reporter" + "'", str18.equals("Anonymous Reporter"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Anonymous Reporter" + "'", str19.equals("Anonymous Reporter"));
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Class class36 = stringJsonUserType0.returnedClass();
        java.sql.ResultSet resultSet37 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType38 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role39 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity40 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean41 = participantEntity40.getProbationYouth();
        participantEntity40.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity40.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray46 = participantEntity40.getLanguages();
        java.lang.Object obj47 = stringArrayType38.assemble((java.io.Serializable) role39, (java.lang.Object) strArray46);
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor48 = null;
        gov.ca.cwds.rest.api.domain.Race race51 = new gov.ca.cwds.rest.api.domain.Race("_n", "");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor59 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address60 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor59);
        java.lang.String str61 = address60.getStreetAddress();
        boolean boolean62 = race51.equals((java.lang.Object) str61);
        race51.setSubRaceType("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj65 = stringJsonUserType0.nullSafeGet(resultSet37, strArray46, sharedSessionContractImplementor48, (java.lang.Object) "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertTrue("'" + role39 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role39.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj47.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str61.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        gov.ca.cwds.data.persistence.ns.Person person2 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity4 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person2, ethnicity3);
        java.util.Date date5 = personEthnicity4.getLastUpdatedTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date5);
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date5);
        gov.ca.cwds.data.persistence.ns.Person person12 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity14 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person12, ethnicity13);
        java.util.Date date15 = personEthnicity14.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person16 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity17 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity18 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person16, ethnicity17);
        java.util.Date date19 = personEthnicity18.getLastUpdatedTime();
        boolean boolean20 = personEthnicity14.equals((java.lang.Object) personEthnicity18);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity14.setEthnicity(ethnicity24);
        java.util.Date date26 = personEthnicity14.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship27 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date5, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date26);
        java.lang.String str28 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03" + "'", str6.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date15);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date19);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:22 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str28 + "' != '" + "2019-09-03T15:53:22.883-0700" + "'", str28.equals("2019-09-03T15:53:22.883-0700"));
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("15:53:06", "2019-09-03-15.53.00.269");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str3 = participantEntity0.getScreeningId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        java.lang.String[] strArray2 = participantEntity0.getRoles();
        java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = participantEntity0.getCsecs();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity4 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity5 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int6 = csecEntity5.getId();
        java.lang.String str7 = csecEntity5.getParticipantId();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity8 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        csecEntity8.setParticipantId("Y");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity11 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity12 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int13 = csecEntity12.getId();
        csecEntity12.setParticipantId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity16 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role17 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor22 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter23 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role17, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor22);
        java.lang.String str24 = hOIReporter23.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role25 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor30 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter31 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role25, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor30);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role32 = hOIReporter31.getRole();
        boolean boolean33 = hOIReporter23.equals((java.lang.Object) hOIReporter31);
        boolean boolean34 = csecEntity16.equals((java.lang.Object) hOIReporter31);
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity35 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int36 = csecEntity35.getId();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity37 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int38 = csecEntity37.getId();
        csecEntity37.setParticipantId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds");
        java.lang.String str41 = csecEntity37.getCsecCodeId();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray42 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] { csecEntity4, csecEntity5, csecEntity8, csecEntity11, csecEntity12, csecEntity16, csecEntity35, csecEntity37 };
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList43 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList43, csecEntityArray42);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList43);
        java.util.Date date46 = participantEntity0.getDateOfDeath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertTrue("'" + role17 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role17.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "2019-09-03-15.52.55.282" + "'", str24.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role25 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role25.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role32 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role32.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date46);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.fromString("15:53:08");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.camelCaseToLowerUnderscore("2019-09-03T15:53:17.177-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "2019-09-03_t15:53:17.177-0700" + "'", str1.equals("2019-09-03_t15:53:17.177-0700"));
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        boolean boolean7 = participantEntity0.equals((java.lang.Object) '4');
        java.lang.String str8 = participantEntity0.getPrimaryKey();
        participantEntity0.setLegacySourceTable("2019-09-03T15:53:04.984-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getMiddleName();
        person25.doSomething();
        java.lang.String str31 = person25.getNameSuffix();
        gov.ca.cwds.rest.api.domain.Address[] addressArray39 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet40, addressArray39);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray42 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet43 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet43, phoneNumberArray42);
        gov.ca.cwds.rest.api.domain.Language[] languageArray45 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet46 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet46, languageArray45);
        gov.ca.cwds.rest.api.domain.Race[] raceArray48 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet49 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet49, raceArray48);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity53 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray54 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity53 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet55 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet55, ethnicityArray54);
        gov.ca.cwds.rest.api.domain.Person person57 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet40, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet43, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet46, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet49, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet55);
        java.lang.String str58 = person57.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet59 = person57.getPhoneNumber();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList60 = person57.getMessages();
        person25.setMessages(errorMessageList60);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity64 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean65 = participantEntity64.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray66 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList67 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList67, csecEntityArray66);
        participantEntity64.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList67);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity70 = participantEntity64.getScreening();
        java.lang.String str71 = participantEntity64.getScreeningId();
        java.lang.String str72 = participantEntity64.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity73 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person74 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity75 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity76 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person74, ethnicity75);
        java.util.Date date77 = personEthnicity76.getLastUpdatedTime();
        java.util.Date date78 = personEthnicity76.getCreateDateTime();
        java.lang.String str79 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date78);
        participantEntity73.setDateOfBirth(date78);
        participantEntity64.setDateOfDeath(date78);
        gov.ca.cwds.data.persistence.ns.Person person86 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity87 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity88 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person86, ethnicity87);
        java.util.Date date89 = personEthnicity88.getLastUpdatedTime();
        java.util.Date date90 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date89);
        java.lang.String str91 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date90);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship92 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (java.lang.Short) (short) -1, date78, "15:53:04", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "15:53:07", date90);
        java.lang.String str93 = clientRelationship92.getLastUpdatedId();
        boolean boolean94 = person25.equals((java.lang.Object) str93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str29.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "" + "'", str31.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str58.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date77);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date77.toString(), "Tue Sep 03 15:53:23 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date78);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Tue Sep 03 15:53:23 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str79 + "' != '" + "2019-09-03T15:53:23.114Z" + "'", str79.equals("2019-09-03T15:53:23.114Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date89);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date89.toString(), "Tue Sep 03 15:53:23 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date90);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date90.toString(), "Tue Sep 03 15:53:23 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str91 + "' != '" + "15:53:23" + "'", str91.equals("15:53:23"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimestampString("2019-09-03T15:53:01.223Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03T15:53:01.223Z\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber13 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        phoneNumber13.setId((java.lang.Long) 0L);
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType16 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean17 = stringJsonUserType16.isMutable();
        int[] intArray18 = stringJsonUserType16.sqlTypes();
        boolean boolean19 = phoneNumber13.equals((java.lang.Object) intArray18);
        boolean boolean20 = address8.equals((java.lang.Object) phoneNumber13);
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage21 = null;
        phoneNumber13.addMessage(errorMessage21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor46 = null;
        gov.ca.cwds.rest.api.domain.Address address47 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor46);
        java.lang.String str48 = address47.getCity();
        java.lang.Integer int49 = address47.getType();
        java.lang.String str50 = address47.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter51 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        boolean boolean52 = address47.equals((java.lang.Object) hOIReporter51);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor53 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor53.setId("2019-09-03-15.52.55.282");
        hOIReporter51.setLegacyDescriptor(legacyDescriptor53);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable57 = stringJsonUserType0.disassemble((java.lang.Object) legacyDescriptor53);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: gov.ca.cwds.rest.api.domain.LegacyDescriptor cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str48.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str50.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType17 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity21 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str22 = ethnicity21.getEthnicityType();
        java.lang.Long long23 = ethnicity21.getId();
        gov.ca.cwds.data.persistence.ns.Person person24 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity26 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person24, ethnicity25);
        java.util.Date date27 = personEthnicity26.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person28 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity29 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity30 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person28, ethnicity29);
        java.util.Date date31 = personEthnicity30.getLastUpdatedTime();
        boolean boolean32 = personEthnicity26.equals((java.lang.Object) personEthnicity30);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId33 = personEthnicity30.getPrimaryKey();
        java.io.Serializable serializable34 = personEthnicityId33.getPrimaryKey();
        boolean boolean35 = stringArrayType17.equals((java.lang.Object) long23, (java.lang.Object) personEthnicityId33);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity39 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 100L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId");
        boolean boolean40 = stringArrayType0.equals((java.lang.Object) stringArrayType17, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId");
        int[] intArray41 = stringArrayType0.sqlTypes();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "hi!" + "'", str22.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:23 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date31);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Sep 03 15:53:23 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray41);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet37 = person25.getPhoneNumber();
        gov.ca.cwds.rest.api.domain.Address[] addressArray45 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet46 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet46, addressArray45);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray48 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet49 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet49, phoneNumberArray48);
        gov.ca.cwds.rest.api.domain.Language[] languageArray51 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet52 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet52, languageArray51);
        gov.ca.cwds.rest.api.domain.Race[] raceArray54 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet55 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet55, raceArray54);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity59 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray60 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity59 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet61 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet61, ethnicityArray60);
        gov.ca.cwds.rest.api.domain.Person person63 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet46, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet49, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet52, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet55, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet61);
        java.lang.String str64 = person63.getMiddleName();
        java.lang.String str65 = person63.getLastName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet66 = person63.getPhoneNumber();
        java.util.Set<gov.ca.cwds.rest.api.domain.Race> raceSet67 = person63.getRace();
        boolean boolean68 = person25.equals((java.lang.Object) person63);
        java.lang.String str69 = person63.getGender();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:23 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:23 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str64.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str65.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceSet67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "hi!" + "'", str69.equals("hi!"));
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race4 = new gov.ca.cwds.rest.api.domain.Race(race3);
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage5 = null;
        race4.addMessage(errorMessage5);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber2 = new gov.ca.cwds.rest.api.domain.PhoneNumber("hi!", "2019-09-03T15:53:05.703Z");
        java.lang.String str3 = phoneNumber2.getType();
        java.lang.String str4 = phoneNumber2.getExtension();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "2019-09-03T15:53:05.703Z" + "'", str3.equals("2019-09-03T15:53:05.703Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        java.lang.Boolean boolean3 = participantEntity0.getProbationYouth();
        participantEntity0.setProbationYouth((java.lang.Boolean) true);
        java.lang.String str6 = participantEntity0.toString();
        participantEntity0.setId("2019-09-03-15.53.08.519");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getNameSuffix();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        participantEntity0.setRelatedScreeningId("15:52:59");
        java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList14 = participantEntity0.getCsecs();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityList14);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet37 = person25.getPhoneNumber();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList38 = person25.getMessages();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet39 = person25.getPhoneNumber();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:23 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:23 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet39);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getApproximateAgeUnits();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        participantEntity0.setProbationYouth((java.lang.Boolean) false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        participantEntity0.setDateOfBirth(date33);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:24 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:24 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:24 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:24 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "2019-09-03T15:53:24.073-0700" + "'", str36.equals("2019-09-03T15:53:24.073-0700"));
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        gov.ca.cwds.data.persistence.ns.Race race38 = new gov.ca.cwds.data.persistence.ns.Race(race6, "15:52:59", "2019-09-03T15:52:58.300-0700");
        race6.setRaceType("");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity41 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean42 = participantEntity41.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray43 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList44 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList44, csecEntityArray43);
        participantEntity41.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList44);
        boolean boolean48 = participantEntity41.equals((java.lang.Object) '4');
        java.lang.String[] strArray49 = participantEntity41.getLanguages();
        boolean boolean50 = race6.equals((java.lang.Object) strArray49);
        java.lang.String str51 = race6.getSubRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str51.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 100L, "2019-09-03T15:53:23.704Z", "2019-09-03T15:53:14.800Z");
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        gov.ca.cwds.data.persistence.ns.Race race38 = new gov.ca.cwds.data.persistence.ns.Race(race6, "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "2019-09-03T15:53:03.344Z");
        race6.setRaceType("2019-09-03T15:53:08.984Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.Boolean boolean2 = participantEntity0.getProbationYouth();
        participantEntity0.setApproximateAge("2019-09-03-15.53.10.189");
        java.lang.String str5 = participantEntity0.getId();
        java.lang.String str6 = participantEntity0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray47 = stringArrayType0.sqlTypes();
        int[] intArray48 = stringArrayType0.sqlTypes();
        java.sql.ResultSet resultSet49 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity50 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str51 = participantEntity50.getApproximateAgeUnits();
        java.lang.String[] strArray52 = participantEntity50.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor53 = null;
        java.lang.Object obj54 = null;
        java.lang.Object obj55 = stringArrayType0.nullSafeGet(resultSet49, strArray52, sharedSessionContractImplementor53, obj54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookBooleanString("2019-09-03-15.53.08.988");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unable to generate boolean");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        race6.setSubRaceType("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        gov.ca.cwds.rest.api.domain.Address[] addressArray45 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet46 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet46, addressArray45);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray48 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet49 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet49, phoneNumberArray48);
        gov.ca.cwds.rest.api.domain.Language[] languageArray51 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet52 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet52, languageArray51);
        gov.ca.cwds.rest.api.domain.Race[] raceArray54 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet55 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet55, raceArray54);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity59 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray60 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity59 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet61 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet61, ethnicityArray60);
        gov.ca.cwds.rest.api.domain.Person person63 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet46, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet49, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet52, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet55, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet61);
        java.lang.String str64 = person63.getLastName();
        java.lang.String str65 = person63.getNameSuffix();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList66 = person63.getMessages();
        race6.setMessages(errorMessageList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str64.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList66);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        participantEntity0.setGender("yyyy-MM-dd HH:mm:ss.SSS");
        participantEntity0.setLegacySourceTable("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity11 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity12 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity11);
        java.util.Date date13 = personEthnicity12.getLastUpdatedTime();
        java.util.Date date14 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date13);
        participantEntity0.setDateOfBirth(date13);
        java.lang.String str16 = participantEntity0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:24 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:24 PDT 2019");
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        java.lang.Object obj3 = stringJsonUserType0.deepCopy((java.lang.Object) "N");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter4 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role5 = hOIReporter4.getRole();
        java.lang.String str6 = hOIReporter4.getId();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = hOIReporter4.getLegacyDescriptor();
        java.lang.String str8 = hOIReporter4.getNameSuffix();
        hOIReporter4.setId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        java.lang.String str11 = hOIReporter4.toJson();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity12 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str13 = participantEntity12.getScreeningId();
        java.lang.Boolean boolean14 = participantEntity12.getProbationYouth();
        participantEntity12.setEstimatedDob((java.lang.Boolean) true);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getLastName();
        java.lang.String str44 = person42.getNameSuffix();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity48 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet49 = ethnicity48.getPersonEthnicity();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity50 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity48);
        boolean boolean51 = person42.equals((java.lang.Object) ethnicity50);
        java.lang.Object obj52 = stringJsonUserType0.replace((java.lang.Object) hOIReporter4, (java.lang.Object) participantEntity12, (java.lang.Object) ethnicity50);
        java.lang.Object obj54 = stringJsonUserType0.deepCopy((java.lang.Object) (short) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj3 + "' != '" + "N" + "'", obj3.equals("N"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "{\"id\":\"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\",\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str11.equals("{\"id\":\"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\",\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str43.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + (short) 1 + "'", obj54.equals((short) 1));
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        java.lang.String str3 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date5 = clientRelationship4.getLastUpdatedTime();
        boolean boolean6 = clientRelationship0.equals((java.lang.Object) date5);
        java.util.Date date7 = clientRelationship0.getLastUpdatedTime();
        java.lang.Short short8 = clientRelationship0.getClientRelationshipType();
        java.util.Date date9 = clientRelationship0.getEndDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(short8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        participantEntity0.setApproximateAgeUnits("2019-09-03T15:53:17.753Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getLastName();
        java.lang.String str27 = person25.getNameSuffix();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet32 = ethnicity31.getPersonEthnicity();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity33 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity31);
        boolean boolean34 = person25.equals((java.lang.Object) ethnicity33);
        java.lang.String str35 = person25.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str26.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str35.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getLastName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = person25.getPhoneNumber();
        java.lang.String str29 = person25.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str27.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str29.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = null;
        gov.ca.cwds.rest.api.domain.Address address15 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor14);
        java.lang.String str16 = address15.getCity();
        java.lang.Integer int17 = address15.getType();
        java.lang.String str18 = address15.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter19 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        boolean boolean20 = address15.equals((java.lang.Object) hOIReporter19);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor21 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor21.setId("2019-09-03-15.52.55.282");
        hOIReporter19.setLegacyDescriptor(legacyDescriptor21);
        gov.ca.cwds.rest.api.domain.Address address25 = new gov.ca.cwds.rest.api.domain.Address("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s_z", "2019-09-03T15:53:10.356Z", "2019-09-03T15:53:10.585-0700", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) (-1), "2019-09-03T15:53:14.005-0700", (java.lang.Integer) 100, legacyDescriptor21);
        legacyDescriptor21.setUiId("2019-09-03T15:53:17.174Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str16.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str18.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        gov.ca.cwds.data.persistence.ns.Race race38 = new gov.ca.cwds.data.persistence.ns.Race(race6, "15:52:59", "2019-09-03T15:52:58.300-0700");
        gov.ca.cwds.data.persistence.ns.Race race41 = new gov.ca.cwds.data.persistence.ns.Race(race6, "2019-09-03-15.53.08.733", "yyyy-MM-dd HH:mm:ss.SSS");
        java.lang.String str42 = race41.getRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str42.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity40 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType42 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role43 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity44 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean45 = participantEntity44.getProbationYouth();
        participantEntity44.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity44.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray50 = participantEntity44.getLanguages();
        java.lang.Object obj51 = stringArrayType42.assemble((java.io.Serializable) role43, (java.lang.Object) strArray50);
        java.lang.Class<java.lang.String[]> strArrayClass52 = stringArrayType42.returnedClass();
        java.sql.ResultSet resultSet53 = null;
        java.lang.String[] strArray59 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor60 = null;
        java.lang.Object obj62 = stringArrayType42.nullSafeGet(resultSet53, strArray59, sharedSessionContractImplementor60, (java.lang.Object) 1);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity63 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean64 = participantEntity63.getProbationYouth();
        participantEntity63.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity63.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray69 = participantEntity63.getLanguages();
        java.lang.String[] strArray70 = participantEntity63.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity82 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("hi!", date5, date12, "2019-09-03-15.53.07.205", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.05.703", "yyyy-MM-dd-HH.mm.ss.SSS", screeningEntity40, "yyyy-MM-dd HH:mm:ss.SSS", strArray59, strArray70, "", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:08.733-0700", "", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", (java.lang.Boolean) false, (java.lang.Boolean) false, (java.lang.Boolean) true, "2019-09-03T15:53:08.733-0700", "15:53:08", (java.lang.Boolean) true);
        participantEntity82.setSsn("2019-09-03T15:53:05.518Z");
        java.lang.String str85 = participantEntity82.getRelatedScreeningId();
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity86 = null;
        participantEntity82.setScreeningEntity(screeningEntity86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:24 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:24 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:24.995Z" + "'", str6.equals("2019-09-03T15:53:24.995Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:24 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:24 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:24 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:24 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "2019-09-03" + "'", str35.equals("2019-09-03"));
        org.junit.Assert.assertTrue("'" + role43 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role43.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj51.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setScreeningId("00001");
        java.lang.String str10 = participantEntity0.getLegacyId();
        participantEntity0.setNameSuffix("2019-09-03T15:53:17.753Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getParticipantId();
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        boolean boolean11 = personEthnicity5.equals((java.lang.Object) personEthnicity9);
        boolean boolean13 = personEthnicity5.equals((java.lang.Object) (-1.0f));
        boolean boolean14 = csecEntity0.equals((java.lang.Object) boolean13);
        java.time.LocalDate localDate15 = csecEntity0.getStartDate();
        java.lang.String str16 = csecEntity0.getParticipantId();
        csecEntity0.setCsecCodeId("2019-09-03-15.53.18.993");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address15 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor14);
        gov.ca.cwds.rest.api.domain.Address address16 = new gov.ca.cwds.rest.api.domain.Address("N", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "2019-09-03T15:52:58.300-0700", (java.lang.Integer) (-1), "00001", (java.lang.Integer) 100, legacyDescriptor14);
        java.lang.String str17 = address16.getLegacySourceTable();
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage18 = null;
        address16.addMessage(errorMessage18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "N" + "'", str17.equals("N"));
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("2019-09-03-15.53.05.703", "yyyy-MM-dd HH:mm:ss.SSS");
        race2.setRaceType("15:53:08");
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getNameSuffix();
        java.util.Set<gov.ca.cwds.rest.api.domain.Address> addressSet30 = person25.getAddress();
        java.util.Set<gov.ca.cwds.rest.api.domain.Address> addressSet31 = person25.getAddress();
        java.lang.String str32 = person25.getNameSuffix();
        gov.ca.cwds.rest.api.domain.Address[] addressArray40 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet41 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet41, addressArray40);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray43 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet44, phoneNumberArray43);
        gov.ca.cwds.rest.api.domain.Language[] languageArray46 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet47 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet47, languageArray46);
        gov.ca.cwds.rest.api.domain.Race[] raceArray49 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet50 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet50, raceArray49);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity54 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray55 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity54 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet56 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet56, ethnicityArray55);
        gov.ca.cwds.rest.api.domain.Person person58 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet41, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet44, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet47, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet50, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet56);
        java.lang.String str59 = person58.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person60 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity61 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity62 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person60, ethnicity61);
        java.util.Date date63 = personEthnicity62.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person64 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity65 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity66 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person64, ethnicity65);
        java.util.Date date67 = personEthnicity66.getLastUpdatedTime();
        boolean boolean68 = personEthnicity62.equals((java.lang.Object) personEthnicity66);
        boolean boolean69 = person58.equals((java.lang.Object) boolean68);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet70 = person58.getPhoneNumber();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList71 = person58.getMessages();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor79 = null;
        gov.ca.cwds.rest.api.domain.Address address80 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor79);
        java.lang.String str81 = address80.getCity();
        java.lang.Integer int82 = address80.getType();
        java.lang.String str83 = address80.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter84 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        boolean boolean85 = address80.equals((java.lang.Object) hOIReporter84);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor86 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor86.setId("2019-09-03-15.52.55.282");
        hOIReporter84.setLegacyDescriptor(legacyDescriptor86);
        boolean boolean90 = person58.equals((java.lang.Object) hOIReporter84);
        boolean boolean91 = person25.equals((java.lang.Object) boolean90);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet92 = person25.getPhoneNumber();
        gov.ca.cwds.data.persistence.ns.Race race96 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        boolean boolean97 = person25.equals((java.lang.Object) race96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressSet30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressSet31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "" + "'", str32.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str59.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date63);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date67);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date67.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str81 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str81.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str83 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str83.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        participantEntity0.setSsn("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        java.lang.String str8 = participantEntity0.getApproximateAge();
        participantEntity0.setEstimatedDob((java.lang.Boolean) false);
        participantEntity0.setGender("2019-09-03T15:53:08.732-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        java.lang.String str11 = personEthnicity2.getCreateUserId();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity12 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean13 = participantEntity12.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray14 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList15 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList15, csecEntityArray14);
        participantEntity12.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList15);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity18 = participantEntity12.getScreening();
        java.lang.String str19 = participantEntity12.getScreeningId();
        participantEntity12.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str22 = participantEntity12.getLegacyId();
        participantEntity12.setFirstName("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId");
        participantEntity12.setProbationYouth((java.lang.Boolean) true);
        boolean boolean27 = personEthnicity2.equals((java.lang.Object) true);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId28 = personEthnicity2.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId28);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role28 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        hOIReporter0.setRole(role28);
        java.lang.String str30 = hOIReporter0.toString();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor31 = null;
        hOIReporter0.setLegacyDescriptor(legacyDescriptor31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + role28 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role28.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getNameSuffix();
        java.util.Set<gov.ca.cwds.rest.api.domain.Address> addressSet30 = person25.getAddress();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet31 = person25.getPhoneNumber();
        java.lang.String str32 = person25.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressSet30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId" + "'", str32.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId"));
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        csecEntity0.setParticipantId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds");
        boolean boolean5 = csecEntity0.equals((java.lang.Object) "2019-09-03T15:53:15.370Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        address8.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter13 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray21 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet22, addressArray21);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray24 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, phoneNumberArray24);
        gov.ca.cwds.rest.api.domain.Language[] languageArray27 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet28, languageArray27);
        gov.ca.cwds.rest.api.domain.Race[] raceArray30 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet31, raceArray30);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity35 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray36 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity35 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet37 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37, ethnicityArray36);
        gov.ca.cwds.rest.api.domain.Person person39 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet37);
        boolean boolean40 = hOIReporter13.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter13.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor50 = null;
        gov.ca.cwds.rest.api.domain.Address address51 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor50);
        java.lang.String str52 = address51.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor53 = address51.getLegacyDescriptor();
        hOIReporter13.setLegacyDescriptor(legacyDescriptor53);
        org.joda.time.DateTime dateTime55 = null;
        legacyDescriptor53.setLastUpdated(dateTime55);
        address8.setLegacyDescriptor(legacyDescriptor53);
        org.joda.time.DateTime dateTime58 = null;
        legacyDescriptor53.setLastUpdated(dateTime58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str52.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor53);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getApproximateAge();
        participantEntity0.setEstimatedDob((java.lang.Boolean) true);
        java.lang.String str11 = participantEntity0.getNameSuffix();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity17 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean18 = participantEntity17.getProbationYouth();
        participantEntity17.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity17.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray23 = participantEntity17.getLanguages();
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType24 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean25 = stringJsonUserType24.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race29 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race30 = new gov.ca.cwds.rest.api.domain.Race(race29);
        java.lang.String str31 = race30.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray39 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet40, addressArray39);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray42 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet43 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet43, phoneNumberArray42);
        gov.ca.cwds.rest.api.domain.Language[] languageArray45 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet46 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet46, languageArray45);
        gov.ca.cwds.rest.api.domain.Race[] raceArray48 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet49 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet49, raceArray48);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity53 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray54 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity53 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet55 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet55, ethnicityArray54);
        gov.ca.cwds.rest.api.domain.Person person57 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet40, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet43, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet46, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet49, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet55);
        java.lang.String str58 = person57.getSsn();
        boolean boolean59 = stringJsonUserType24.equals((java.lang.Object) race30, (java.lang.Object) str58);
        java.lang.Object obj62 = stringJsonUserType24.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        int[] intArray63 = stringJsonUserType24.sqlTypes();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity64 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean65 = participantEntity64.getProbationYouth();
        participantEntity64.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity64.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        participantEntity64.setSsn("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity72 = participantEntity64.getScreening();
        java.lang.String str73 = participantEntity64.getApproximateAgeUnits();
        java.lang.Object obj74 = null;
        boolean boolean75 = stringJsonUserType24.equals((java.lang.Object) str73, obj74);
        boolean boolean76 = stringArrayType0.equals((java.lang.Object) participantEntity17, (java.lang.Object) stringJsonUserType24);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor84 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address85 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor84);
        java.lang.Object obj86 = stringJsonUserType24.deepCopy((java.lang.Object) "15:52:59");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str31.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str58.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + '#' + "'", obj62.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str73 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str73.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj86 + "' != '" + "15:52:59" + "'", obj86.equals("15:52:59"));
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookISO8601Timestamp("2019-09-03T15:53:05.518Z");
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        gov.ca.cwds.data.persistence.ns.Person person14 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity15 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity16 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person14, ethnicity15);
        java.util.Date date17 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person18 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity19 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity20 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person18, ethnicity19);
        java.util.Date date21 = personEthnicity20.getLastUpdatedTime();
        boolean boolean22 = personEthnicity16.equals((java.lang.Object) personEthnicity20);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity26 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity16.setEthnicity(ethnicity26);
        java.util.Date date28 = personEthnicity16.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship29 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date7, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date28);
        java.lang.String str30 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date7);
        java.util.Date date31 = gov.ca.cwds.rest.api.domain.DomainChef.concatenateDateAndTime(date1, date7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(date1.toString(), "Tue Sep 03 15:53:05 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "2019-09-03" + "'", str9.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date17);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date21);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "2019-09-03" + "'", str30.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date31);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Sep 03 15:53:25 PDT 2019");
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId9 = personEthnicity6.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity11 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity12 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity11);
        java.util.Date date13 = personEthnicity12.getLastUpdatedTime();
        java.util.Date date14 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date13);
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date13);
        java.lang.String str16 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date13);
        boolean boolean17 = personEthnicityId9.equals((java.lang.Object) date13);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor32 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address33 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor32);
        gov.ca.cwds.rest.api.domain.Address address34 = new gov.ca.cwds.rest.api.domain.Address("N", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "2019-09-03T15:52:58.300-0700", (java.lang.Integer) (-1), "00001", (java.lang.Integer) 100, legacyDescriptor32);
        java.lang.String str35 = address34.getLegacySourceTable();
        boolean boolean36 = personEthnicityId9.equals((java.lang.Object) address34);
        gov.ca.cwds.data.persistence.ns.Person person37 = null;
        personEthnicityId9.setPerson(person37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:25 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03-15.53.25.802" + "'", str15.equals("2019-09-03-15.53.25.802"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "2019-09-03" + "'", str16.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "N" + "'", str35.equals("N"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor5);
        java.lang.String str7 = hOIReporter6.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        boolean boolean16 = hOIReporter6.equals((java.lang.Object) hOIReporter14);
        java.lang.String str17 = hOIReporter6.getLastName();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor18 = hOIReporter6.getLegacyDescriptor();
        java.lang.String str19 = hOIReporter6.getNameSuffix();
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03-15.52.55.282" + "'", str7.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str17.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(legacyDescriptor18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'" + "'", str19.equals("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'"));
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        gov.ca.cwds.data.persistence.ns.Race race0 = new gov.ca.cwds.data.persistence.ns.Race();
        gov.ca.cwds.rest.api.domain.Race race1 = new gov.ca.cwds.rest.api.domain.Race(race0);
        race1.setRaceType("15:53:08");
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.cookZipcodeNumber((java.lang.Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00010" + "'", str1.equals("00010"));
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookStrictTimestampString("2019-09-03T15:53:12.763Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03T15:53:12.763Z\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        java.lang.String str4 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date3);
        java.lang.String str5 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:26 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "2019-09-03" + "'", str4.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str5 + "' != '" + "2019-09-03T15:53:26.015Z" + "'", str5.equals("2019-09-03T15:53:26.015Z"));
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber2 = new gov.ca.cwds.rest.api.domain.PhoneNumber("2019-09-03-15.53.08.285", "2019-09-03T15:53:15.986Z");
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        participantEntity0.setFirstName("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId");
        participantEntity0.setFirstName("2019-09-03-15.52.59.761");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType15 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet16 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity17 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean18 = participantEntity17.getProbationYouth();
        participantEntity17.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity17.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray23 = participantEntity17.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor24 = null;
        gov.ca.cwds.data.persistence.ns.Person person25 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity29 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity30 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person25, ethnicity29);
        java.lang.Object obj31 = stringArrayType15.nullSafeGet(resultSet16, strArray23, sharedSessionContractImplementor24, (java.lang.Object) personEthnicity30);
        gov.ca.cwds.rest.api.domain.Address[] addressArray39 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet40, addressArray39);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray42 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet43 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet43, phoneNumberArray42);
        gov.ca.cwds.rest.api.domain.Language[] languageArray45 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet46 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet46, languageArray45);
        gov.ca.cwds.rest.api.domain.Race[] raceArray48 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet49 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet49, raceArray48);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity53 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray54 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity53 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet55 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet55, ethnicityArray54);
        gov.ca.cwds.rest.api.domain.Person person57 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet40, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet43, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet46, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet49, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet55);
        java.lang.String str58 = person57.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet59 = person57.getPhoneNumber();
        java.lang.Object obj61 = stringArrayType15.assemble((java.io.Serializable) person57, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray62 = stringArrayType15.sqlTypes();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role63 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        java.io.Serializable serializable64 = stringArrayType15.disassemble((java.lang.Object) role63);
        boolean boolean65 = participantEntity0.equals((java.lang.Object) serializable64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str58.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + role63 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role63.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        org.junit.Assert.assertTrue("'" + serializable64 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", serializable64.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        java.lang.String str11 = address8.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role12 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        boolean boolean13 = address8.equals((java.lang.Object) role12);
        java.lang.Integer int14 = address8.getType();
        address8.setLegacySourceTable("2019-09-03-15.53.08.704");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str11.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        org.junit.Assert.assertTrue("'" + role12 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role12.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14.equals(0));
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        java.lang.String[] strArray7 = participantEntity0.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity8 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean9 = participantEntity8.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray10 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList11 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList11, csecEntityArray10);
        participantEntity8.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList11);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity14 = participantEntity8.getScreening();
        java.lang.String str15 = participantEntity8.getScreeningId();
        java.lang.String str16 = participantEntity8.getId();
        participantEntity8.setProbationYouth((java.lang.Boolean) false);
        participantEntity8.setScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        participantEntity8.setSsn("2019-09-03-15.52.59.761");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity23 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean24 = participantEntity23.getProbationYouth();
        java.lang.String[] strArray25 = participantEntity23.getRoles();
        java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList26 = participantEntity23.getCsecs();
        participantEntity8.setCsecs(csecEntityList26);
        participantEntity0.setCsecs(csecEntityList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityList26);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        csecEntity0.setParticipantId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds");
        csecEntity0.setParticipantId("2019-09-03T15:53:21.072Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimestampString("2019-09-03T15:53:11.317Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03T15:53:11.317Z\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity17 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean18 = participantEntity17.getProbationYouth();
        participantEntity17.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity17.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray23 = participantEntity17.getLanguages();
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType24 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean25 = stringJsonUserType24.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race29 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race30 = new gov.ca.cwds.rest.api.domain.Race(race29);
        java.lang.String str31 = race30.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray39 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet40, addressArray39);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray42 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet43 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet43, phoneNumberArray42);
        gov.ca.cwds.rest.api.domain.Language[] languageArray45 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet46 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet46, languageArray45);
        gov.ca.cwds.rest.api.domain.Race[] raceArray48 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet49 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet49, raceArray48);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity53 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray54 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity53 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet55 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet55, ethnicityArray54);
        gov.ca.cwds.rest.api.domain.Person person57 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet40, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet43, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet46, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet49, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet55);
        java.lang.String str58 = person57.getSsn();
        boolean boolean59 = stringJsonUserType24.equals((java.lang.Object) race30, (java.lang.Object) str58);
        java.lang.Object obj62 = stringJsonUserType24.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        int[] intArray63 = stringJsonUserType24.sqlTypes();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity64 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean65 = participantEntity64.getProbationYouth();
        participantEntity64.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity64.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        participantEntity64.setSsn("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity72 = participantEntity64.getScreening();
        java.lang.String str73 = participantEntity64.getApproximateAgeUnits();
        java.lang.Object obj74 = null;
        boolean boolean75 = stringJsonUserType24.equals((java.lang.Object) str73, obj74);
        boolean boolean76 = stringArrayType0.equals((java.lang.Object) participantEntity17, (java.lang.Object) stringJsonUserType24);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor84 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address85 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor84);
        gov.ca.cwds.rest.api.domain.Race race88 = new gov.ca.cwds.rest.api.domain.Race("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        java.lang.Object obj89 = stringArrayType0.assemble((java.io.Serializable) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", (java.lang.Object) race88);
        boolean boolean90 = stringArrayType0.isMutable();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str31.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str58.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + '#' + "'", obj62.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str73 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str73.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj89 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds" + "'", obj89.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role4 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean5 = stringJsonUserType0.equals((java.lang.Object) "", (java.lang.Object) role4);
        int[] intArray6 = stringJsonUserType0.sqlTypes();
        boolean boolean7 = stringJsonUserType0.isMutable();
        int[] intArray8 = stringJsonUserType0.sqlTypes();
        org.junit.Assert.assertTrue("'" + role4 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role4.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray8);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getApproximateAge();
        participantEntity0.setEstimatedDob((java.lang.Boolean) true);
        java.lang.String str11 = participantEntity0.getMiddleName();
        java.util.Date date12 = participantEntity0.getDateOfDeath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date12);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity0.setEstimatedDob((java.lang.Boolean) false);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getRaces();
        java.lang.String str2 = participantEntity0.getApproximateAge();
        participantEntity0.setLegacySourceTable("2019-09-03-15.52.58.871");
        gov.ca.cwds.rest.api.domain.ParticipantIntakeApi participantIntakeApi5 = null;
        // The following exception was thrown during execution in test generation
        try {
            gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity6 = participantEntity0.updateFrom(participantIntakeApi5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        java.util.Date date4 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date3);
        java.lang.String str5 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date3);
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date3);
        java.util.Date date7 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date3);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date3);
        java.lang.String str9 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:26 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:26 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str5 + "' != '" + "2019-09-03-15.53.26.640" + "'", str5.equals("2019-09-03-15.53.26.640"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03" + "'", str6.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:26 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str8 + "' != '" + "15:53:26" + "'", str8.equals("15:53:26"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str9 + "' != '" + "15:53:26" + "'", str9.equals("15:53:26"));
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getGender();
        java.lang.String str29 = person25.getNameSuffix();
        gov.ca.cwds.data.persistence.ns.Person person30 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity32 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person30, ethnicity31);
        java.util.Date date33 = personEthnicity32.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person34 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity35 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity36 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person34, ethnicity35);
        java.util.Date date37 = personEthnicity36.getLastUpdatedTime();
        boolean boolean38 = personEthnicity32.equals((java.lang.Object) personEthnicity36);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity42 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity32.setEthnicity(ethnicity42);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity44 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity42);
        boolean boolean45 = person25.equals((java.lang.Object) ethnicity44);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity48 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList49 = ethnicity48.getMessages();
        ethnicity44.setMessages(errorMessageList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "hi!" + "'", str28.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:26 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Sep 03 15:53:26 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList49);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        java.lang.Boolean boolean11 = participantEntity0.getEstimatedDob();
        java.lang.String str12 = participantEntity0.getSsn();
        participantEntity0.setApproximateAge("2019-09-03-15.53.05.703");
        java.lang.Boolean boolean15 = participantEntity0.getSealed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean15);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        int[] intArray2 = stringJsonUserType0.sqlTypes();
        int[] intArray3 = stringJsonUserType0.sqlTypes();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray3);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        participantEntity0.setDateOfBirth(date5);
        java.lang.String str8 = participantEntity0.toString();
        participantEntity0.setApproximateAge("2019-09-03T15:53:17.793Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:26 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:26 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:26.809Z" + "'", str6.equals("2019-09-03T15:53:26.809Z"));
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race4 = new gov.ca.cwds.rest.api.domain.Race(race3);
        boolean boolean6 = race4.equals((java.lang.Object) 100L);
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage7 = null;
        race4.addMessage(errorMessage7);
        race4.setRaceType("2019-09-03T15:53:22.883-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        participantEntity0.setSensitive((java.lang.Boolean) true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        java.lang.Long long4 = race3.getPrimaryKey();
        java.lang.Long long5 = race3.getPrimaryKey();
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race3);
        boolean boolean7 = race6.hasMessages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.util.Date date2 = participantEntity0.getDateOfBirth();
        java.util.Date date3 = participantEntity0.getDateOfBirth();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date3);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage5 = null;
        phoneNumber4.addMessage(errorMessage5);
        phoneNumber4.setId((java.lang.Long) 10L);
        java.lang.String str9 = phoneNumber4.getNumber();
        phoneNumber4.setId((java.lang.Long) 0L);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId" + "'", str9.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId"));
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray47 = stringArrayType0.sqlTypes();
        boolean boolean48 = stringArrayType0.isMutable();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity51 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList52 = ethnicity51.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity55 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity51, "Anonymous Reporter", "N");
        java.lang.String str56 = ethnicity51.getEthnicityType();
        boolean boolean58 = ethnicity51.equals((java.lang.Object) "2019-09-03T15:53:05.703Z");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter59 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray67 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet68 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet68, addressArray67);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray70 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet71 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet71, phoneNumberArray70);
        gov.ca.cwds.rest.api.domain.Language[] languageArray73 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet74 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet74, languageArray73);
        gov.ca.cwds.rest.api.domain.Race[] raceArray76 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet77 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet77, raceArray76);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity81 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray82 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity81 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet83 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet83, ethnicityArray82);
        gov.ca.cwds.rest.api.domain.Person person85 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet68, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet71, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet74, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet77, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet83);
        boolean boolean86 = hOIReporter59.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str87 = hOIReporter59.getLastName();
        java.lang.String str88 = hOIReporter59.toJson();
        java.lang.String str89 = hOIReporter59.getId();
        java.lang.Object obj90 = stringArrayType0.assemble((java.io.Serializable) ethnicity51, (java.lang.Object) hOIReporter59);
        java.lang.String str91 = ethnicity51.getSubEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str56.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str88 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str88.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str91 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str91.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet37 = person25.getPhoneNumber();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList38 = person25.getMessages();
        gov.ca.cwds.data.persistence.ns.Person person39 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity43 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity44 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person39, ethnicity43);
        java.lang.String str45 = ethnicity43.getEthnicityType();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity46 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity43);
        boolean boolean47 = person25.equals((java.lang.Object) ethnicity43);
        java.lang.String str48 = person25.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:27 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:27 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "hi!" + "'", str45.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str48.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        java.lang.String str3 = hOIReporter0.toJson();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter4 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray12 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet13 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet13, addressArray12);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray15 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet16, phoneNumberArray15);
        gov.ca.cwds.rest.api.domain.Language[] languageArray18 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet19, languageArray18);
        gov.ca.cwds.rest.api.domain.Race[] raceArray21 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet22, raceArray21);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity26 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray27 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity26 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet28, ethnicityArray27);
        gov.ca.cwds.rest.api.domain.Person person30 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet13, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet28);
        boolean boolean31 = hOIReporter4.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role32 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        hOIReporter4.setRole(role32);
        java.lang.String str34 = role32.toString();
        hOIReporter0.setRole(role32);
        hOIReporter0.setLastName("gov.ca.cwds.data.persistence.ns._participant_entity.find_participant_by_related_screening_id_and_legacy_id");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str3.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + role32 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role32.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Non-mandated Reporter" + "'", str34.equals("Non-mandated Reporter"));
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity5 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity4);
        java.util.Date date6 = personEthnicity5.getLastUpdatedTime();
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        java.lang.String str8 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date6);
        gov.ca.cwds.data.persistence.ns.Person person13 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person13, ethnicity14);
        java.util.Date date16 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        boolean boolean21 = personEthnicity15.equals((java.lang.Object) personEthnicity19);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity15.setEthnicity(ethnicity25);
        java.util.Date date27 = personEthnicity15.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship28 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date6, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date27);
        gov.ca.cwds.data.persistence.ns.Person person30 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity32 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person30, ethnicity31);
        java.util.Date date33 = personEthnicity32.getLastUpdatedTime();
        java.util.Date date34 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date34);
        java.lang.String str36 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date34);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity41 = null;
        java.lang.String[] strArray46 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity47 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean48 = participantEntity47.getProbationYouth();
        participantEntity47.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity47.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray53 = participantEntity47.getLanguages();
        java.lang.String[] strArray54 = participantEntity47.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity66 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date27, date34, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity41, "2019-09-03-15.52.58.871", strArray46, strArray54, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        java.lang.String str67 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date34);
        java.lang.String str68 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date6);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 03 15:53:27 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03" + "'", str8.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:27 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:27 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:27 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str29 + "' != '" + "2019-09-03T15:53:27.159-0700" + "'", str29.equals("2019-09-03T15:53:27.159-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:27 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:27 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str35 + "' != '" + "15:53:27" + "'", str35.equals("15:53:27"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str36 + "' != '" + "2019-09-03T15:53:27.159-0700" + "'", str36.equals("2019-09-03T15:53:27.159-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str67 + "' != '" + "15:53:27" + "'", str67.equals("15:53:27"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "2019-09-03" + "'", str68.equals("2019-09-03"));
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getApproximateAge();
        participantEntity0.setEstimatedDob((java.lang.Boolean) true);
        java.lang.String str11 = participantEntity0.getMiddleName();
        participantEntity0.setApproximateAgeUnits("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        java.lang.Class class39 = stringJsonUserType0.returnedClass();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity42 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList43 = ethnicity42.getMessages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity44 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean45 = participantEntity44.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray46 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList47 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList47, csecEntityArray46);
        participantEntity44.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList47);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity50 = participantEntity44.getScreening();
        java.lang.String str51 = participantEntity44.getScreeningId();
        participantEntity44.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str54 = participantEntity44.getLegacySourceTable();
        java.lang.Object obj55 = stringJsonUserType0.assemble((java.io.Serializable) errorMessageList43, (java.lang.Object) str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(obj55.toString(), "[]");
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getLastName();
        java.lang.String str27 = person25.getNameSuffix();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet32 = ethnicity31.getPersonEthnicity();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity33 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity31);
        boolean boolean34 = person25.equals((java.lang.Object) ethnicity33);
        java.lang.String str35 = person25.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet36 = person25.getEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str26.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str35.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicitySet36);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        java.lang.String str11 = personEthnicity2.getCreateUserId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter12 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray20 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet21 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet21, addressArray20);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray23 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet24, phoneNumberArray23);
        gov.ca.cwds.rest.api.domain.Language[] languageArray26 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet27 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet27, languageArray26);
        gov.ca.cwds.rest.api.domain.Race[] raceArray29 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet30 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet30, raceArray29);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity34 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray35 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity34 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet36 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet36, ethnicityArray35);
        gov.ca.cwds.rest.api.domain.Person person38 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet21, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet24, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet27, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet30, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet36);
        boolean boolean39 = hOIReporter12.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        boolean boolean40 = personEthnicity2.equals((java.lang.Object) boolean39);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity41 = personEthnicity2.getEthnicity();
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId42 = personEthnicity2.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:27 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:27 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ethnicity41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId42);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        java.lang.Object obj3 = stringJsonUserType0.deepCopy((java.lang.Object) "N");
        boolean boolean4 = stringJsonUserType0.isMutable();
        java.sql.ResultSet resultSet5 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity6 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean7 = participantEntity6.getProbationYouth();
        participantEntity6.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity6.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray12 = participantEntity6.getLanguages();
        java.lang.String[] strArray13 = participantEntity6.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor14 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity17 = new gov.ca.cwds.rest.api.domain.Ethnicity("HH:mm:ss", "15:52:54");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = stringJsonUserType0.nullSafeGet(resultSet5, strArray13, sharedSessionContractImplementor14, (java.lang.Object) ethnicity17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj3 + "' != '" + "N" + "'", obj3.equals("N"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        java.util.Date date0 = null;
        java.lang.String str1 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.lang.String str37 = person25.getFirstName();
        java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet38 = person25.getEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:27 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:27 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str37.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicitySet38);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        java.lang.Object obj9 = stringArrayType0.assemble((java.io.Serializable) role1, (java.lang.Object) strArray8);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor17 = null;
        gov.ca.cwds.rest.api.domain.Address address18 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor17);
        java.lang.String str19 = address18.getCity();
        java.lang.Integer int20 = address18.getType();
        address18.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.Object obj23 = null;
        boolean boolean24 = stringArrayType0.equals((java.lang.Object) address18, obj23);
        java.lang.String str25 = address18.getCity();
        java.lang.String str26 = address18.getCity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter27 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray35 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet36 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet36, addressArray35);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray38 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet39 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet39, phoneNumberArray38);
        gov.ca.cwds.rest.api.domain.Language[] languageArray41 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet42 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet42, languageArray41);
        gov.ca.cwds.rest.api.domain.Race[] raceArray44 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet45 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet45, raceArray44);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity49 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray50 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity49 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet51 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet51, ethnicityArray50);
        gov.ca.cwds.rest.api.domain.Person person53 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet36, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet39, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet42, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet45, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet51);
        boolean boolean54 = hOIReporter27.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter27.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor64 = null;
        gov.ca.cwds.rest.api.domain.Address address65 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor64);
        java.lang.String str66 = address65.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor67 = address65.getLegacyDescriptor();
        hOIReporter27.setLegacyDescriptor(legacyDescriptor67);
        address18.setLegacyDescriptor(legacyDescriptor67);
        java.lang.String str70 = address18.getCity();
        java.lang.String str71 = address18.getCity();
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str19.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str25.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str26.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str66.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str70.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str71 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str71.equals("yyyy-MM-dd HH:mm:ss.SSS"));
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.fromString("2019-09-03-15.53.00.269");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray47 = stringArrayType0.sqlTypes();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role48 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        java.io.Serializable serializable49 = stringArrayType0.disassemble((java.lang.Object) role48);
        boolean boolean50 = stringArrayType0.isMutable();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + role48 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role48.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        org.junit.Assert.assertTrue("'" + serializable49 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", serializable49.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity21 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity22 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity21);
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet23 = ethnicity21.getPersonEthnicity();
        java.lang.String str24 = ethnicity21.getLastUpdatedId();
        personEthnicity15.setEthnicity(ethnicity21);
        java.lang.String str26 = personEthnicity15.getCreateUserId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.lang.String str1 = clientRelationship0.getPrimaryClientId();
        java.util.Date date2 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str3 = clientRelationship0.getPrimaryKey();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        csecEntity0.setParticipantId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity6 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList7 = ethnicity6.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity6, "Anonymous Reporter", "N");
        java.lang.String str11 = ethnicity10.getSubEthnicity();
        java.util.Date date12 = ethnicity10.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity10);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId14 = personEthnicity13.getPrimaryKey();
        boolean boolean15 = csecEntity0.equals((java.lang.Object) personEthnicityId14);
        gov.ca.cwds.data.persistence.ns.Person person16 = personEthnicityId14.getPerson();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str11.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:28 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person16);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber("2019-09-03T15:53:10.189-0700", "Non-mandated Reporter", "2019-09-03T15:53:12.763Z");
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor5);
        java.lang.String str7 = hOIReporter6.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        boolean boolean16 = hOIReporter6.equals((java.lang.Object) hOIReporter14);
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor17 = hOIReporter6.getLegacyDescriptor();
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03-15.52.55.282" + "'", str7.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(legacyDescriptor17);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setEthnicity("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        participantEntity0.setId("_n");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity12 = participantEntity0.getScreeningEntity();
        participantEntity0.setScreeningId("2019-09-03T15:53:26.572-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity12);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        address8.setLegacySourceTable("N");
        address8.setLegacyId("2019-09-03T15:53:19.034Z");
        gov.ca.cwds.rest.api.domain.Address[] addressArray20 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet21 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet21, addressArray20);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray23 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet24, phoneNumberArray23);
        gov.ca.cwds.rest.api.domain.Language[] languageArray26 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet27 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet27, languageArray26);
        gov.ca.cwds.rest.api.domain.Race[] raceArray29 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet30 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet30, raceArray29);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity34 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray35 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity34 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet36 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet36, ethnicityArray35);
        gov.ca.cwds.rest.api.domain.Person person38 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet21, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet24, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet27, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet30, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet36);
        java.lang.String str39 = person38.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet40 = person38.getPhoneNumber();
        boolean boolean41 = address8.equals((java.lang.Object) phoneNumberSet40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str39.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        java.lang.Object obj3 = stringJsonUserType0.deepCopy((java.lang.Object) "N");
        java.sql.ResultSet resultSet4 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity5 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean6 = participantEntity5.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray7 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList8 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList8, csecEntityArray7);
        participantEntity5.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList8);
        boolean boolean12 = participantEntity5.equals((java.lang.Object) '4');
        java.lang.String[] strArray13 = participantEntity5.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor14 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter15 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role16 = hOIReporter15.getRole();
        java.lang.String str17 = hOIReporter15.getId();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor18 = hOIReporter15.getLegacyDescriptor();
        java.lang.String str19 = hOIReporter15.getNameSuffix();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = stringJsonUserType0.nullSafeGet(resultSet4, strArray13, sharedSessionContractImplementor14, (java.lang.Object) str19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj3 + "' != '" + "N" + "'", obj3.equals("N"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        java.lang.String str9 = participantEntity0.getLegacySourceTable();
        java.lang.String str10 = participantEntity0.getEthnicity();
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity11 = null;
        participantEntity0.setSafelySurrenderedBabies(safelySurrenderedBabiesEntity11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "");
        java.lang.String str7 = ethnicity6.getSubEthnicity();
        java.lang.String str8 = ethnicity6.getSubEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str8.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("2019-09-03T15:53:24.073-0700", "");
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter0.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor37 = null;
        gov.ca.cwds.rest.api.domain.Address address38 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor37);
        java.lang.String str39 = address38.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor40 = address38.getLegacyDescriptor();
        hOIReporter0.setLegacyDescriptor(legacyDescriptor40);
        org.joda.time.DateTime dateTime42 = null;
        legacyDescriptor40.setLastUpdated(dateTime42);
        java.lang.String str44 = legacyDescriptor40.getTableDescription();
        legacyDescriptor40.setId("{\"id\":\"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\",\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}");
        java.lang.String str47 = legacyDescriptor40.getUiId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str39.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        participantEntity0.setSsn("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        java.lang.String str8 = participantEntity0.getId();
        java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList9 = participantEntity0.getCsecs();
        java.lang.Boolean boolean10 = participantEntity0.getSealed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 1L, "2019-09-03-15.52.55.282", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "15:53:04");
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getLastName();
        java.lang.String str27 = person25.getNameSuffix();
        java.lang.String str28 = person25.getSsn();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str26.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str28.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity5);
        java.lang.String str7 = ethnicity5.getEthnicityType();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity8 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity5);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity9 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity5);
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity10 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        java.lang.Object obj38 = stringJsonUserType0.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        int[] intArray39 = stringJsonUserType0.sqlTypes();
        java.sql.ResultSet resultSet40 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType41 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role42 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity43 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean44 = participantEntity43.getProbationYouth();
        participantEntity43.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity43.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray49 = participantEntity43.getLanguages();
        java.lang.Object obj50 = stringArrayType41.assemble((java.io.Serializable) role42, (java.lang.Object) strArray49);
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor51 = null;
        gov.ca.cwds.data.persistence.ns.Race race55 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj56 = stringJsonUserType0.nullSafeGet(resultSet40, strArray49, sharedSessionContractImplementor51, (java.lang.Object) race55);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + '#' + "'", obj38.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + role42 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role42.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj50.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimeString("2019-09-03T15:53:22.421Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03T15:53:22.421Z\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber2 = new gov.ca.cwds.rest.api.domain.PhoneNumber("2019-09-03T15:53:26.015Z", "HH:mm:ss");
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.Integer int1 = csecEntity0.getId();
        java.lang.String str2 = csecEntity0.getParticipantId();
        java.lang.Integer int3 = csecEntity0.getId();
        csecEntity0.setCsecCodeId("2019-09-03-15.53.05.467");
        java.time.LocalDate localDate6 = csecEntity0.getStartDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity0.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray6 = participantEntity0.getLanguages();
        participantEntity0.setRelatedScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        java.lang.String str9 = participantEntity0.getLegacySourceTable();
        java.lang.String str10 = participantEntity0.getEthnicity();
        java.lang.String str11 = participantEntity0.getMiddleName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity2.setEthnicity(ethnicity12);
        java.util.Date date14 = personEthnicity2.getLastUpdatedTime();
        java.lang.String str15 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date14);
        java.lang.String str16 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date14);
        java.lang.String str17 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:28 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:28 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:28 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str15 + "' != '" + "2019-09-03-15.53.28.754" + "'", str15.equals("2019-09-03-15.53.28.754"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "2019-09-03" + "'", str16.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str17 + "' != '" + "2019-09-03T15:53:28.754-0700" + "'", str17.equals("2019-09-03T15:53:28.754-0700"));
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getRaces();
        java.lang.String str2 = participantEntity0.getApproximateAge();
        participantEntity0.setLegacySourceTable("2019-09-03-15.52.58.871");
        java.lang.String str5 = participantEntity0.getEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray47 = stringArrayType0.sqlTypes();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role48 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        java.io.Serializable serializable49 = stringArrayType0.disassemble((java.lang.Object) role48);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter54 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray62 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet63 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet63, addressArray62);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray65 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet66 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet66, phoneNumberArray65);
        gov.ca.cwds.rest.api.domain.Language[] languageArray68 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet69 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet69, languageArray68);
        gov.ca.cwds.rest.api.domain.Race[] raceArray71 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet72 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet72, raceArray71);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity76 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray77 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity76 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet78 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet78, ethnicityArray77);
        gov.ca.cwds.rest.api.domain.Person person80 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet63, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet66, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet69, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet72, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet78);
        boolean boolean81 = hOIReporter54.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter54.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor91 = null;
        gov.ca.cwds.rest.api.domain.Address address92 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor91);
        java.lang.String str93 = address92.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor94 = address92.getLegacyDescriptor();
        hOIReporter54.setLegacyDescriptor(legacyDescriptor94);
        org.joda.time.DateTime dateTime96 = null;
        legacyDescriptor94.setLastUpdated(dateTime96);
        java.lang.String str98 = legacyDescriptor94.getTableDescription();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter99 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role48, "2019-09-03T15:53:22.883-0700", "2019-09-03T15:53:24.073-0700", "15:53:07", "yyyy-MM-dd", legacyDescriptor94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + role48 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role48.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        org.junit.Assert.assertTrue("'" + serializable49 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", serializable49.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str93 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str93.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "2019-09-03T15:53:21.042Z", "2019-09-03T15:53:23.704Z");
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray47 = stringArrayType0.sqlTypes();
        boolean boolean48 = stringArrayType0.isMutable();
        int[] intArray49 = stringArrayType0.sqlTypes();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray49);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor5);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role7 = hOIReporter6.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor12 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor12.setId("2019-09-03-15.52.55.282");
        java.lang.String str15 = legacyDescriptor12.getUiId();
        java.lang.String str16 = legacyDescriptor12.getUiId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter17 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role7, "HH:mm:ss", "Y", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.02.984", legacyDescriptor12);
        hOIReporter17.setLastName("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role7 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role7.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        java.lang.String str3 = clientRelationship0.getLastUpdatedId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship4.setLastUpdatedId("");
        clientRelationship4.setLastUpdatedId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        boolean boolean9 = clientRelationship0.relatedTo(clientRelationship4);
        java.lang.String str10 = clientRelationship4.getId();
        java.util.Date date11 = clientRelationship4.getEndDate();
        java.lang.String str12 = clientRelationship4.getAbsentParentCode();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookDateString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = null;
        gov.ca.cwds.rest.api.domain.Address address15 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor14);
        java.lang.String str16 = address15.getCity();
        java.lang.Integer int17 = address15.getType();
        address15.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter20 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray28 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet29 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet29, addressArray28);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray31 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet32 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet32, phoneNumberArray31);
        gov.ca.cwds.rest.api.domain.Language[] languageArray34 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet35 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet35, languageArray34);
        gov.ca.cwds.rest.api.domain.Race[] raceArray37 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet38 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet38, raceArray37);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity42 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray43 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity42 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet44 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet44, ethnicityArray43);
        gov.ca.cwds.rest.api.domain.Person person46 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet29, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet32, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet35, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet38, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet44);
        boolean boolean47 = hOIReporter20.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        hOIReporter20.setId("yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor57 = null;
        gov.ca.cwds.rest.api.domain.Address address58 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor57);
        java.lang.String str59 = address58.getCity();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor60 = address58.getLegacyDescriptor();
        hOIReporter20.setLegacyDescriptor(legacyDescriptor60);
        org.joda.time.DateTime dateTime62 = null;
        legacyDescriptor60.setLastUpdated(dateTime62);
        address15.setLegacyDescriptor(legacyDescriptor60);
        gov.ca.cwds.rest.api.domain.Address address65 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:16.789Z", "15:53:16", (java.lang.Integer) 0, "2019-09-03-15.53.08.704", (java.lang.Integer) 1, legacyDescriptor60);
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage66 = null;
        address65.addMessage(errorMessage66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str16.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str59.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor60);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor7);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter9 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray17 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet18, addressArray17);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray20 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet21 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet21, phoneNumberArray20);
        gov.ca.cwds.rest.api.domain.Language[] languageArray23 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet24, languageArray23);
        gov.ca.cwds.rest.api.domain.Race[] raceArray26 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet27 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet27, raceArray26);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity31 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray32 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity31 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet33 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet33, ethnicityArray32);
        gov.ca.cwds.rest.api.domain.Person person35 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet21, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet24, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet27, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet33);
        boolean boolean36 = hOIReporter9.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role37 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        hOIReporter9.setRole(role37);
        hOIReporter9.setFirstName("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        boolean boolean41 = legacyDescriptor7.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + role37 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role37.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd-HH.mm.ss.SSS");
        java.lang.String str6 = ethnicity2.getSubEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str6.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimeString("2019-09-03-15.53.08.988");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03-15.53.08.988\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race5 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race6 = new gov.ca.cwds.rest.api.domain.Race(race5);
        java.lang.String str7 = race6.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray15 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet16 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet16, addressArray15);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray18 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet19 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, phoneNumberArray18);
        gov.ca.cwds.rest.api.domain.Language[] languageArray21 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet22 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet22, languageArray21);
        gov.ca.cwds.rest.api.domain.Race[] raceArray24 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet25, raceArray24);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity29 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray30 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity29 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31, ethnicityArray30);
        gov.ca.cwds.rest.api.domain.Person person33 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet16, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet19, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet22, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet31);
        java.lang.String str34 = person33.getSsn();
        boolean boolean35 = stringJsonUserType0.equals((java.lang.Object) race6, (java.lang.Object) str34);
        gov.ca.cwds.data.persistence.ns.Race race38 = new gov.ca.cwds.data.persistence.ns.Race(race6, "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "2019-09-03T15:53:03.344Z");
        java.lang.String str39 = race6.getRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str7.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str34.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str39.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        participantEntity0.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date4 = null;
        participantEntity0.setDateOfBirth(date4);
        participantEntity0.setId("_n");
        participantEntity0.setSealed((java.lang.Boolean) true);
        java.lang.String str10 = participantEntity0.getMiddleName();
        java.lang.String str11 = participantEntity0.getLegacyId();
        participantEntity0.setEthnicity("15:53:06");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        boolean boolean7 = participantEntity0.equals((java.lang.Object) '4');
        java.lang.String str8 = participantEntity0.getLegacyId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage5 = null;
        phoneNumber4.addMessage(errorMessage5);
        java.lang.Long long7 = phoneNumber4.getId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor20 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor20.setId("2019-09-03-15.52.55.282");
        java.lang.String str23 = legacyDescriptor20.getUiId();
        java.lang.String str24 = legacyDescriptor20.getUiId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter25 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role15, "HH:mm:ss", "Y", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.02.984", legacyDescriptor20);
        hOIReporter25.setLastName("{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        boolean boolean28 = phoneNumber4.equals((java.lang.Object) "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity31 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList32 = ethnicity31.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity35 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity31, "Anonymous Reporter", "N");
        java.lang.String str36 = ethnicity35.getSubEthnicity();
        java.util.Date date37 = ethnicity35.getLastUpdatedTime();
        java.lang.String str38 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date37);
        boolean boolean39 = phoneNumber4.equals((java.lang.Object) str38);
        java.lang.Long long40 = phoneNumber4.getId();
        java.lang.String str41 = phoneNumber4.getExtension();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7.equals(0L));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str36.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Sep 03 15:53:29 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str38 + "' != '" + "2019-09-03T15:53:29.467Z" + "'", str38.equals("2019-09-03T15:53:29.467Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds" + "'", str41.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds"));
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.time.LocalDate localDate1 = csecEntity0.getEndDate();
        java.lang.String str2 = csecEntity0.getParticipantId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet37 = person25.getPhoneNumber();
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList38 = person25.getMessages();
        java.util.Set<gov.ca.cwds.rest.api.domain.Race> raceSet39 = person25.getRace();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:29 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:29 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceSet39);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.toJson();
        java.lang.String str30 = hOIReporter0.getId();
        java.lang.String str31 = hOIReporter0.getLastName();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor32 = hOIReporter0.getLegacyDescriptor();
        java.lang.String str33 = legacyDescriptor32.getTableDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str29.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        participantEntity0.setGender("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        java.lang.String str3 = participantEntity0.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity4 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role5 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor10 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter11 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role5, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor10);
        java.lang.String str12 = hOIReporter11.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role13 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor18 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter19 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role13, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor18);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role20 = hOIReporter19.getRole();
        boolean boolean21 = hOIReporter11.equals((java.lang.Object) hOIReporter19);
        boolean boolean22 = csecEntity4.equals((java.lang.Object) hOIReporter19);
        boolean boolean23 = participantEntity0.equals((java.lang.Object) csecEntity4);
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType24 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean25 = stringJsonUserType24.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race29 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race30 = new gov.ca.cwds.rest.api.domain.Race(race29);
        java.lang.String str31 = race30.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray39 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet40, addressArray39);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray42 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet43 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet43, phoneNumberArray42);
        gov.ca.cwds.rest.api.domain.Language[] languageArray45 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet46 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet46, languageArray45);
        gov.ca.cwds.rest.api.domain.Race[] raceArray48 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet49 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet49, raceArray48);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity53 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray54 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity53 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet55 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet55, ethnicityArray54);
        gov.ca.cwds.rest.api.domain.Person person57 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet40, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet43, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet46, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet49, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet55);
        java.lang.String str58 = person57.getSsn();
        boolean boolean59 = stringJsonUserType24.equals((java.lang.Object) race30, (java.lang.Object) str58);
        java.lang.Object obj62 = stringJsonUserType24.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity64 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean65 = participantEntity64.getProbationYouth();
        participantEntity64.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.Date date68 = null;
        participantEntity64.setDateOfBirth(date68);
        participantEntity64.setId("_n");
        participantEntity64.setScreeningId("00001");
        java.lang.Boolean boolean74 = participantEntity64.getSealed();
        java.lang.String str75 = participantEntity64.getSsn();
        java.lang.Object obj76 = stringJsonUserType24.assemble((java.io.Serializable) "00010", (java.lang.Object) str75);
        boolean boolean77 = participantEntity0.equals(obj76);
        java.util.Date date78 = null;
        participantEntity0.setDateOfDeath(date78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + role5 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role5.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "2019-09-03-15.52.55.282" + "'", str12.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role13 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role13.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role20 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role20.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str31.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str58.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + '#' + "'", obj62.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj76 + "' != '" + "00010" + "'", obj76.equals("00010"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Integer int1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookZipcodeString("2019-09-03T15:53:26.572-0700");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: Unable to uncook zipcode string {0} = 2019-09-03T15:53:26.572-0700");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        java.lang.String str3 = clientRelationship0.getSecondaryClientId();
        java.util.Date date4 = clientRelationship0.getEndDate();
        java.lang.String str5 = clientRelationship0.getSameHomeCode();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber("2019-09-03T15:53:26.809Z", "2019-09-03T15:53:16.789Z", "2019-09-03-15.53.25.802");
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getLastName();
        java.lang.String str27 = person25.getNameSuffix();
        java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet28 = person25.getEthnicity();
        java.util.Set<gov.ca.cwds.rest.api.domain.Address> addressSet29 = person25.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str26.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "" + "'", str27.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicitySet28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressSet29);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.lang.String str2 = participantEntity0.getApproximateAgeUnits();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity3 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean4 = participantEntity3.getProbationYouth();
        participantEntity3.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity3.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray9 = participantEntity3.getLanguages();
        java.lang.String[] strArray10 = participantEntity3.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person14 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity15 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity16 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person14, ethnicity15);
        java.util.Date date17 = personEthnicity16.getLastUpdatedTime();
        java.lang.String str18 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date17);
        java.lang.String str19 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date17);
        gov.ca.cwds.data.persistence.ns.Person person24 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity26 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person24, ethnicity25);
        java.util.Date date27 = personEthnicity26.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person28 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity29 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity30 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person28, ethnicity29);
        java.util.Date date31 = personEthnicity30.getLastUpdatedTime();
        boolean boolean32 = personEthnicity26.equals((java.lang.Object) personEthnicity30);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity36 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity26.setEthnicity(ethnicity36);
        java.util.Date date38 = personEthnicity26.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship39 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date17, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date38);
        java.lang.String str40 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date38);
        gov.ca.cwds.data.persistence.ns.Person person41 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity42 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity43 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person41, ethnicity42);
        java.util.Date date44 = personEthnicity43.getLastUpdatedTime();
        java.util.Date date45 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date44);
        java.lang.String str46 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date45);
        java.lang.String str47 = gov.ca.cwds.rest.api.domain.DomainChef.cookStrictTimestamp(date45);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity52 = null;
        java.lang.String[] strArray57 = new java.lang.String[] { "Y", "Anonymous Reporter", "2019-09-03T15:53:03.344Z" };
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity58 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean59 = participantEntity58.getProbationYouth();
        participantEntity58.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity58.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray64 = participantEntity58.getLanguages();
        java.lang.String[] strArray65 = participantEntity58.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity77 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", date38, date45, "2019-09-03T15:53:03.344Z", "hi!", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "2019-09-03T15:53:01.223Z", screeningEntity52, "2019-09-03-15.52.58.871", strArray57, strArray65, "_n", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03-15.53.00.269", "yyyy-MM-dd", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", (java.lang.Boolean) true, (java.lang.Boolean) false, (java.lang.Boolean) true, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsByPrimaryClientIds", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Boolean) true);
        participantEntity3.setDateOfBirth(date38);
        participantEntity0.setDateOfDeath(date38);
        java.lang.String[] strArray80 = participantEntity0.getRoles();
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity81 = participantEntity0.getScreeningEntity();
        java.lang.String str82 = participantEntity0.getApproximateAge();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date17);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 03 15:53:29 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "2019-09-03" + "'", str18.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "2019-09-03" + "'", str19.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:29 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date31);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Sep 03 15:53:29 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date38);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Tue Sep 03 15:53:29 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str40 + "' != '" + "2019-09-03T15:53:29.725-0700" + "'", str40.equals("2019-09-03T15:53:29.725-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date44);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Sep 03 15:53:29 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date45);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Sep 03 15:53:29 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str46 + "' != '" + "15:53:29" + "'", str46.equals("15:53:29"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str47 + "' != '" + "2019-09-03T15:53:29.725-0700" + "'", str47.equals("2019-09-03T15:53:29.725-0700"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role0 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter6 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role0, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor5);
        java.lang.String str7 = hOIReporter6.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role8 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor13 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter14 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role8, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor13);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role15 = hOIReporter14.getRole();
        boolean boolean16 = hOIReporter6.equals((java.lang.Object) hOIReporter14);
        hOIReporter6.setNameSuffix("2019-09-03T15:53:29.725-0700");
        org.junit.Assert.assertTrue("'" + role0 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role0.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03-15.52.55.282" + "'", str7.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role8 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role8.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role15 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role15.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        java.lang.String str3 = clientRelationship0.getSecondaryClientId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date5 = clientRelationship4.getLastUpdatedTime();
        boolean boolean6 = clientRelationship0.equals((java.lang.Object) date5);
        java.util.Date date7 = clientRelationship0.getLastUpdatedTime();
        java.util.Date date8 = clientRelationship0.getEndDate();
        java.util.Date date9 = clientRelationship0.getStartDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date9);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str5 = ethnicity4.getEthnicityType();
        java.lang.Long long6 = ethnicity4.getId();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        boolean boolean15 = personEthnicity9.equals((java.lang.Object) personEthnicity13);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId16 = personEthnicity13.getPrimaryKey();
        java.io.Serializable serializable17 = personEthnicityId16.getPrimaryKey();
        boolean boolean18 = stringArrayType0.equals((java.lang.Object) long6, (java.lang.Object) personEthnicityId16);
        java.lang.Class<java.lang.String[]> strArrayClass19 = stringArrayType0.returnedClass();
        boolean boolean20 = stringArrayType0.isMutable();
        gov.ca.cwds.rest.api.domain.Language language22 = new gov.ca.cwds.rest.api.domain.Language("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId");
        java.lang.String str23 = language22.getTheLanguage();
        java.io.Serializable serializable24 = stringArrayType0.disassemble((java.lang.Object) language22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:29 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:29 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId" + "'", str23.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serializable24);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        java.lang.String str2 = participantEntity0.getNameSuffix();
        participantEntity0.setLegacyId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity5 = null;
        participantEntity0.setScreeningEntity(screeningEntity5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        java.lang.Object obj9 = stringArrayType0.assemble((java.io.Serializable) role1, (java.lang.Object) strArray8);
        java.lang.Class<java.lang.String[]> strArrayClass10 = stringArrayType0.returnedClass();
        java.sql.ResultSet resultSet11 = null;
        java.lang.String[] strArray17 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor18 = null;
        java.lang.Object obj20 = stringArrayType0.nullSafeGet(resultSet11, strArray17, sharedSessionContractImplementor18, (java.lang.Object) 1);
        java.lang.Object obj21 = null;
        java.lang.Object obj22 = stringArrayType0.deepCopy(obj21);
        int[] intArray23 = stringArrayType0.sqlTypes();
        java.lang.Class<java.lang.String[]> strArrayClass24 = stringArrayType0.returnedClass();
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType25 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity29 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str30 = ethnicity29.getEthnicityType();
        java.lang.Long long31 = ethnicity29.getId();
        gov.ca.cwds.data.persistence.ns.Person person32 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity33 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity34 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person32, ethnicity33);
        java.util.Date date35 = personEthnicity34.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person36 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity37 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity38 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person36, ethnicity37);
        java.util.Date date39 = personEthnicity38.getLastUpdatedTime();
        boolean boolean40 = personEthnicity34.equals((java.lang.Object) personEthnicity38);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId41 = personEthnicity38.getPrimaryKey();
        java.io.Serializable serializable42 = personEthnicityId41.getPrimaryKey();
        boolean boolean43 = stringArrayType25.equals((java.lang.Object) long31, (java.lang.Object) personEthnicityId41);
        java.io.Serializable serializable44 = null;
        gov.ca.cwds.rest.api.domain.Address[] addressArray52 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet53 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet53, addressArray52);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray55 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet56 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet56, phoneNumberArray55);
        gov.ca.cwds.rest.api.domain.Language[] languageArray58 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet59 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet59, languageArray58);
        gov.ca.cwds.rest.api.domain.Race[] raceArray61 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet62 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet62, raceArray61);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity66 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray67 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity66 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet68 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet68, ethnicityArray67);
        gov.ca.cwds.rest.api.domain.Person person70 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet53, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet56, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet59, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet62, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet68);
        java.lang.String str71 = person70.getMiddleName();
        java.lang.String str72 = person70.getNameSuffix();
        java.lang.String str73 = person70.getGender();
        java.lang.String str74 = person70.getMiddleName();
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber79 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId", "2019-09-03-15.52.55.282", "_n");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList80 = phoneNumber79.getMessages();
        person70.setMessages(errorMessageList80);
        java.lang.Object obj82 = null;
        boolean boolean83 = person70.equals(obj82);
        java.lang.Object obj84 = stringArrayType25.assemble(serializable44, obj82);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable85 = stringArrayType0.disassemble((java.lang.Object) stringArrayType25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: gov.ca.cwds.data.persistence.hibernate.StringArrayType cannot be cast to java.io.Serializable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "hi!" + "'", str30.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date35);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str71 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str71.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str72 + "' != '" + "" + "'", str72.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str73 + "' != '" + "hi!" + "'", str73.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str74.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj84);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "Anonymous Reporter", "N");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address15 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor14);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship16 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date17 = clientRelationship16.getLastUpdatedTime();
        java.lang.String str18 = clientRelationship16.getSecondaryClientId();
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        java.lang.String str23 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date22);
        java.lang.String str24 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date22);
        clientRelationship16.setLastUpdatedTime(date22);
        boolean boolean26 = address15.equals((java.lang.Object) date22);
        boolean boolean27 = ethnicity2.equals((java.lang.Object) date22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "2019-09-03" + "'", str23.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "2019-09-03" + "'", str24.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        gov.ca.cwds.data.persistence.ns.Person person1 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity2 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity3 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person1, ethnicity2);
        java.util.Date date4 = personEthnicity3.getLastUpdatedTime();
        java.util.Date date5 = personEthnicity3.getCreateDateTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date5);
        gov.ca.cwds.data.persistence.ns.Person person9 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity11 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person9, ethnicity10);
        java.util.Date date12 = personEthnicity11.getLastUpdatedTime();
        java.lang.String str13 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        java.lang.String str14 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship34 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date12, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date33);
        java.lang.String str35 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date12);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity40 = null;
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType42 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role43 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity44 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean45 = participantEntity44.getProbationYouth();
        participantEntity44.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity44.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray50 = participantEntity44.getLanguages();
        java.lang.Object obj51 = stringArrayType42.assemble((java.io.Serializable) role43, (java.lang.Object) strArray50);
        java.lang.Class<java.lang.String[]> strArrayClass52 = stringArrayType42.returnedClass();
        java.sql.ResultSet resultSet53 = null;
        java.lang.String[] strArray59 = new java.lang.String[] { "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "N", "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipBySecondaryClientId", "2019-09-03T15:53:03.344Z", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" };
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor60 = null;
        java.lang.Object obj62 = stringArrayType42.nullSafeGet(resultSet53, strArray59, sharedSessionContractImplementor60, (java.lang.Object) 1);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity63 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean64 = participantEntity63.getProbationYouth();
        participantEntity63.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity63.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray69 = participantEntity63.getLanguages();
        java.lang.String[] strArray70 = participantEntity63.getLanguages();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity82 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity("hi!", date5, date12, "2019-09-03-15.53.07.205", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.05.703", "yyyy-MM-dd-HH.mm.ss.SSS", screeningEntity40, "yyyy-MM-dd HH:mm:ss.SSS", strArray59, strArray70, "", "yyyy-MM-dd HH:mm:ss.SSS", "2019-09-03T15:53:08.733-0700", "", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", (java.lang.Boolean) false, (java.lang.Boolean) false, (java.lang.Boolean) true, "2019-09-03T15:53:08.733-0700", "15:53:08", (java.lang.Boolean) true);
        participantEntity82.setId("2019-09-03T15:53:11.857Z");
        java.lang.String str85 = participantEntity82.getLegacyId();
        participantEntity82.setMiddleName("2019-09-03T15:53:16.062Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date4);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03T15:53:30.137Z" + "'", str6.equals("2019-09-03T15:53:30.137Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2019-09-03" + "'", str13.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "2019-09-03" + "'", str14.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "2019-09-03" + "'", str35.equals("2019-09-03"));
        org.junit.Assert.assertTrue("'" + role43 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", role43.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER + "'", obj51.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.NON_MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArrayClass52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str85.equals("yyyy-MM-dd HH:mm:ss.SSS"));
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        java.lang.Object obj3 = stringJsonUserType0.deepCopy((java.lang.Object) "N");
        boolean boolean4 = stringJsonUserType0.isMutable();
        int[] intArray5 = stringJsonUserType0.sqlTypes();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj3 + "' != '" + "N" + "'", obj3.equals("N"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray5);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        csecEntity0.setParticipantId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds");
        gov.ca.cwds.data.persistence.ns.Person person3 = null;
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity6 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList7 = ethnicity6.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity10 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity6, "Anonymous Reporter", "N");
        java.lang.String str11 = ethnicity10.getSubEthnicity();
        java.util.Date date12 = ethnicity10.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person3, ethnicity10);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId14 = personEthnicity13.getPrimaryKey();
        boolean boolean15 = csecEntity0.equals((java.lang.Object) personEthnicityId14);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity16 = personEthnicityId14.getEthnicity();
        gov.ca.cwds.data.persistence.ns.Person person17 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity18 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity19 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person17, ethnicity18);
        java.util.Date date20 = personEthnicity19.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person21 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity22 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity23 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person21, ethnicity22);
        java.util.Date date24 = personEthnicity23.getLastUpdatedTime();
        boolean boolean25 = personEthnicity19.equals((java.lang.Object) personEthnicity23);
        boolean boolean27 = personEthnicity19.equals((java.lang.Object) (-1.0f));
        java.lang.String str28 = personEthnicity19.getCreateUserId();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity29 = personEthnicity19.getEthnicity();
        gov.ca.cwds.data.persistence.ns.Person person30 = personEthnicity19.getPerson();
        boolean boolean31 = personEthnicityId14.equals((java.lang.Object) person30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str11.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date12);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicity16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date20);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date24);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ethnicity29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(person30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getMiddleName();
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType27 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean28 = stringJsonUserType27.isMutable();
        gov.ca.cwds.data.persistence.ns.Race race32 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race33 = new gov.ca.cwds.rest.api.domain.Race(race32);
        java.lang.String str34 = race33.getRaceType();
        gov.ca.cwds.rest.api.domain.Address[] addressArray42 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet43 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet43, addressArray42);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray45 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet46 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet46, phoneNumberArray45);
        gov.ca.cwds.rest.api.domain.Language[] languageArray48 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet49 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet49, languageArray48);
        gov.ca.cwds.rest.api.domain.Race[] raceArray51 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet52 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet52, raceArray51);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity56 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray57 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity56 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet58 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet58, ethnicityArray57);
        gov.ca.cwds.rest.api.domain.Person person60 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet43, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet46, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet49, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet52, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet58);
        java.lang.String str61 = person60.getSsn();
        boolean boolean62 = stringJsonUserType27.equals((java.lang.Object) race33, (java.lang.Object) str61);
        java.lang.Object obj65 = stringJsonUserType27.assemble((java.io.Serializable) '#', (java.lang.Object) 10.0d);
        boolean boolean66 = person25.equals((java.lang.Object) 10.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str26.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str34.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str61.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + '#' + "'", obj65.equals('#'));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookTimestampString("2019-09-03T15:53:29.467Z");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unparseable date: \"2019-09-03T15:53:29.467Z\"");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        java.lang.String str3 = clientRelationship0.getLastUpdatedId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship4.setLastUpdatedId("");
        clientRelationship4.setLastUpdatedId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        boolean boolean9 = clientRelationship0.relatedTo(clientRelationship4);
        java.lang.String str10 = clientRelationship4.getSameHomeCode();
        gov.ca.cwds.data.persistence.ns.Race race14 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        gov.ca.cwds.rest.api.domain.Race race15 = new gov.ca.cwds.rest.api.domain.Race(race14);
        java.lang.Long long16 = race14.getPrimaryKey();
        boolean boolean17 = clientRelationship4.equals((java.lang.Object) long16);
        java.lang.String str18 = clientRelationship4.getLastUpdatedId();
        clientRelationship4.setLastUpdatedId("2019-09-03T15:53:04.320-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str18.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean1 = gov.ca.cwds.rest.api.domain.DomainChef.uncookBooleanString("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
            org.junit.Assert.fail("Expected exception of type gov.ca.cwds.rest.api.ApiException; message: java.text.ParseException: Unable to generate boolean");
        } catch (gov.ca.cwds.rest.api.ApiException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        int[] intArray47 = stringArrayType0.sqlTypes();
        int[] intArray48 = stringArrayType0.sqlTypes();
        boolean boolean49 = stringArrayType0.isMutable();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        gov.ca.cwds.data.persistence.ns.Person person2 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity4 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person2, ethnicity3);
        java.util.Date date5 = personEthnicity4.getLastUpdatedTime();
        java.lang.String str6 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date5);
        java.lang.String str7 = gov.ca.cwds.rest.api.domain.DomainChef.cookDate(date5);
        gov.ca.cwds.data.persistence.ns.Person person12 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity14 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person12, ethnicity13);
        java.util.Date date15 = personEthnicity14.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person16 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity17 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity18 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person16, ethnicity17);
        java.util.Date date19 = personEthnicity18.getLastUpdatedTime();
        boolean boolean20 = personEthnicity14.equals((java.lang.Object) personEthnicity18);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity14.setEthnicity(ethnicity24);
        java.util.Date date26 = personEthnicity14.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship27 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", (java.lang.Short) (short) 1, date5, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "2019-09-03", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", date26);
        java.util.Date date28 = clientRelationship27.getLastUpdatedTime();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date5);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "2019-09-03" + "'", str6.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2019-09-03" + "'", str7.equals("2019-09-03"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date15);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date19);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date28);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray4 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList5 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList5, csecEntityArray4);
        participantEntity2.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList5);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity8 = participantEntity2.getScreening();
        java.lang.String str9 = participantEntity2.getScreeningId();
        java.lang.String str10 = participantEntity2.getApproximateAge();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity11 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        gov.ca.cwds.data.persistence.ns.Person person12 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity14 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person12, ethnicity13);
        java.util.Date date15 = personEthnicity14.getLastUpdatedTime();
        java.util.Date date16 = personEthnicity14.getCreateDateTime();
        java.lang.String str17 = gov.ca.cwds.rest.api.domain.DomainChef.cookISO8601Timestamp(date16);
        participantEntity11.setDateOfBirth(date16);
        participantEntity2.setDateOfDeath(date16);
        gov.ca.cwds.data.persistence.ns.Person person24 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity25 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity26 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person24, ethnicity25);
        java.util.Date date27 = personEthnicity26.getLastUpdatedTime();
        java.util.Date date28 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date27);
        java.lang.String str29 = gov.ca.cwds.rest.api.domain.DomainChef.cookTime(date28);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship30 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (java.lang.Short) (short) -1, date16, "15:53:04", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "15:53:07", date28);
        clientRelationship30.setLastUpdatedId("2019-09-03T15:53:23.114Z");
        clientRelationship30.setLastUpdatedId("2019-09-03T15:53:08.285-0700");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date15);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date16);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str17 + "' != '" + "2019-09-03T15:53:30.502Z" + "'", str17.equals("2019-09-03T15:53:30.502Z"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date27);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date28);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str29 + "' != '" + "15:53:30" + "'", str29.equals("15:53:30"));
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber3 = new gov.ca.cwds.rest.api.domain.PhoneNumber("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "2019-09-03T15:52:58.300-0700", "yyyy-_m_m-dd _h_h:mm:ss._s_s_s");
        java.lang.Long long4 = phoneNumber3.getId();
        gov.ca.cwds.rest.api.domain.error.ErrorMessage errorMessage5 = null;
        phoneNumber3.addMessage(errorMessage5);
        boolean boolean7 = phoneNumber3.hasMessages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(long4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber4 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) (-1L), "15:53:06", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "yyyy-MM-dd");
        java.lang.Long long5 = phoneNumber4.getId();
        java.lang.Long long6 = phoneNumber4.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5.equals((-1L)));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6.equals((-1L)));
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        java.lang.String str1 = csecEntity0.getParticipantId();
        java.lang.Integer int2 = csecEntity0.getId();
        java.time.LocalDate localDate3 = null;
        csecEntity0.setStartDate(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        gov.ca.cwds.data.persistence.ns.Person person0 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity1 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity2 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person0, ethnicity1);
        java.util.Date date3 = personEthnicity2.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person4 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity5 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity6 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person4, ethnicity5);
        java.util.Date date7 = personEthnicity6.getLastUpdatedTime();
        boolean boolean8 = personEthnicity2.equals((java.lang.Object) personEthnicity6);
        boolean boolean10 = personEthnicity2.equals((java.lang.Object) (-1.0f));
        java.lang.String str11 = personEthnicity2.getCreateUserId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter12 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray20 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet21 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet21, addressArray20);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray23 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet24, phoneNumberArray23);
        gov.ca.cwds.rest.api.domain.Language[] languageArray26 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet27 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet27, languageArray26);
        gov.ca.cwds.rest.api.domain.Race[] raceArray29 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet30 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet30, raceArray29);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity34 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray35 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity34 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet36 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet36, ethnicityArray35);
        gov.ca.cwds.rest.api.domain.Person person38 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet21, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet24, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet27, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet30, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet36);
        boolean boolean39 = hOIReporter12.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        boolean boolean40 = personEthnicity2.equals((java.lang.Object) boolean39);
        gov.ca.cwds.data.persistence.ns.Person person41 = null;
        personEthnicity2.setPerson(person41);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId43 = personEthnicity2.getPrimaryKey();
        gov.ca.cwds.data.persistence.ns.Person person44 = null;
        personEthnicityId43.setPerson(person44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date3);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date7);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId43);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        gov.ca.cwds.rest.api.domain.Race race2 = new gov.ca.cwds.rest.api.domain.Race("_n", "");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor10 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address11 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor10);
        java.lang.String str12 = address11.getStreetAddress();
        boolean boolean13 = race2.equals((java.lang.Object) str12);
        java.lang.String str14 = race2.getRaceType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" + "'", str12.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "_n" + "'", str14.equals("_n"));
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        participantEntity0.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str10 = participantEntity0.getLegacyId();
        participantEntity0.setSealed((java.lang.Boolean) false);
        participantEntity0.setNameSuffix("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByRelatedScreeningIdAndParticipantId");
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity15 = participantEntity0.getScreening();
        java.lang.String str16 = participantEntity0.getLegacyId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity2 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList3 = ethnicity2.getMessages();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity6 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "Anonymous Reporter", "N");
        java.lang.String str7 = ethnicity2.getEthnicityType();
        boolean boolean9 = ethnicity2.equals((java.lang.Object) ' ');
        java.lang.String str10 = ethnicity2.getSubEthnicity();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity13 = new gov.ca.cwds.data.persistence.ns.Ethnicity(ethnicity2, "2019-09-03-15.53.18.945", "2019-09-03-15.53.26.640");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds" + "'", str7.equals("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str10.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.joda.time.DateTime dateTime2 = null;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor5 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor("2019-09-03T15:53:13.177Z", "2019-09-03T15:53:03.344Z", dateTime2, "2019-09-03T15:53:10.189Z", "{\"id\":\"15:52:54\",\"first_name\":\"2019-09-03-15.52.55.282\",\"last_name\":\"{\\\"id\\\":null,\\\"first_name\\\":null,\\\"last_name\\\":null,\\\"name_suffix\\\":null,\\\"role\\\":null,\\\"legacy_descriptor\\\":{\\\"legacy_id\\\":null,\\\"legacy_ui_id\\\":null,\\\"legacy_last_updated\\\":null,\\\"legacy_table_name\\\":null,\\\"legacy_table_description\\\":null}}\",\"name_suffix\":\"yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'\",\"role\":\"ANONYMOUS_REPORTER\"}");
        legacyDescriptor5.setUiId("2019-09-03T15:53:08.868Z");
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        int[] intArray2 = stringJsonUserType0.sqlTypes();
        java.lang.Object obj4 = stringJsonUserType0.deepCopy((java.lang.Object) "2019-09-03-15.53.08.216");
        gov.ca.cwds.rest.api.domain.Address[] addressArray13 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet14, addressArray13);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray16 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet17, phoneNumberArray16);
        gov.ca.cwds.rest.api.domain.Language[] languageArray19 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet20 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet20, languageArray19);
        gov.ca.cwds.rest.api.domain.Race[] raceArray22 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet23, raceArray22);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity27 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray28 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity27 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet29 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet29, ethnicityArray28);
        gov.ca.cwds.rest.api.domain.Person person31 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet20, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet23, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet29);
        java.lang.String str32 = person31.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person33 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity34 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity35 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person33, ethnicity34);
        java.util.Date date36 = personEthnicity35.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person37 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity38 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity39 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person37, ethnicity38);
        java.util.Date date40 = personEthnicity39.getLastUpdatedTime();
        boolean boolean41 = personEthnicity35.equals((java.lang.Object) personEthnicity39);
        boolean boolean42 = person31.equals((java.lang.Object) boolean41);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet43 = person31.getPhoneNumber();
        java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet44 = person31.getEthnicity();
        boolean boolean45 = person31.hasMessages();
        gov.ca.cwds.rest.api.domain.Address[] addressArray53 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet54 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet54, addressArray53);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray56 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet57 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet57, phoneNumberArray56);
        gov.ca.cwds.rest.api.domain.Language[] languageArray59 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet60 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet60, languageArray59);
        gov.ca.cwds.rest.api.domain.Race[] raceArray62 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet63 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet63, raceArray62);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity67 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray68 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity67 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet69 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet69, ethnicityArray68);
        gov.ca.cwds.rest.api.domain.Person person71 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet54, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet57, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet60, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet63, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet69);
        java.lang.String str72 = person71.getMiddleName();
        java.lang.String str73 = person71.getNameSuffix();
        java.lang.String str74 = person71.getGender();
        java.lang.String str75 = person71.getMiddleName();
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber80 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId", "2019-09-03-15.52.55.282", "_n");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList81 = phoneNumber80.getMessages();
        person71.setMessages(errorMessageList81);
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList83 = person71.getMessages();
        person31.setMessages(errorMessageList83);
        boolean boolean85 = stringJsonUserType0.equals((java.lang.Object) "15:53:23", (java.lang.Object) person31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "2019-09-03-15.53.08.216" + "'", obj4.equals("2019-09-03-15.53.08.216"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str32.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date40);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Sep 03 15:53:30 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicitySet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str72 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str72.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str73 + "' != '" + "" + "'", str73.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "hi!" + "'", str74.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str75 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str75.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        gov.ca.cwds.rest.api.domain.Address address15 = new gov.ca.cwds.rest.api.domain.Address("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipByPrimaryClientId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIds", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ", "15:52:59", (java.lang.Integer) 10, "gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", (java.lang.Integer) 10, legacyDescriptor14);
        gov.ca.cwds.rest.api.domain.Address address16 = new gov.ca.cwds.rest.api.domain.Address("N", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByParticipantsId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantByRelatedScreeningIdAndLegacyId", "2019-09-03T15:52:58.300-0700", (java.lang.Integer) (-1), "00001", (java.lang.Integer) 100, legacyDescriptor14);
        boolean boolean17 = address16.hasMessages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        csecEntity0.setParticipantId("Y");
        csecEntity0.setParticipantId("2019-09-03T15:53:00.960Z");
        csecEntity0.setCsecCodeId("15:53:04");
        boolean boolean8 = csecEntity0.equals((java.lang.Object) (byte) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        gov.ca.cwds.data.persistence.ns.Race race3 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 1L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "2019-09-03-15.53.08.988");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity3 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 0L, "2019-09-03T15:53:04.320-0700", "2019-09-03T15:53:05.518Z");
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet4 = ethnicity3.getPersonEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet4);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity6 = participantEntity0.getScreening();
        java.lang.String str7 = participantEntity0.getScreeningId();
        java.lang.String str8 = participantEntity0.getId();
        participantEntity0.setProbationYouth((java.lang.Boolean) false);
        participantEntity0.setScreeningId("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        participantEntity0.setSsn("2019-09-03-15.52.59.761");
        participantEntity0.setMiddleName("15:52:59");
        participantEntity0.setGender("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship0.setLastUpdatedId("");
        java.lang.String str3 = clientRelationship0.getSecondaryClientId();
        java.util.Date date4 = clientRelationship0.getEndDate();
        java.lang.String str5 = clientRelationship0.getId();
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity11 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity12 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity11);
        java.util.Date date13 = personEthnicity12.getLastUpdatedTime();
        java.util.Date date14 = gov.ca.cwds.rest.api.domain.DomainChef.freshDate(date13);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.util.Date date33 = personEthnicity21.getLastUpdatedTime();
        java.lang.String str34 = gov.ca.cwds.rest.api.domain.DomainChef.cookTimestamp(date33);
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship35 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("2019-09-03T15:53:11.912-0700", (java.lang.Short) (short) 0, date13, "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "2019-09-03T15:53:23.564Z", "2019-09-03T15:53:11.111-0700", "2019-09-03T15:53:00.960Z", date33);
        java.util.Date date41 = gov.ca.cwds.rest.api.domain.DomainChef.uncookISO8601Timestamp("2019-09-03T15:53:16.789Z");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship42 = new gov.ca.cwds.data.persistence.cms.ClientRelationship("", (java.lang.Short) (short) 1, date33, "2019-09-03T15:53:22.232Z", "2019-09-03T15:53:05.703Z", "2019-09-03-15.53.26.640", "2019-09-03T15:53:14.800Z", date41);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = clientRelationship0.relatedTo(clientRelationship42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date13);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 03 15:53:31 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:31 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:31 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:31 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date33);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 03 15:53:31 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str34 + "' != '" + "2019-09-03-15.53.31.184" + "'", str34.equals("2019-09-03-15.53.31.184"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(date41.toString(), "Tue Sep 03 15:53:16 PDT 2019");
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray8 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet9 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet9, addressArray8);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray11 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet12 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, phoneNumberArray11);
        gov.ca.cwds.rest.api.domain.Language[] languageArray14 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet15 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet15, languageArray14);
        gov.ca.cwds.rest.api.domain.Race[] raceArray17 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet18 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet18, raceArray17);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity22 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray23 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity22 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet24 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24, ethnicityArray23);
        gov.ca.cwds.rest.api.domain.Person person26 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet9, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet12, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet15, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet18, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet24);
        boolean boolean27 = hOIReporter0.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str28 = hOIReporter0.getLastName();
        java.lang.String str29 = hOIReporter0.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role30 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor35 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter36 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role30, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor35);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role37 = hOIReporter36.getRole();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor42 = new gov.ca.cwds.rest.api.domain.LegacyDescriptor();
        legacyDescriptor42.setId("2019-09-03-15.52.55.282");
        java.lang.String str45 = legacyDescriptor42.getUiId();
        java.lang.String str46 = legacyDescriptor42.getUiId();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter47 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role37, "HH:mm:ss", "Y", "2019-09-03T15:53:03.344Z", "2019-09-03-15.53.02.984", legacyDescriptor42);
        hOIReporter0.setLegacyDescriptor(legacyDescriptor42);
        legacyDescriptor42.setId("2019-09-03T15:53:14.083Z");
        java.lang.String str51 = legacyDescriptor42.getTableDescription();
        java.lang.String str52 = legacyDescriptor42.getTableName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + role30 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role30.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role37 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role37.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        java.sql.ResultSet resultSet1 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity2 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean3 = participantEntity2.getProbationYouth();
        participantEntity2.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity2.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray8 = participantEntity2.getLanguages();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor9 = null;
        gov.ca.cwds.data.persistence.ns.Person person10 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity14 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity15 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person10, ethnicity14);
        java.lang.Object obj16 = stringArrayType0.nullSafeGet(resultSet1, strArray8, sharedSessionContractImplementor9, (java.lang.Object) personEthnicity15);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getMiddleName();
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet44 = person42.getPhoneNumber();
        java.lang.Object obj46 = stringArrayType0.assemble((java.io.Serializable) person42, (java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        gov.ca.cwds.data.persistence.ns.Race race50 = new gov.ca.cwds.data.persistence.ns.Race((java.lang.Long) 0L, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        java.lang.Long long51 = race50.getPrimaryKey();
        java.lang.String str52 = race50.getSubRaceType();
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonRace> personRaceSet53 = race50.getPersonRace();
        java.util.Date date54 = race50.getCreateDateTime();
        boolean boolean55 = person42.equals((java.lang.Object) date54);
        java.lang.String str56 = person42.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(obj16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str43.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51.equals(0L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSSZ" + "'", str52.equals("yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personRaceSet53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str56.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter0 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = hOIReporter0.getRole();
        java.lang.String str2 = hOIReporter0.getId();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor3 = hOIReporter0.getLegacyDescriptor();
        java.lang.String str4 = hOIReporter0.getNameSuffix();
        java.lang.String str5 = hOIReporter0.getNameSuffix();
        java.lang.String str6 = hOIReporter0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        java.lang.Object obj3 = stringJsonUserType0.deepCopy((java.lang.Object) "N");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter4 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role5 = hOIReporter4.getRole();
        java.lang.String str6 = hOIReporter4.getId();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = hOIReporter4.getLegacyDescriptor();
        java.lang.String str8 = hOIReporter4.getNameSuffix();
        hOIReporter4.setId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        java.lang.String str11 = hOIReporter4.toJson();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity12 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str13 = participantEntity12.getScreeningId();
        java.lang.Boolean boolean14 = participantEntity12.getProbationYouth();
        participantEntity12.setEstimatedDob((java.lang.Boolean) true);
        gov.ca.cwds.rest.api.domain.Address[] addressArray24 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet25 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet25, addressArray24);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray27 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet28 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, phoneNumberArray27);
        gov.ca.cwds.rest.api.domain.Language[] languageArray30 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet31 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet31, languageArray30);
        gov.ca.cwds.rest.api.domain.Race[] raceArray33 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet34 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet34, raceArray33);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity38 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray39 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity38 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet40 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40, ethnicityArray39);
        gov.ca.cwds.rest.api.domain.Person person42 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet25, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet28, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet31, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet34, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet40);
        java.lang.String str43 = person42.getLastName();
        java.lang.String str44 = person42.getNameSuffix();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity48 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.util.Set<gov.ca.cwds.data.persistence.ns.PersonEthnicity> personEthnicitySet49 = ethnicity48.getPersonEthnicity();
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity50 = new gov.ca.cwds.rest.api.domain.Ethnicity(ethnicity48);
        boolean boolean51 = person42.equals((java.lang.Object) ethnicity50);
        java.lang.Object obj52 = stringJsonUserType0.replace((java.lang.Object) hOIReporter4, (java.lang.Object) participantEntity12, (java.lang.Object) ethnicity50);
        java.sql.PreparedStatement preparedStatement53 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter54 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        gov.ca.cwds.rest.api.domain.Address[] addressArray62 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet63 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet63, addressArray62);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray65 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet66 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet66, phoneNumberArray65);
        gov.ca.cwds.rest.api.domain.Language[] languageArray68 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet69 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet69, languageArray68);
        gov.ca.cwds.rest.api.domain.Race[] raceArray71 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet72 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet72, raceArray71);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity76 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray77 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity76 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet78 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet78, ethnicityArray77);
        gov.ca.cwds.rest.api.domain.Person person80 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet63, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet66, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet69, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet72, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet78);
        boolean boolean81 = hOIReporter54.equals((java.lang.Object) "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId");
        java.lang.String str82 = hOIReporter54.getLastName();
        java.lang.String str83 = hOIReporter54.toJson();
        java.lang.String str84 = hOIReporter54.getId();
        java.lang.String str85 = hOIReporter54.getLastName();
        java.lang.String str86 = hOIReporter54.getNameSuffix();
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor87 = hOIReporter54.getLegacyDescriptor();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            stringJsonUserType0.nullSafeSet(preparedStatement53, (java.lang.Object) hOIReporter54, (-1), sharedSessionContractImplementor89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj3 + "' != '" + "N" + "'", obj3.equals("N"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(role5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "{\"id\":\"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\",\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str11.equals("{\"id\":\"gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds\",\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str43.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicitySet49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str83 + "' != '" + "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}" + "'", str83.equals("{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(legacyDescriptor87);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        gov.ca.cwds.data.persistence.ns.CsecEntity csecEntity0 = new gov.ca.cwds.data.persistence.ns.CsecEntity();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role1 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor6 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter7 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role1, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor6);
        java.lang.String str8 = hOIReporter7.getFirstName();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role9 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER;
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor14 = null;
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter15 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter(role9, "15:52:54", "2019-09-03-15.52.55.282", "{\"id\":null,\"first_name\":null,\"last_name\":null,\"name_suffix\":null,\"role\":null,\"legacy_descriptor\":{\"legacy_id\":null,\"legacy_ui_id\":null,\"legacy_last_updated\":null,\"legacy_table_name\":null,\"legacy_table_description\":null}}", "yyyy-_m_m-dd'_t'_h_h:mm:ss._s_s_s'_z'", legacyDescriptor14);
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role16 = hOIReporter15.getRole();
        boolean boolean17 = hOIReporter7.equals((java.lang.Object) hOIReporter15);
        boolean boolean18 = csecEntity0.equals((java.lang.Object) hOIReporter15);
        java.time.LocalDate localDate19 = csecEntity0.getStartDate();
        java.time.LocalDate localDate20 = csecEntity0.getStartDate();
        java.io.Serializable serializable21 = csecEntity0.getPrimaryKey();
        org.junit.Assert.assertTrue("'" + role1 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role1.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2019-09-03-15.52.55.282" + "'", str8.equals("2019-09-03-15.52.55.282"));
        org.junit.Assert.assertTrue("'" + role9 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role9.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        org.junit.Assert.assertTrue("'" + role16 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER + "'", role16.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.ANONYMOUS_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable21);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        gov.ca.cwds.rest.api.domain.Address[] addressArray7 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet8 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet8, addressArray7);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray10 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet11 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, phoneNumberArray10);
        gov.ca.cwds.rest.api.domain.Language[] languageArray13 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet14 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet14, languageArray13);
        gov.ca.cwds.rest.api.domain.Race[] raceArray16 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet17 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet17, raceArray16);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity21 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray22 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity21 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet23 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23, ethnicityArray22);
        gov.ca.cwds.rest.api.domain.Person person25 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet8, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet11, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet14, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet17, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet23);
        java.lang.String str26 = person25.getSsn();
        gov.ca.cwds.data.persistence.ns.Person person27 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity28 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity29 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person27, ethnicity28);
        java.util.Date date30 = personEthnicity29.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person31 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity32 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity33 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person31, ethnicity32);
        java.util.Date date34 = personEthnicity33.getLastUpdatedTime();
        boolean boolean35 = personEthnicity29.equals((java.lang.Object) personEthnicity33);
        boolean boolean36 = person25.equals((java.lang.Object) boolean35);
        java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet37 = person25.getPhoneNumber();
        java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet38 = person25.getEthnicity();
        boolean boolean39 = person25.hasMessages();
        gov.ca.cwds.rest.api.domain.Address[] addressArray47 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet48 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet48, addressArray47);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray50 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet51 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet51, phoneNumberArray50);
        gov.ca.cwds.rest.api.domain.Language[] languageArray53 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet54 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet54, languageArray53);
        gov.ca.cwds.rest.api.domain.Race[] raceArray56 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet57 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet57, raceArray56);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity61 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray62 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity61 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet63 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet63, ethnicityArray62);
        gov.ca.cwds.rest.api.domain.Person person65 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet48, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet51, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet54, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet57, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet63);
        java.lang.String str66 = person65.getMiddleName();
        java.lang.String str67 = person65.getNameSuffix();
        java.lang.String str68 = person65.getGender();
        java.lang.String str69 = person65.getMiddleName();
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber74 = new gov.ca.cwds.rest.api.domain.PhoneNumber((java.lang.Long) 0L, "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId", "2019-09-03-15.52.55.282", "_n");
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList75 = phoneNumber74.getMessages();
        person65.setMessages(errorMessageList75);
        java.util.ArrayList<gov.ca.cwds.rest.api.domain.error.ErrorMessage> errorMessageList77 = person65.getMessages();
        person25.setMessages(errorMessageList77);
        java.util.Set<gov.ca.cwds.rest.api.domain.Race> raceSet79 = person25.getRace();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "yyyy-MM-dd-HH.mm.ss.SSS" + "'", str26.equals("yyyy-MM-dd-HH.mm.ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date30);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 03 15:53:31 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date34);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Sep 03 15:53:31 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberSet37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicitySet38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str66.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "" + "'", str67.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "hi!" + "'", str68.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str69.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorMessageList77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceSet79);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity safelySurrenderedBabiesEntity0 = new gov.ca.cwds.data.persistence.ns.SafelySurrenderedBabiesEntity();
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity1 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean2 = participantEntity1.getProbationYouth();
        participantEntity1.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity1.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        participantEntity1.setSsn("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findLegacyIdListByScreeningId");
        safelySurrenderedBabiesEntity0.setParticipantEntity(participantEntity1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean2);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getApproximateAgeUnits();
        java.lang.String[] strArray2 = participantEntity0.getLanguages();
        java.lang.String str3 = participantEntity0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.String str1 = participantEntity0.getScreeningId();
        java.util.Date date2 = participantEntity0.getDateOfBirth();
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity3 = participantEntity0.getScreeningEntity();
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity4 = participantEntity0.getScreening();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity4);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        gov.ca.cwds.data.persistence.hibernate.StringArrayType stringArrayType0 = new gov.ca.cwds.data.persistence.hibernate.StringArrayType();
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity4 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        java.lang.String str5 = ethnicity4.getEthnicityType();
        java.lang.Long long6 = ethnicity4.getId();
        gov.ca.cwds.data.persistence.ns.Person person7 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity8 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity9 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person7, ethnicity8);
        java.util.Date date10 = personEthnicity9.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person11 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity12 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity13 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person11, ethnicity12);
        java.util.Date date14 = personEthnicity13.getLastUpdatedTime();
        boolean boolean15 = personEthnicity9.equals((java.lang.Object) personEthnicity13);
        gov.ca.cwds.data.persistence.ns.PersonEthnicityId personEthnicityId16 = personEthnicity13.getPrimaryKey();
        java.io.Serializable serializable17 = personEthnicityId16.getPrimaryKey();
        boolean boolean18 = stringArrayType0.equals((java.lang.Object) long6, (java.lang.Object) personEthnicityId16);
        gov.ca.cwds.data.persistence.ns.Person person19 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity20 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity21 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person19, ethnicity20);
        java.util.Date date22 = personEthnicity21.getLastUpdatedTime();
        gov.ca.cwds.data.persistence.ns.Person person23 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity24 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity25 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person23, ethnicity24);
        java.util.Date date26 = personEthnicity25.getLastUpdatedTime();
        boolean boolean27 = personEthnicity21.equals((java.lang.Object) personEthnicity25);
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity31 = new gov.ca.cwds.data.persistence.ns.Ethnicity((java.lang.Long) 1L, "hi!", "");
        personEthnicity21.setEthnicity(ethnicity31);
        java.lang.Long long33 = ethnicity31.getId();
        gov.ca.cwds.rest.api.domain.Address[] addressArray41 = new gov.ca.cwds.rest.api.domain.Address[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address> addressSet42 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Address>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Address>) addressSet42, addressArray41);
        gov.ca.cwds.rest.api.domain.PhoneNumber[] phoneNumberArray44 = new gov.ca.cwds.rest.api.domain.PhoneNumber[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber> phoneNumberSet45 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.PhoneNumber>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet45, phoneNumberArray44);
        gov.ca.cwds.rest.api.domain.Language[] languageArray47 = new gov.ca.cwds.rest.api.domain.Language[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language> languageSet48 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Language>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Language>) languageSet48, languageArray47);
        gov.ca.cwds.rest.api.domain.Race[] raceArray50 = new gov.ca.cwds.rest.api.domain.Race[] {};
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race> raceSet51 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Race>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Race>) raceSet51, raceArray50);
        gov.ca.cwds.rest.api.domain.Ethnicity ethnicity55 = new gov.ca.cwds.rest.api.domain.Ethnicity("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        gov.ca.cwds.rest.api.domain.Ethnicity[] ethnicityArray56 = new gov.ca.cwds.rest.api.domain.Ethnicity[] { ethnicity55 };
        java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity> ethnicitySet57 = new java.util.LinkedHashSet<gov.ca.cwds.rest.api.domain.Ethnicity>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet57, ethnicityArray56);
        gov.ca.cwds.rest.api.domain.Person person59 = new gov.ca.cwds.rest.api.domain.Person("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "", "hi!", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findByScreeningIdAndLegacyId", "yyyy-MM-dd-HH.mm.ss.SSS", (java.util.Set<gov.ca.cwds.rest.api.domain.Address>) addressSet42, (java.util.Set<gov.ca.cwds.rest.api.domain.PhoneNumber>) phoneNumberSet45, (java.util.Set<gov.ca.cwds.rest.api.domain.Language>) languageSet48, (java.util.Set<gov.ca.cwds.rest.api.domain.Race>) raceSet51, (java.util.Set<gov.ca.cwds.rest.api.domain.Ethnicity>) ethnicitySet57);
        java.lang.String str60 = person59.getLastName();
        java.lang.String str61 = person59.getNameSuffix();
        java.lang.String str62 = person59.getMiddleName();
        java.lang.Object obj63 = stringArrayType0.assemble((java.io.Serializable) ethnicity31, (java.lang.Object) person59);
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity64 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean65 = participantEntity64.getProbationYouth();
        participantEntity64.setLastName("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        participantEntity64.setApproximateAgeUnits("yyyy-MM-dd'T'HH:mm:ss.SSSZZ");
        java.lang.String[] strArray70 = participantEntity64.getLanguages();
        java.lang.String[] strArray71 = participantEntity64.getLanguages();
        gov.ca.cwds.data.persistence.ns.Person person72 = null;
        gov.ca.cwds.data.persistence.ns.Ethnicity ethnicity73 = null;
        gov.ca.cwds.data.persistence.ns.PersonEthnicity personEthnicity74 = new gov.ca.cwds.data.persistence.ns.PersonEthnicity(person72, ethnicity73);
        java.util.Date date75 = personEthnicity74.getLastUpdatedTime();
        java.util.Date date76 = personEthnicity74.getCreateDateTime();
        participantEntity64.setDateOfDeath(date76);
        participantEntity64.setNameSuffix("2019-09-03-15.53.15.533");
        participantEntity64.setRaces("2019-09-03T15:53:17.753Z");
        boolean boolean82 = person59.equals((java.lang.Object) "2019-09-03T15:53:17.753Z");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date10);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 03 15:53:31 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date14);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Sep 03 15:53:31 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(personEthnicityId16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(serializable17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date22);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 03 15:53:31 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date26);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Sep 03 15:53:31 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33.equals(1L));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(addressArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(phoneNumberArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(languageArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(raceArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(ethnicityArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId" + "'", str60.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "" + "'", str61.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" + "'", str62.equals("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(obj63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date75);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date75.toString(), "Tue Sep 03 15:53:31 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(date76);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(date76.toString(), "Tue Sep 03 15:53:31 PDT 2019");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getType();
        java.lang.String str11 = address8.getStreetAddress();
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter hOIReporter12 = new gov.ca.cwds.rest.api.domain.hoi.HOIReporter();
        boolean boolean13 = address8.equals((java.lang.Object) hOIReporter12);
        java.lang.Integer int14 = address8.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId" + "'", str11.equals("gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14.equals(0));
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        boolean boolean1 = stringJsonUserType0.isMutable();
        int[] intArray2 = stringJsonUserType0.sqlTypes();
        java.lang.Object obj4 = stringJsonUserType0.deepCopy((java.lang.Object) "2019-09-03-15.53.08.216");
        java.lang.Class class5 = stringJsonUserType0.returnedClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "2019-09-03-15.53.08.216" + "'", obj4.equals("2019-09-03-15.53.08.216"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class5);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        gov.ca.cwds.data.persistence.hibernate.StringJsonUserType stringJsonUserType0 = new gov.ca.cwds.data.persistence.hibernate.StringJsonUserType();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship1 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship1.setLastUpdatedId("");
        gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role role4 = gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER;
        boolean boolean5 = stringJsonUserType0.equals((java.lang.Object) "", (java.lang.Object) role4);
        int[] intArray6 = stringJsonUserType0.sqlTypes();
        boolean boolean7 = stringJsonUserType0.isMutable();
        java.lang.Class class8 = stringJsonUserType0.returnedClass();
        java.sql.ResultSet resultSet9 = null;
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity10 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean11 = participantEntity10.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray12 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList13 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList13, csecEntityArray12);
        participantEntity10.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList13);
        gov.ca.cwds.data.persistence.ns.ScreeningEntity screeningEntity16 = participantEntity10.getScreening();
        java.lang.String str17 = participantEntity10.getScreeningId();
        participantEntity10.setLastName("2019-09-03T15:52:59.197-0700");
        java.lang.String str20 = participantEntity10.getLegacyId();
        participantEntity10.setSealed((java.lang.Boolean) false);
        java.lang.String[] strArray23 = participantEntity10.getRoles();
        org.hibernate.engine.spi.SharedSessionContractImplementor sharedSessionContractImplementor24 = null;
        gov.ca.cwds.rest.api.domain.PhoneNumber phoneNumber28 = new gov.ca.cwds.rest.api.domain.PhoneNumber("2019-09-03T15:53:05.518-0700", "2019-09-03-15.53.08.285", "2019-09-03-15.53.19.417");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = stringJsonUserType0.nullSafeGet(resultSet9, strArray23, sharedSessionContractImplementor24, (java.lang.Object) "2019-09-03-15.53.19.417");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + role4 + "' != '" + gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER + "'", role4.equals(gov.ca.cwds.rest.api.domain.hoi.HOIReporter.Role.MANDATED_REPORTER));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(intArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(class8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(screeningEntity16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray23);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.util.Date date1 = clientRelationship0.getLastUpdatedTime();
        java.lang.String str2 = clientRelationship0.getSecondaryClientId();
        java.lang.String str3 = clientRelationship0.getLastUpdatedId();
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship4 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        clientRelationship4.setLastUpdatedId("");
        clientRelationship4.setLastUpdatedId("gov.ca.cwds.data.persistence.cms.ClientRelationship.findClientRelationshipsBySecondaryClientIds");
        boolean boolean9 = clientRelationship0.relatedTo(clientRelationship4);
        java.lang.String str10 = clientRelationship4.getId();
        java.util.Date date11 = clientRelationship4.getEndDate();
        java.lang.String str12 = clientRelationship4.getId();
        java.util.Date date13 = clientRelationship4.getStartDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(date13);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        gov.ca.cwds.data.persistence.cms.ClientRelationship clientRelationship0 = new gov.ca.cwds.data.persistence.cms.ClientRelationship();
        java.lang.String str1 = clientRelationship0.getSameHomeCode();
        java.lang.String str2 = clientRelationship0.getPrimaryClientId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "" + "'", str1.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        gov.ca.cwds.data.persistence.ns.ParticipantEntity participantEntity0 = new gov.ca.cwds.data.persistence.ns.ParticipantEntity();
        java.lang.Boolean boolean1 = participantEntity0.getProbationYouth();
        gov.ca.cwds.data.persistence.ns.CsecEntity[] csecEntityArray2 = new gov.ca.cwds.data.persistence.ns.CsecEntity[] {};
        java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity> csecEntityList3 = new java.util.ArrayList<gov.ca.cwds.data.persistence.ns.CsecEntity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3, csecEntityArray2);
        participantEntity0.setCsecs((java.util.List<gov.ca.cwds.data.persistence.ns.CsecEntity>) csecEntityList3);
        boolean boolean7 = participantEntity0.equals((java.lang.Object) '4');
        java.lang.String[] strArray8 = participantEntity0.getLanguages();
        java.lang.String str9 = participantEntity0.getEthnicity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(csecEntityArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        gov.ca.cwds.rest.api.domain.LegacyDescriptor legacyDescriptor7 = null;
        gov.ca.cwds.rest.api.domain.Address address8 = new gov.ca.cwds.rest.api.domain.Address("yyyy-MM-dd-HH.mm.ss.SSS", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.deleteParticipantsByRelatedScreeningId", "gov.ca.cwds.data.persistence.ns.ParticipantEntity.findParticipantsByRelatedScreeningId", "yyyy-MM-dd HH:mm:ss.SSS", (java.lang.Integer) 100, "HH:mm:ss", (java.lang.Integer) 0, legacyDescriptor7);
        java.lang.String str9 = address8.getCity();
        java.lang.Integer int10 = address8.getState();
        boolean boolean12 = address8.equals((java.lang.Object) (short) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "yyyy-MM-dd HH:mm:ss.SSS" + "'", str9.equals("yyyy-MM-dd HH:mm:ss.SSS"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10.equals(100));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }
}
